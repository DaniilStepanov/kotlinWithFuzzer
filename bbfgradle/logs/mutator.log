2021-03-17 12:09:16,794 [main:66] - Compilation checking started
2021-03-17 12:09:18,214 [main:17] - Swap 0 of 101
2021-03-17 12:09:18,215 [main:40] - SWAPING PsiElement(fun) and PsiElement(LPAR)
2021-03-17 12:09:18,441 [main:66] - Compilation checking started
2021-03-17 12:09:18,444 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:18,446 [main:17] - Swap 1 of 101
2021-03-17 12:09:18,447 [main:40] - SWAPING PsiElement(IDENTIFIER) and PsiElement(REGULAR_STRING_PART)
2021-03-17 12:09:18,615 [main:66] - Compilation checking started
2021-03-17 12:09:18,617 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:18,619 [main:17] - Swap 2 of 101
2021-03-17 12:09:18,619 [main:40] - SWAPING Element(TYPE_PARAMETER_LIST) and PsiElement(IDENTIFIER)
2021-03-17 12:09:18,801 [main:66] - Compilation checking started
2021-03-17 12:09:18,805 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:18,807 [main:17] - Swap 3 of 101
2021-03-17 12:09:18,808 [main:40] - SWAPING PsiElement(LBRACE) and PsiElement(IDENTIFIER)
2021-03-17 12:09:18,961 [main:66] - Compilation checking started
2021-03-17 12:09:18,963 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:18,965 [main:17] - Swap 4 of 101
2021-03-17 12:09:18,965 [main:40] - SWAPING PsiElement(LPAR) and PsiElement(IDENTIFIER)
2021-03-17 12:09:19,152 [main:66] - Compilation checking started
2021-03-17 12:09:19,155 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:19,157 [main:17] - Swap 5 of 101
2021-03-17 12:09:19,158 [main:40] - SWAPING Element(FUN) and PsiElement(IDENTIFIER)
2021-03-17 12:09:19,269 [main:66] - Compilation checking started
2021-03-17 12:09:19,271 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:19,272 [main:17] - Swap 6 of 101
2021-03-17 12:09:19,272 [main:40] - SWAPING Element(STRING_TEMPLATE) and PsiElement(OPEN_QUOTE)
2021-03-17 12:09:19,411 [main:66] - Compilation checking started
2021-03-17 12:09:20,245 [main:17] - Swap 7 of 101
2021-03-17 12:09:20,246 [main:40] - SWAPING PsiElement(LT) and Element(VALUE_PARAMETER_LIST)
2021-03-17 12:09:20,368 [main:66] - Compilation checking started
2021-03-17 12:09:20,370 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:20,371 [main:17] - Swap 8 of 101
2021-03-17 12:09:20,371 [main:40] - SWAPING Element(LITERAL_STRING_TEMPLATE_ENTRY) and PsiElement(RBRACE)
2021-03-17 12:09:20,478 [main:66] - Compilation checking started
2021-03-17 12:09:20,480 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:20,481 [main:17] - Swap 9 of 101
2021-03-17 12:09:20,481 [main:40] - SWAPING Element(USER_TYPE) and PsiElement(COLON)
2021-03-17 12:09:20,595 [main:66] - Compilation checking started
2021-03-17 12:09:20,598 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:20,600 [main:17] - Swap 10 of 101
2021-03-17 12:09:20,600 [main:40] - SWAPING BLOCK and Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:09:20,734 [main:66] - Compilation checking started
2021-03-17 12:09:20,736 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:20,737 [main:17] - Swap 11 of 101
2021-03-17 12:09:20,737 [main:40] - SWAPING Element(REFERENCE_EXPRESSION) and Element(TYPE_REFERENCE)
2021-03-17 12:09:20,845 [main:66] - Compilation checking started
2021-03-17 12:09:21,424 [main:17] - Swap 12 of 101
2021-03-17 12:09:21,424 [main:40] - SWAPING PsiElement(RPAR) and PsiElement(else)
2021-03-17 12:09:21,550 [main:66] - Compilation checking started
2021-03-17 12:09:21,551 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:21,552 [main:17] - Swap 13 of 101
2021-03-17 12:09:21,553 [main:40] - SWAPING Element(RETURN) and PsiElement(LBRACE)
2021-03-17 12:09:21,679 [main:66] - Compilation checking started
2021-03-17 12:09:21,681 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:21,682 [main:17] - Swap 14 of 101
2021-03-17 12:09:21,683 [main:40] - SWAPING Element(STRING_TEMPLATE) and Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:09:21,796 [main:66] - Compilation checking started
2021-03-17 12:09:21,797 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:21,798 [main:17] - Swap 15 of 101
2021-03-17 12:09:21,798 [main:40] - SWAPING Element(REFERENCE_EXPRESSION) and PsiElement(LPAR)
2021-03-17 12:09:21,925 [main:66] - Compilation checking started
2021-03-17 12:09:21,926 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:21,927 [main:17] - Swap 16 of 101
2021-03-17 12:09:21,927 [main:40] - SWAPING PsiElement(CLOSING_QUOTE) and PsiElement(return)
2021-03-17 12:09:22,048 [main:66] - Compilation checking started
2021-03-17 12:09:22,049 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:22,050 [main:17] - Swap 17 of 101
2021-03-17 12:09:22,051 [main:40] - SWAPING Element(BINARY_EXPRESSION) and Element(TYPE_PARAMETER_LIST)
2021-03-17 12:09:22,155 [main:66] - Compilation checking started
2021-03-17 12:09:22,156 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:22,157 [main:17] - Swap 18 of 101
2021-03-17 12:09:22,157 [main:40] - SWAPING Element(VALUE_ARGUMENT_LIST) and PsiElement(RBRACE)
2021-03-17 12:09:22,262 [main:66] - Compilation checking started
2021-03-17 12:09:22,866 [main:17] - Swap 19 of 101
2021-03-17 12:09:22,866 [main:40] - SWAPING PsiElement(fun) and PsiElement(CLOSING_QUOTE)
2021-03-17 12:09:22,956 [main:66] - Compilation checking started
2021-03-17 12:09:22,957 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:22,958 [main:17] - Swap 20 of 101
2021-03-17 12:09:22,958 [main:40] - SWAPING Element(RETURN) and PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-17 12:09:23,056 [main:66] - Compilation checking started
2021-03-17 12:09:23,058 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:23,059 [main:17] - Swap 21 of 101
2021-03-17 12:09:23,060 [main:40] - SWAPING PsiElement(IDENTIFIER) and Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:09:23,161 [main:66] - Compilation checking started
2021-03-17 12:09:23,162 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:23,163 [main:17] - Swap 22 of 101
2021-03-17 12:09:23,163 [main:40] - SWAPING PsiElement(return) and PsiElement(RPAR)
2021-03-17 12:09:23,266 [main:66] - Compilation checking started
2021-03-17 12:09:23,268 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:23,269 [main:17] - Swap 23 of 101
2021-03-17 12:09:23,269 [main:40] - SWAPING Element(BINARY_EXPRESSION) and PsiElement(IDENTIFIER)
2021-03-17 12:09:23,377 [main:66] - Compilation checking started
2021-03-17 12:09:23,378 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:23,379 [main:17] - Swap 24 of 101
2021-03-17 12:09:23,379 [main:40] - SWAPING PsiElement(DOT) and PsiElement(GT)
2021-03-17 12:09:23,470 [main:66] - Compilation checking started
2021-03-17 12:09:23,471 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:23,472 [main:17] - Swap 25 of 101
2021-03-17 12:09:23,472 [main:40] - SWAPING PsiElement(IDENTIFIER) and PsiElement(OPEN_QUOTE)
2021-03-17 12:09:23,580 [main:66] - Compilation checking started
2021-03-17 12:09:23,581 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:23,582 [main:17] - Swap 26 of 101
2021-03-17 12:09:23,583 [main:40] - SWAPING PsiElement(CLOSING_QUOTE) and PsiElement(RPAR)
2021-03-17 12:09:23,708 [main:66] - Compilation checking started
2021-03-17 12:09:23,709 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:23,710 [main:17] - Swap 27 of 101
2021-03-17 12:09:23,710 [main:40] - SWAPING PsiElement(LBRACE) and BLOCK
2021-03-17 12:09:23,803 [main:66] - Compilation checking started
2021-03-17 12:09:24,324 [main:17] - Swap 28 of 101
2021-03-17 12:09:24,324 [main:40] - SWAPING PsiElement(REGULAR_STRING_PART) and Element(VALUE_PARAMETER)
2021-03-17 12:09:24,411 [main:66] - Compilation checking started
2021-03-17 12:09:24,412 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:24,413 [main:17] - Swap 29 of 101
2021-03-17 12:09:24,413 [main:40] - SWAPING Element(VALUE_ARGUMENT_LIST) and Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:09:24,500 [main:66] - Compilation checking started
2021-03-17 12:09:24,501 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:24,502 [main:17] - Swap 30 of 101
2021-03-17 12:09:24,502 [main:40] - SWAPING PsiElement(val) and Element(USER_TYPE)
2021-03-17 12:09:24,586 [main:66] - Compilation checking started
2021-03-17 12:09:24,588 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:24,588 [main:17] - Swap 31 of 101
2021-03-17 12:09:24,589 [main:40] - SWAPING PsiElement(LPAR) and PsiElement(IDENTIFIER)
2021-03-17 12:09:24,681 [main:66] - Compilation checking started
2021-03-17 12:09:24,682 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:24,682 [main:17] - Swap 32 of 101
2021-03-17 12:09:24,683 [main:40] - SWAPING PsiElement(LBRACE) and Element(TYPE_PARAMETER)
2021-03-17 12:09:24,769 [main:66] - Compilation checking started
2021-03-17 12:09:24,770 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:24,771 [main:17] - Swap 33 of 101
2021-03-17 12:09:24,771 [main:40] - SWAPING PsiElement(LPAR) and PsiElement(val)
2021-03-17 12:09:24,857 [main:66] - Compilation checking started
2021-03-17 12:09:24,858 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:24,859 [main:17] - Swap 34 of 101
2021-03-17 12:09:24,859 [main:40] - SWAPING PsiElement(LPAR) and Element(VALUE_ARGUMENT)
2021-03-17 12:09:24,976 [main:66] - Compilation checking started
2021-03-17 12:09:24,978 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:24,978 [main:17] - Swap 35 of 101
2021-03-17 12:09:24,979 [main:40] - SWAPING Element(REFERENCE_EXPRESSION) and PsiElement(IDENTIFIER)
2021-03-17 12:09:25,062 [main:66] - Compilation checking started
2021-03-17 12:09:25,503 [main:17] - Swap 36 of 101
2021-03-17 12:09:25,504 [main:40] - SWAPING PsiElement(MUL) and Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:09:25,595 [main:66] - Compilation checking started
2021-03-17 12:09:25,596 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:25,597 [main:17] - Swap 37 of 101
2021-03-17 12:09:25,597 [main:40] - SWAPING Element(VALUE_ARGUMENT_LIST) and PsiElement(else)
2021-03-17 12:09:25,689 [main:66] - Compilation checking started
2021-03-17 12:09:25,690 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:25,691 [main:17] - Swap 38 of 101
2021-03-17 12:09:25,691 [main:40] - SWAPING Element(VALUE_PARAMETER_LIST) and Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:09:25,787 [main:66] - Compilation checking started
2021-03-17 12:09:25,789 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:25,790 [main:17] - Swap 39 of 101
2021-03-17 12:09:25,790 [main:40] - SWAPING PsiElement(IDENTIFIER) and Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:09:25,908 [main:66] - Compilation checking started
2021-03-17 12:09:26,466 [main:17] - Swap 40 of 101
2021-03-17 12:09:26,466 [main:40] - SWAPING Element(VALUE_ARGUMENT_LIST) and PsiElement(fun)
2021-03-17 12:09:26,551 [main:66] - Compilation checking started
2021-03-17 12:09:26,553 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:26,554 [main:17] - Swap 41 of 101
2021-03-17 12:09:26,554 [main:40] - SWAPING PsiElement(CLOSING_QUOTE) and PsiElement(RPAR)
2021-03-17 12:09:26,641 [main:66] - Compilation checking started
2021-03-17 12:09:26,642 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:26,643 [main:17] - Swap 42 of 101
2021-03-17 12:09:26,644 [main:40] - SWAPING PsiElement(RBRACE) and PsiElement(OPEN_QUOTE)
2021-03-17 12:09:26,742 [main:66] - Compilation checking started
2021-03-17 12:09:26,744 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:26,745 [main:17] - Swap 43 of 101
2021-03-17 12:09:26,745 [main:40] - SWAPING Element(LITERAL_STRING_TEMPLATE_ENTRY) and Element(REFERENCE_EXPRESSION)
2021-03-17 12:09:26,878 [main:66] - Compilation checking started
2021-03-17 12:09:27,346 [main:17] - Swap 44 of 101
2021-03-17 12:09:27,346 [main:40] - SWAPING PsiElement(IDENTIFIER) and Element(TYPE_REFERENCE)
2021-03-17 12:09:27,441 [main:66] - Compilation checking started
2021-03-17 12:09:28,021 [main:17] - Swap 45 of 101
2021-03-17 12:09:28,021 [main:40] - SWAPING PsiElement(IDENTIFIER) and Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:09:28,122 [main:66] - Compilation checking started
2021-03-17 12:09:28,123 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:28,124 [main:17] - Swap 46 of 101
2021-03-17 12:09:28,124 [main:40] - SWAPING PsiElement(val) and PsiElement(else)
2021-03-17 12:09:28,210 [main:66] - Compilation checking started
2021-03-17 12:09:28,211 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:28,212 [main:17] - Swap 47 of 101
2021-03-17 12:09:28,212 [main:40] - SWAPING Element(REFERENCE_EXPRESSION) and PsiElement(REGULAR_STRING_PART)
2021-03-17 12:09:28,301 [main:66] - Compilation checking started
2021-03-17 12:09:28,808 [main:17] - Swap 48 of 101
2021-03-17 12:09:28,809 [main:40] - SWAPING PsiElement(COLON) and PsiElement(REGULAR_STRING_PART)
2021-03-17 12:09:28,913 [main:66] - Compilation checking started
2021-03-17 12:09:28,914 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:28,915 [main:17] - Swap 49 of 101
2021-03-17 12:09:28,915 [main:40] - SWAPING PsiElement(RBRACE) and Element(VALUE_ARGUMENT)
2021-03-17 12:09:29,012 [main:66] - Compilation checking started
2021-03-17 12:09:29,014 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:29,014 [main:17] - Swap 50 of 101
2021-03-17 12:09:29,015 [main:40] - SWAPING Element(RETURN) and PsiElement(val)
2021-03-17 12:09:29,111 [main:66] - Compilation checking started
2021-03-17 12:09:29,113 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:29,113 [main:17] - Swap 51 of 101
2021-03-17 12:09:29,114 [main:40] - SWAPING PsiElement(IDENTIFIER) and Element(REFERENCE_EXPRESSION)
2021-03-17 12:09:29,217 [main:66] - Compilation checking started
2021-03-17 12:09:29,672 [main:17] - Swap 52 of 101
2021-03-17 12:09:29,672 [main:40] - SWAPING Element(REFERENCE_EXPRESSION) and PsiElement(IDENTIFIER)
2021-03-17 12:09:29,761 [main:66] - Compilation checking started
2021-03-17 12:09:30,184 [main:17] - Swap 53 of 101
2021-03-17 12:09:30,184 [main:40] - SWAPING Element(VALUE_PARAMETER) and PsiElement(OPEN_QUOTE)
2021-03-17 12:09:30,271 [main:66] - Compilation checking started
2021-03-17 12:09:30,272 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:30,273 [main:17] - Swap 54 of 101
2021-03-17 12:09:30,273 [main:40] - SWAPING PsiElement(EQ) and Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:09:30,369 [main:66] - Compilation checking started
2021-03-17 12:09:30,814 [main:17] - Swap 55 of 101
2021-03-17 12:09:30,814 [main:40] - SWAPING Element(USER_TYPE) and Element(OPERATION_REFERENCE)
2021-03-17 12:09:30,900 [main:66] - Compilation checking started
2021-03-17 12:09:30,901 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:30,902 [main:17] - Swap 56 of 101
2021-03-17 12:09:30,902 [main:40] - SWAPING PsiElement(REGULAR_STRING_PART) and PsiElement(LPAR)
2021-03-17 12:09:30,980 [main:66] - Compilation checking started
2021-03-17 12:09:30,981 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:30,981 [main:17] - Swap 57 of 101
2021-03-17 12:09:30,982 [main:40] - SWAPING PsiElement(LBRACE) and PsiElement(IDENTIFIER)
2021-03-17 12:09:31,064 [main:66] - Compilation checking started
2021-03-17 12:09:31,065 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:31,065 [main:17] - Swap 58 of 101
2021-03-17 12:09:31,066 [main:40] - SWAPING PsiElement(CLOSING_QUOTE) and Element(TYPE_REFERENCE)
2021-03-17 12:09:31,180 [main:66] - Compilation checking started
2021-03-17 12:09:31,181 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:31,182 [main:17] - Swap 59 of 101
2021-03-17 12:09:31,182 [main:40] - SWAPING PsiElement(IDENTIFIER) and Element(VALUE_PARAMETER)
2021-03-17 12:09:31,268 [main:66] - Compilation checking started
2021-03-17 12:09:31,269 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:31,270 [main:17] - Swap 60 of 101
2021-03-17 12:09:31,270 [main:40] - SWAPING PsiElement(IDENTIFIER) and PsiElement(RPAR)
2021-03-17 12:09:31,365 [main:66] - Compilation checking started
2021-03-17 12:09:31,366 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:31,367 [main:17] - Swap 61 of 101
2021-03-17 12:09:31,367 [main:40] - SWAPING PsiElement(IDENTIFIER) and PsiElement(REGULAR_STRING_PART)
2021-03-17 12:09:31,458 [main:66] - Compilation checking started
2021-03-17 12:09:31,459 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:31,460 [main:17] - Swap 62 of 101
2021-03-17 12:09:31,460 [main:40] - SWAPING Element(REFERENCE_EXPRESSION) and PsiElement(DOT)
2021-03-17 12:09:31,579 [main:66] - Compilation checking started
2021-03-17 12:09:32,043 [main:17] - Swap 63 of 101
2021-03-17 12:09:32,044 [main:40] - SWAPING PsiElement(RBRACE) and PsiElement(OPEN_QUOTE)
2021-03-17 12:09:32,138 [main:66] - Compilation checking started
2021-03-17 12:09:32,139 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:32,139 [main:17] - Swap 64 of 101
2021-03-17 12:09:32,139 [main:40] - SWAPING Element(STRING_TEMPLATE) and Element(VALUE_PARAMETER_LIST)
2021-03-17 12:09:32,229 [main:66] - Compilation checking started
2021-03-17 12:09:32,230 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:32,231 [main:17] - Swap 65 of 101
2021-03-17 12:09:32,231 [main:40] - SWAPING Element(VALUE_ARGUMENT_LIST) and PsiElement(IDENTIFIER)
2021-03-17 12:09:32,318 [main:66] - Compilation checking started
2021-03-17 12:09:32,319 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:32,320 [main:17] - Swap 66 of 101
2021-03-17 12:09:32,320 [main:40] - SWAPING PsiElement(DOT) and PsiElement(OPEN_QUOTE)
2021-03-17 12:09:32,451 [main:66] - Compilation checking started
2021-03-17 12:09:32,453 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:32,453 [main:17] - Swap 67 of 101
2021-03-17 12:09:32,454 [main:40] - SWAPING Element(REFERENCE_EXPRESSION) and Element(USER_TYPE)
2021-03-17 12:09:32,541 [main:66] - Compilation checking started
2021-03-17 12:09:33,002 [main:17] - Swap 68 of 101
2021-03-17 12:09:33,002 [main:40] - SWAPING Element(STRING_TEMPLATE) and PsiElement(OPEN_QUOTE)
2021-03-17 12:09:33,093 [main:66] - Compilation checking started
2021-03-17 12:09:33,094 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:33,094 [main:17] - Swap 69 of 101
2021-03-17 12:09:33,095 [main:40] - SWAPING Element(VALUE_ARGUMENT) and PsiElement(RPAR)
2021-03-17 12:09:33,179 [main:66] - Compilation checking started
2021-03-17 12:09:33,180 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:33,180 [main:17] - Swap 70 of 101
2021-03-17 12:09:33,180 [main:40] - SWAPING Element(VALUE_PARAMETER) and PsiElement(COLON)
2021-03-17 12:09:33,261 [main:66] - Compilation checking started
2021-03-17 12:09:33,262 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:33,263 [main:17] - Swap 71 of 101
2021-03-17 12:09:33,263 [main:40] - SWAPING PsiElement(RPAR) and PsiElement(EQ)
2021-03-17 12:09:33,362 [main:66] - Compilation checking started
2021-03-17 12:09:33,363 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:33,363 [main:17] - Swap 72 of 101
2021-03-17 12:09:33,364 [main:40] - SWAPING PsiElement(EQ) and Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:09:33,461 [main:66] - Compilation checking started
2021-03-17 12:09:33,462 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:33,463 [main:17] - Swap 73 of 101
2021-03-17 12:09:33,463 [main:40] - SWAPING Element(VALUE_ARGUMENT) and Element(STRING_TEMPLATE)
2021-03-17 12:09:33,552 [main:66] - Compilation checking started
2021-03-17 12:09:34,197 [main:17] - Swap 74 of 101
2021-03-17 12:09:34,197 [main:40] - SWAPING Element(SHORT_STRING_TEMPLATE_ENTRY) and PsiElement(RPAR)
2021-03-17 12:09:34,284 [main:66] - Compilation checking started
2021-03-17 12:09:34,285 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:34,286 [main:17] - Swap 75 of 101
2021-03-17 12:09:34,286 [main:40] - SWAPING PsiElement(REGULAR_STRING_PART) and Element(RETURN)
2021-03-17 12:09:34,380 [main:66] - Compilation checking started
2021-03-17 12:09:34,381 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:34,382 [main:17] - Swap 76 of 101
2021-03-17 12:09:34,382 [main:40] - SWAPING PsiElement(LBRACE) and Element(SHORT_STRING_TEMPLATE_ENTRY)
2021-03-17 12:09:34,466 [main:66] - Compilation checking started
2021-03-17 12:09:34,467 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:34,467 [main:17] - Swap 77 of 101
2021-03-17 12:09:34,468 [main:40] - SWAPING PsiElement(for) and Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:09:34,579 [main:66] - Compilation checking started
2021-03-17 12:09:34,580 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:34,580 [main:17] - Swap 78 of 101
2021-03-17 12:09:34,581 [main:40] - SWAPING PsiElement(RPAR) and Element(STRING_TEMPLATE)
2021-03-17 12:09:34,688 [main:66] - Compilation checking started
2021-03-17 12:09:34,689 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:34,690 [main:17] - Swap 79 of 101
2021-03-17 12:09:34,690 [main:40] - SWAPING Element(TYPE_REFERENCE) and Element(VALUE_PARAMETER)
2021-03-17 12:09:34,783 [main:66] - Compilation checking started
2021-03-17 12:09:34,784 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:34,784 [main:17] - Swap 80 of 101
2021-03-17 12:09:34,785 [main:40] - SWAPING PsiElement(CLOSING_QUOTE) and Element(FUN)
2021-03-17 12:09:34,898 [main:66] - Compilation checking started
2021-03-17 12:09:34,902 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:34,903 [main:17] - Swap 81 of 101
2021-03-17 12:09:34,904 [main:40] - SWAPING PsiElement(IDENTIFIER) and Element(BINARY_EXPRESSION)
2021-03-17 12:09:35,002 [main:66] - Compilation checking started
2021-03-17 12:09:35,003 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:35,004 [main:17] - Swap 82 of 101
2021-03-17 12:09:35,004 [main:40] - SWAPING PsiElement(IDENTIFIER) and Element(TYPE_PARAMETER)
2021-03-17 12:09:35,088 [main:66] - Compilation checking started
2021-03-17 12:09:35,088 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:35,089 [main:17] - Swap 83 of 101
2021-03-17 12:09:35,090 [main:40] - SWAPING Element(DESTRUCTURING_DECLARATION_ENTRY) and PsiElement(RPAR)
2021-03-17 12:09:35,184 [main:66] - Compilation checking started
2021-03-17 12:09:35,186 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:35,186 [main:17] - Swap 84 of 101
2021-03-17 12:09:35,186 [main:40] - SWAPING Element(DESTRUCTURING_DECLARATION_ENTRY) and Element(VALUE_PARAMETER_LIST)
2021-03-17 12:09:35,288 [main:66] - Compilation checking started
2021-03-17 12:09:35,290 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:35,291 [main:17] - Swap 85 of 101
2021-03-17 12:09:35,291 [main:40] - SWAPING Element(OPERATION_REFERENCE) and Element(REFERENCE_EXPRESSION)
2021-03-17 12:09:35,390 [main:66] - Compilation checking started
2021-03-17 12:09:35,391 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:35,392 [main:17] - Swap 86 of 101
2021-03-17 12:09:35,392 [main:40] - SWAPING PsiElement(LBRACE) and PsiElement(RPAR)
2021-03-17 12:09:35,483 [main:66] - Compilation checking started
2021-03-17 12:09:35,484 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:35,485 [main:17] - Swap 87 of 101
2021-03-17 12:09:35,485 [main:40] - SWAPING BLOCK and Element(VALUE_ARGUMENT)
2021-03-17 12:09:35,621 [main:66] - Compilation checking started
2021-03-17 12:09:35,622 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:35,622 [main:17] - Swap 88 of 101
2021-03-17 12:09:35,622 [main:40] - SWAPING PsiElement(IDENTIFIER) and PsiElement(RPAR)
2021-03-17 12:09:35,710 [main:66] - Compilation checking started
2021-03-17 12:09:35,711 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:35,711 [main:17] - Swap 89 of 101
2021-03-17 12:09:35,712 [main:40] - SWAPING PsiElement(CLOSING_QUOTE) and BLOCK
2021-03-17 12:09:35,793 [main:66] - Compilation checking started
2021-03-17 12:09:35,794 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:35,795 [main:17] - Swap 90 of 101
2021-03-17 12:09:35,795 [main:40] - SWAPING PsiElement(LBRACE) and PsiElement(LPAR)
2021-03-17 12:09:35,876 [main:66] - Compilation checking started
2021-03-17 12:09:35,878 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:35,878 [main:17] - Swap 91 of 101
2021-03-17 12:09:35,878 [main:40] - SWAPING PsiElement(REGULAR_STRING_PART) and Element(TYPE_REFERENCE)
2021-03-17 12:09:36,001 [main:66] - Compilation checking started
2021-03-17 12:09:36,002 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:36,003 [main:17] - Swap 92 of 101
2021-03-17 12:09:36,003 [main:40] - SWAPING Element(LOOP_RANGE) and Element(BODY)
2021-03-17 12:09:36,106 [main:66] - Compilation checking started
2021-03-17 12:09:36,624 [main:17] - Swap 93 of 101
2021-03-17 12:09:36,624 [main:40] - SWAPING PsiElement(IDENTIFIER) and PsiElement(return)
2021-03-17 12:09:36,727 [main:66] - Compilation checking started
2021-03-17 12:09:36,728 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:36,729 [main:17] - Swap 94 of 101
2021-03-17 12:09:36,729 [main:40] - SWAPING PsiElement(LPAR) and PsiElement(REGULAR_STRING_PART)
2021-03-17 12:09:36,820 [main:66] - Compilation checking started
2021-03-17 12:09:36,821 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:36,822 [main:17] - Swap 95 of 101
2021-03-17 12:09:36,823 [main:40] - SWAPING Element(VALUE_ARGUMENT) and Element(REFERENCE_EXPRESSION)
2021-03-17 12:09:36,927 [main:66] - Compilation checking started
2021-03-17 12:09:37,455 [main:17] - Swap 96 of 101
2021-03-17 12:09:37,455 [main:40] - SWAPING PsiElement(RPAR) and PsiElement(EQ)
2021-03-17 12:09:37,561 [main:66] - Compilation checking started
2021-03-17 12:09:37,563 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:37,564 [main:17] - Swap 97 of 101
2021-03-17 12:09:37,564 [main:40] - SWAPING Element(VALUE_ARGUMENT) and PsiElement(val)
2021-03-17 12:09:37,670 [main:66] - Compilation checking started
2021-03-17 12:09:37,671 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:37,671 [main:17] - Swap 98 of 101
2021-03-17 12:09:37,672 [main:40] - SWAPING Element(REFERENCE_EXPRESSION) and PsiElement(RPAR)
2021-03-17 12:09:37,777 [main:66] - Compilation checking started
2021-03-17 12:09:37,778 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:37,778 [main:17] - Swap 99 of 101
2021-03-17 12:09:37,778 [main:40] - SWAPING Element(REFERENCE_EXPRESSION) and PsiElement(REGULAR_STRING_PART)
2021-03-17 12:09:37,879 [main:66] - Compilation checking started
2021-03-17 12:09:38,326 [main:17] - Swap 100 of 101
2021-03-17 12:09:38,327 [main:40] - SWAPING Element(PROPERTY) and PsiElement(REGULAR_STRING_PART)
2021-03-17 12:09:38,410 [main:66] - Compilation checking started
2021-03-17 12:09:38,922 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:38,924 [main:66] - Compilation checking started
2021-03-17 12:09:39,370 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: String): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:39,370 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:39,370 [main:66] - Compilation checking started
2021-03-17 12:09:39,370 [main:68] - Already checked
2021-03-17 12:09:39,372 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:39,372 [main:66] - Compilation checking started
2021-03-17 12:09:39,816 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): Double {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:39,816 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:39,817 [main:66] - Compilation checking started
2021-03-17 12:09:40,250 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : ULong> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:40,251 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:40,251 [main:66] - Compilation checking started
2021-03-17 12:09:40,687 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: T): Char {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:40,688 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:40,688 [main:66] - Compilation checking started
2021-03-17 12:09:40,688 [main:68] - Already checked
2021-03-17 12:09:40,933 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:40,933 [main:66] - Compilation checking started
2021-03-17 12:09:41,451 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: ArrayDeque<Int>): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:41,453 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:41,454 [main:66] - Compilation checking started
2021-03-17 12:09:41,929 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): Sequence<MutableMap<Map<Short, ArrayDeque<UInt>>, Short>> {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:41,931 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:41,931 [main:66] - Compilation checking started
2021-03-17 12:09:42,377 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Set<ArrayList<ULong>>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:42,377 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:42,377 [main:66] - Compilation checking started
2021-03-17 12:09:42,832 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Double> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:42,832 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:42,833 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:42,833 [main:66] - Compilation checking started
2021-03-17 12:09:43,289 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : String> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:43,290 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:43,291 [main:66] - Compilation checking started
2021-03-17 12:09:43,742 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Sequence<Double>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:43,742 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:43,743 [main:66] - Compilation checking started
2021-03-17 12:09:44,227 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: UInt): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:44,227 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:44,227 [main:66] - Compilation checking started
2021-03-17 12:09:44,676 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: UShort): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:44,676 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:44,676 [main:66] - Compilation checking started
2021-03-17 12:09:44,676 [main:68] - Already checked
2021-03-17 12:09:44,676 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:44,677 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:44,677 [main:66] - Compilation checking started
2021-03-17 12:09:44,677 [main:68] - Already checked
2021-03-17 12:09:44,677 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:44,677 [main:66] - Compilation checking started
2021-03-17 12:09:45,133 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: ULong): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:45,134 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:45,146 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:45,147 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:45,148 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:45,148 [main:66] - Compilation checking started
2021-03-17 12:09:45,148 [main:68] - Already checked
2021-03-17 12:09:45,148 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:45,148 [main:66] - Compilation checking started
2021-03-17 12:09:45,148 [main:68] - Already checked
2021-03-17 12:09:45,148 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : String> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:45,148 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:45,148 [main:66] - Compilation checking started
2021-03-17 12:09:45,149 [main:68] - Already checked
2021-03-17 12:09:45,149 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: String): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:45,149 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:45,149 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:45,149 [main:66] - Compilation checking started
2021-03-17 12:09:45,149 [main:68] - Already checked
2021-03-17 12:09:45,149 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:45,149 [main:66] - Compilation checking started
2021-03-17 12:09:45,588 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: T): Iterable<*> {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:45,588 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:45,588 [main:66] - Compilation checking started
2021-03-17 12:09:45,588 [main:68] - Already checked
2021-03-17 12:09:45,588 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:45,588 [main:66] - Compilation checking started
2021-03-17 12:09:46,009 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: Byte): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:46,010 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:46,010 [main:66] - Compilation checking started
2021-03-17 12:09:46,454 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: T): Array<UByte> {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:46,454 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:46,454 [main:66] - Compilation checking started
2021-03-17 12:09:46,454 [main:68] - Already checked
2021-03-17 12:09:46,455 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:46,455 [main:66] - Compilation checking started
2021-03-17 12:09:46,455 [main:68] - Already checked
2021-03-17 12:09:46,455 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: UInt): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:46,455 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:46,455 [main:66] - Compilation checking started
2021-03-17 12:09:46,901 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Pair<Char, Char>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:46,902 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:46,902 [main:66] - Compilation checking started
2021-03-17 12:09:47,372 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: T): LinkedHashSet<Map<UShort, Char>> {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:47,372 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:47,372 [main:66] - Compilation checking started
2021-03-17 12:09:47,372 [main:68] - Already checked
2021-03-17 12:09:47,372 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:47,372 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:47,372 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:47,372 [main:66] - Compilation checking started
2021-03-17 12:09:47,372 [main:68] - Already checked
2021-03-17 12:09:47,372 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:47,372 [main:66] - Compilation checking started
2021-03-17 12:09:47,372 [main:68] - Already checked
2021-03-17 12:09:47,372 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:47,373 [main:66] - Compilation checking started
2021-03-17 12:09:47,373 [main:68] - Already checked
2021-03-17 12:09:47,373 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:47,373 [main:66] - Compilation checking started
2021-03-17 12:09:47,373 [main:68] - Already checked
2021-03-17 12:09:47,373 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: String): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:47,373 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:47,373 [main:66] - Compilation checking started
2021-03-17 12:09:47,849 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: T): LinkedHashSet<ULong> {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:47,850 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:47,850 [main:66] - Compilation checking started
2021-03-17 12:09:48,274 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: Pair<UInt, Map<Double, Map<UShort, Long>>>): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:48,275 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:48,276 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:48,276 [main:66] - Compilation checking started
2021-03-17 12:09:48,721 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Char> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:48,722 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:48,722 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:48,722 [main:66] - Compilation checking started
2021-03-17 12:09:48,722 [main:68] - Already checked
2021-03-17 12:09:48,722 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:48,722 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:48,722 [main:66] - Compilation checking started
2021-03-17 12:09:48,722 [main:68] - Already checked
2021-03-17 12:09:48,722 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:48,722 [main:66] - Compilation checking started
2021-03-17 12:09:48,722 [main:68] - Already checked
2021-03-17 12:09:48,723 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:48,723 [main:66] - Compilation checking started
2021-03-17 12:09:49,177 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: T): ArrayList<Short> {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:49,178 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:49,178 [main:66] - Compilation checking started
2021-03-17 12:09:49,614 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: Pair<Double, Boolean>): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:49,615 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:49,615 [main:66] - Compilation checking started
2021-03-17 12:09:50,029 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: Boolean): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:50,030 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:50,030 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:50,030 [main:66] - Compilation checking started
2021-03-17 12:09:50,030 [main:68] - Already checked
2021-03-17 12:09:50,030 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:50,030 [main:66] - Compilation checking started
2021-03-17 12:09:50,030 [main:68] - Already checked
2021-03-17 12:09:50,030 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:50,031 [main:66] - Compilation checking started
2021-03-17 12:09:50,505 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: T): ArrayDeque<LinkedHashMap<Double, ArrayDeque<UInt>>> {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:50,506 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:50,506 [main:66] - Compilation checking started
2021-03-17 12:09:50,952 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: T): Sequence<LinkedHashMap<Double, UShort>> {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:50,952 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:50,952 [main:66] - Compilation checking started
2021-03-17 12:09:51,377 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: T): T {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:51,377 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:51,378 [main:66] - Compilation checking started
2021-03-17 12:09:51,804 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: T): Collection<List<LinkedHashSet<Array<LinkedHashSet<Set<UByte>>>>>> {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:51,805 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:51,805 [main:66] - Compilation checking started
2021-03-17 12:09:52,219 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: Double): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:52,219 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:52,219 [main:66] - Compilation checking started
2021-03-17 12:09:52,219 [main:68] - Already checked
2021-03-17 12:09:52,219 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: T): Char {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:52,219 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:52,220 [main:66] - Compilation checking started
2021-03-17 12:09:52,643 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Int> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:52,643 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:52,644 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:52,644 [main:66] - Compilation checking started
2021-03-17 12:09:53,057 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Byte> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:53,057 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:53,057 [main:66] - Compilation checking started
2021-03-17 12:09:53,483 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Boolean> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:53,484 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:53,484 [main:66] - Compilation checking started
2021-03-17 12:09:53,925 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Array<Triple<Triple<Long, Set<MutableMap<Map<UInt, LinkedHashSet<MutableMap<Boolean, ULong>>>, ArrayDeque<Int>>>, Char>, ArrayList<Int>, Char>>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:53,926 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:53,926 [main:66] - Compilation checking started
2021-03-17 12:09:54,362 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: Set<UByte>): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:54,362 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:54,363 [main:66] - Compilation checking started
2021-03-17 12:09:54,363 [main:68] - Already checked
2021-03-17 12:09:54,363 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: String): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:54,363 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:54,363 [main:66] - Compilation checking started
2021-03-17 12:09:54,363 [main:68] - Already checked
2021-03-17 12:09:54,363 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:54,363 [main:66] - Compilation checking started
2021-03-17 12:09:54,789 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: T): LinkedHashSet<UShort> {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:54,790 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:54,790 [main:66] - Compilation checking started
2021-03-17 12:09:54,790 [main:68] - Already checked
2021-03-17 12:09:54,790 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: ULong): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:54,790 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:54,790 [main:66] - Compilation checking started
2021-03-17 12:09:55,233 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : LinkedHashSet<ArrayList<Boolean>>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:55,234 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:55,234 [main:66] - Compilation checking started
2021-03-17 12:09:55,234 [main:68] - Already checked
2021-03-17 12:09:55,234 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:55,234 [main:66] - Compilation checking started
2021-03-17 12:09:55,675 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : LinkedHashSet<Char>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:55,675 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:55,676 [main:66] - Compilation checking started
2021-03-17 12:09:55,676 [main:68] - Already checked
2021-03-17 12:09:55,676 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:55,676 [main:66] - Compilation checking started
2021-03-17 12:09:55,676 [main:68] - Already checked
2021-03-17 12:09:55,676 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: T): Iterable<*> {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:55,676 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:55,676 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:55,677 [main:66] - Compilation checking started
2021-03-17 12:09:55,677 [main:68] - Already checked
2021-03-17 12:09:55,677 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : String> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:55,677 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:55,677 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:55,677 [main:66] - Compilation checking started
2021-03-17 12:09:56,098 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: Sequence<Int>): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:56,099 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:56,099 [main:66] - Compilation checking started
2021-03-17 12:09:56,099 [main:68] - Already checked
2021-03-17 12:09:56,099 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : String> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:56,100 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:56,100 [main:66] - Compilation checking started
2021-03-17 12:09:56,505 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: Pair<UShort, UShort>): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:56,505 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:56,505 [main:66] - Compilation checking started
2021-03-17 12:09:56,907 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: T): Byte {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:56,908 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:56,908 [main:66] - Compilation checking started
2021-03-17 12:09:56,908 [main:68] - Already checked
2021-03-17 12:09:56,908 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Boolean> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:56,908 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:56,908 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:56,909 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:56,909 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:56,909 [main:66] - Compilation checking started
2021-03-17 12:09:56,910 [main:68] - Already checked
2021-03-17 12:09:56,910 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:56,910 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:56,910 [main:66] - Compilation checking started
2021-03-17 12:09:57,327 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : List<Short>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:57,327 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:57,328 [main:66] - Compilation checking started
2021-03-17 12:09:57,722 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : UByte> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:57,722 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:57,722 [main:66] - Compilation checking started
2021-03-17 12:09:58,152 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: T): HashSet<Double> {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:58,152 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:58,152 [main:66] - Compilation checking started
2021-03-17 12:09:58,152 [main:68] - Already checked
2021-03-17 12:09:58,152 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: String): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:58,152 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:58,152 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:58,152 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:58,152 [main:66] - Compilation checking started
2021-03-17 12:09:58,152 [main:68] - Already checked
2021-03-17 12:09:58,152 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: String): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:58,153 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:58,153 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:09:58,153 [main:66] - Compilation checking started
2021-03-17 12:09:58,558 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: Short): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:58,564 [main:66] - Compilation checking started
2021-03-17 12:09:58,565 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:58,566 [main:66] - Compilation checking started
2021-03-17 12:09:58,567 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:58,656 [main:33] - Trying to replace BLOCK on Element(PARENTHESIZED)
2021-03-17 12:09:58,657 [main:66] - Compilation checking started
2021-03-17 12:09:58,657 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:09:58,658 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String ({
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
})
2021-03-17 12:09:58,658 [main:33] - Trying to replace Element(FOR) on Element(PARENTHESIZED)
2021-03-17 12:09:58,658 [main:66] - Compilation checking started
2021-03-17 12:09:59,103 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "OK", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    (for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    })

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:59,104 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(PARENTHESIZED)
2021-03-17 12:09:59,104 [main:66] - Compilation checking started
2021-03-17 12:09:59,649 [main:53] - Result = true
Text:
val xs = listOf("a", "b", ("OK"), "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:09:59,650 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(PARENTHESIZED)
2021-03-17 12:09:59,650 [main:66] - Compilation checking started
2021-03-17 12:10:00,174 [main:53] - Result = true
Text:
val xs = listOf("a", "b", ("OK"), ("d"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:10:00,174 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PARENTHESIZED)
2021-03-17 12:10:00,175 [main:66] - Compilation checking started
2021-03-17 12:10:00,715 [main:53] - Result = true
Text:
val xs = listOf("a", "b", ("OK"), ("d"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == "0:a;1:b;2:c;3:d;") "c" else "fail: '$ss'"
}
2021-03-17 12:10:00,716 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(PARENTHESIZED)
2021-03-17 12:10:00,716 [main:66] - Compilation checking started
2021-03-17 12:10:01,227 [main:53] - Result = true
Text:
val xs = listOf("a", "b", ("OK"), ("d"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:01,405 [main:26] - Trying to change some nodes to nodes from other programs 513 times
2021-03-17 12:10:01,405 [main:28] - Try №0 of 513
2021-03-17 12:10:01,462 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:01,462 [main:28] - Try №1 of 513
2021-03-17 12:10:01,483 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-17 12:10:01,483 [main:28] - Try №2 of 513
2021-03-17 12:10:01,508 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:01,508 [main:66] - Compilation checking started
2021-03-17 12:10:01,984 [main:49] - Result = false
Text:
val xs = listOf("a", "b", ("OK"), ("d"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = setIntRes(x)
    return if ((ss) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:01,984 [main:28] - Try №3 of 513
2021-03-17 12:10:02,006 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-17 12:10:02,006 [main:66] - Compilation checking started
2021-03-17 12:10:02,590 [main:49] - Result = false
Text:
val xs = listOf("a", "b", ("OK"), ("d"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == (y is K)) "c" else "fail: '$ss'"
}
2021-03-17 12:10:02,591 [main:28] - Try №4 of 513
2021-03-17 12:10:02,611 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:10:02,612 [main:66] - Compilation checking started
2021-03-17 12:10:03,180 [main:53] - Result = true
Text:
val xs = listOf("a", "b", 1, ("d"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:03,180 [main:28] - Try №5 of 513
2021-03-17 12:10:03,211 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-17 12:10:03,211 [main:66] - Compilation checking started
2021-03-17 12:10:03,647 [main:49] - Result = false
Text:
val xs = listOf("a", "b", 1, ("d"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == (MinS + 2)) "c" else "fail: '$ss'"
}
2021-03-17 12:10:03,647 [main:28] - Try №6 of 513
2021-03-17 12:10:03,662 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:10:03,662 [main:66] - Compilation checking started
2021-03-17 12:10:04,199 [main:53] - Result = true
Text:
val xs = listOf("a", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:04,200 [main:28] - Try №7 of 513
2021-03-17 12:10:04,212 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-17 12:10:04,213 [main:28] - Try №8 of 513
2021-03-17 12:10:04,217 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:04,217 [main:66] - Compilation checking started
2021-03-17 12:10:04,655 [main:49] - Result = false
Text:
val xs = listOf("a", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((nextState) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:04,656 [main:28] - Try №9 of 513
2021-03-17 12:10:04,680 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:04,680 [main:28] - Try №10 of 513
2021-03-17 12:10:04,701 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:04,701 [main:28] - Try №11 of 513
2021-03-17 12:10:04,725 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:04,725 [main:66] - Compilation checking started
2021-03-17 12:10:05,145 [main:49] - Result = false
Text:
val xs = listOf("a", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$xqwe")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:05,146 [main:28] - Try №12 of 513
2021-03-17 12:10:05,165 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:05,166 [main:66] - Compilation checking started
2021-03-17 12:10:05,636 [main:49] - Result = false
Text:
val xs = listOf("a", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$indexOK$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:05,636 [main:28] - Try №13 of 513
2021-03-17 12:10:05,652 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:05,653 [main:66] - Compilation checking started
2021-03-17 12:10:06,159 [main:53] - Result = true
Text:
val xs = listOf("OK", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:06,159 [main:28] - Try №14 of 513
2021-03-17 12:10:06,175 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-17 12:10:06,175 [main:28] - Try №15 of 513
2021-03-17 12:10:06,190 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:06,190 [main:28] - Try №16 of 513
2021-03-17 12:10:06,194 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-17 12:10:06,194 [main:66] - Compilation checking started
2021-03-17 12:10:06,583 [main:49] - Result = false
Text:
val xs = listOf("OK", "b", 1, ("OK"))

fun box(): String {
    if (Z(42)::x.get() != 42) throw AssertionError()
    if (L(1234L)::x.get() != 1234L) throw AssertionError()
    if (S("abcdef")::x.get() != "abcdef") throw AssertionError()

    return "OK"
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:06,583 [main:28] - Try №17 of 513
2021-03-17 12:10:06,596 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:06,596 [main:66] - Compilation checking started
2021-03-17 12:10:07,018 [main:49] - Result = false
Text:
val xs = listOf("OK", "b", 1, ("OK"))

fun <T : internal<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:07,019 [main:28] - Try №18 of 513
2021-03-17 12:10:07,026 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:07,026 [main:66] - Compilation checking started
2021-03-17 12:10:07,442 [main:49] - Result = false
Text:
val xs = listOf("OK", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.a()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:07,442 [main:28] - Try №19 of 513
2021-03-17 12:10:07,447 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:07,447 [main:66] - Compilation checking started
2021-03-17 12:10:07,840 [main:49] - Result = false
Text:
val xs = listOf("OK", "b", 1, ("OK"))

fun <T : Iterable<*>> test(String: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:07,840 [main:28] - Try №20 of 513
2021-03-17 12:10:07,845 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:07,846 [main:66] - Compilation checking started
2021-03-17 12:10:08,253 [main:49] - Result = false
Text:
val xs = listOf("OK", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((MAX_VALUE) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:08,254 [main:28] - Try №21 of 513
2021-03-17 12:10:08,268 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:08,268 [main:28] - Try №22 of 513
2021-03-17 12:10:08,287 [main:33] - Trying to replace Element(BODY) on Element(BODY)
2021-03-17 12:10:08,287 [main:66] - Compilation checking started
2021-03-17 12:10:08,696 [main:49] - Result = false
Text:
val xs = listOf("OK", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
            test = test * 10 + (i + 1)
        }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:08,696 [main:28] - Try №23 of 513
2021-03-17 12:10:08,700 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:08,701 [main:66] - Compilation checking started
2021-03-17 12:10:09,105 [main:49] - Result = false
Text:
val xs = listOf("OK", "b", 1, ("OK"))

fun <box : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:09,105 [main:28] - Try №24 of 513
2021-03-17 12:10:09,114 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-17 12:10:09,114 [main:28] - Try №25 of 513
2021-03-17 12:10:09,123 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-17 12:10:09,123 [main:28] - Try №26 of 513
2021-03-17 12:10:09,127 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:09,127 [main:66] - Compilation checking started
2021-03-17 12:10:09,540 [main:49] - Result = false
Text:
val xs = listOf("OK", "b", 1, ("OK"))

fun <T : Iterable<*>> ss(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:09,540 [main:28] - Try №27 of 513
2021-03-17 12:10:09,546 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:09,546 [main:66] - Compilation checking started
2021-03-17 12:10:09,931 [main:49] - Result = false
Text:
val xs = listOf("OK", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.x()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:09,931 [main:28] - Try №28 of 513
2021-03-17 12:10:09,947 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-17 12:10:09,947 [main:66] - Compilation checking started
2021-03-17 12:10:10,364 [main:49] - Result = false
Text:
val xs = listOf("OK", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return when(subject.containee) {
            is Foo -> bind(subject.containee)
            is Bar -> bind(subject.containee)
            else -> TODO()
        }
}
2021-03-17 12:10:10,365 [main:28] - Try №29 of 513
2021-03-17 12:10:10,383 [main:33] - Trying to replace Element(DESTRUCTURING_DECLARATION_ENTRY) on Element(DESTRUCTURING_DECLARATION_ENTRY)
2021-03-17 12:10:10,383 [main:28] - Try №30 of 513
2021-03-17 12:10:10,393 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-17 12:10:10,393 [main:66] - Compilation checking started
2021-03-17 12:10:10,798 [main:49] - Result = false
Text:
val xs = listOf("OK", "b", 1, ("OK"))

fun <T : Iterable<*>> test(result: String): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:10,798 [main:28] - Try №31 of 513
2021-03-17 12:10:10,810 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:10,810 [main:66] - Compilation checking started
2021-03-17 12:10:11,216 [main:49] - Result = false
Text:
val xs = listOf("OK", "b", 1, ("OK"))

fun <T : startsWith<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:11,217 [main:28] - Try №32 of 513
2021-03-17 12:10:11,229 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:10:11,230 [main:66] - Compilation checking started
2021-03-17 12:10:11,767 [main:53] - Result = true
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:11,767 [main:28] - Try №33 of 513
2021-03-17 12:10:11,776 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-17 12:10:11,777 [main:28] - Try №34 of 513
2021-03-17 12:10:11,782 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:10:11,782 [main:28] - Try №35 of 513
2021-03-17 12:10:11,786 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:11,787 [main:66] - Compilation checking started
2021-03-17 12:10:12,175 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(String: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:12,176 [main:28] - Try №36 of 513
2021-03-17 12:10:12,180 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:12,180 [main:66] - Compilation checking started
2021-03-17 12:10:12,597 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((provideDelegate) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:12,597 [main:28] - Try №37 of 513
2021-03-17 12:10:12,611 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:12,612 [main:28] - Try №38 of 513
2021-03-17 12:10:12,623 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:12,623 [main:66] - Compilation checking started
2021-03-17 12:10:13,021 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ContinuationAdapter) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:13,021 [main:28] - Try №39 of 513
2021-03-17 12:10:13,029 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:13,030 [main:66] - Compilation checking started
2021-03-17 12:10:13,031 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:10:13,031 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.invoke(Continuation<? super Unit> continuation) {
            return CoroutineUtilKt.getStateMachineChecker().suspendHere(continuation);
        }
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:13,031 [main:28] - Try №40 of 513
2021-03-17 12:10:13,042 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:13,042 [main:66] - Compilation checking started
2021-03-17 12:10:13,451 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = assertEquals()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:13,451 [main:28] - Try №41 of 513
2021-03-17 12:10:13,456 [main:33] - Trying to replace Element(IMPORT_LIST) on Element(IMPORT_LIST)
2021-03-17 12:10:13,456 [main:66] - Compilation checking started
2021-03-17 12:10:13,456 [main:68] - Already checked
2021-03-17 12:10:13,456 [main:28] - Try №42 of 513
2021-03-17 12:10:13,461 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:13,461 [main:66] - Compilation checking started
2021-03-17 12:10:13,880 [main:49] - Result = false
Text:
val T = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if ((ss) == ("0:a;1:b;2:c;3:d;")) "c" else "fail: '$ss'"
}
2021-03-17 12:10:13,880 [main:28] - Try №43 of 513
2021-03-17 12:10:13,893 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-17 12:10:13,893 [main:66] - Compilation checking started
2021-03-17 12:10:14,395 [main:53] - Result = true
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:14,396 [main:28] - Try №44 of 513
2021-03-17 12:10:14,416 [main:33] - Trying to replace Element(LOOP_RANGE) on Element(LOOP_RANGE)
2021-03-17 12:10:14,416 [main:66] - Compilation checking started
2021-03-17 12:10:14,870 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in listOf("O", "$", "K")) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:14,871 [main:28] - Try №45 of 513
2021-03-17 12:10:14,887 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:10:14,887 [main:28] - Try №46 of 513
2021-03-17 12:10:14,903 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-17 12:10:14,903 [main:66] - Compilation checking started
2021-03-17 12:10:15,280 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(val x: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:15,280 [main:28] - Try №47 of 513
2021-03-17 12:10:15,296 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:15,296 [main:28] - Try №48 of 513
2021-03-17 12:10:15,305 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:10:15,305 [main:66] - Compilation checking started
2021-03-17 12:10:15,713 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        kotlin.coroutines
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:15,713 [main:28] - Try №49 of 513
2021-03-17 12:10:15,728 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-17 12:10:15,728 [main:28] - Try №50 of 513
2021-03-17 12:10:15,732 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:15,733 [main:66] - Compilation checking started
2021-03-17 12:10:16,135 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> t(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:16,135 [main:28] - Try №51 of 513
2021-03-17 12:10:16,150 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:16,150 [main:28] - Try №52 of 513
2021-03-17 12:10:16,164 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:16,165 [main:28] - Try №53 of 513
2021-03-17 12:10:16,169 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:10:16,169 [main:28] - Try №54 of 513
2021-03-17 12:10:16,184 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:16,185 [main:28] - Try №55 of 513
2021-03-17 12:10:16,200 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:16,200 [main:28] - Try №56 of 513
2021-03-17 12:10:16,216 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:16,216 [main:28] - Try №57 of 513
2021-03-17 12:10:16,233 [main:33] - Trying to replace Element(SHORT_STRING_TEMPLATE_ENTRY) on Element(SHORT_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:16,233 [main:28] - Try №58 of 513
2021-03-17 12:10:16,248 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:10:16,248 [main:28] - Try №59 of 513
2021-03-17 12:10:16,261 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:10:16,262 [main:28] - Try №60 of 513
2021-03-17 12:10:16,266 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:16,266 [main:28] - Try №61 of 513
2021-03-17 12:10:16,282 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-17 12:10:16,282 [main:28] - Try №62 of 513
2021-03-17 12:10:16,289 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:16,289 [main:66] - Compilation checking started
2021-03-17 12:10:16,701 [main:49] - Result = false
Text:
val xs = firstOrNull()

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:16,701 [main:28] - Try №63 of 513
2021-03-17 12:10:16,711 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:16,711 [main:66] - Compilation checking started
2021-03-17 12:10:17,115 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return result.toString()
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:17,115 [main:28] - Try №64 of 513
2021-03-17 12:10:17,123 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:17,124 [main:66] - Compilation checking started
2021-03-17 12:10:17,580 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.mapOf(
            parameters.first() to A(),
            *((1..41) + (43..70)).map { i -> parameters[i] to i }.toTypedArray()
    )
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:17,580 [main:28] - Try №65 of 513
2021-03-17 12:10:17,593 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:10:17,593 [main:66] - Compilation checking started
2021-03-17 12:10:18,003 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): KParameter {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:18,003 [main:28] - Try №66 of 513
2021-03-17 12:10:18,017 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:18,017 [main:28] - Try №67 of 513
2021-03-17 12:10:18,032 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:10:18,033 [main:28] - Try №68 of 513
2021-03-17 12:10:18,040 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:10:18,040 [main:66] - Compilation checking started
2021-03-17 12:10:18,460 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: String): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:18,460 [main:28] - Try №69 of 513
2021-03-17 12:10:18,476 [main:33] - Trying to replace Element(CONDITION) on Element(CONDITION)
2021-03-17 12:10:18,476 [main:28] - Try №70 of 513
2021-03-17 12:10:18,482 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:18,482 [main:66] - Compilation checking started
2021-03-17 12:10:18,884 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> E(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:18,884 [main:28] - Try №71 of 513
2021-03-17 12:10:18,899 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-17 12:10:18,900 [main:28] - Try №72 of 513
2021-03-17 12:10:18,906 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-17 12:10:18,906 [main:28] - Try №73 of 513
2021-03-17 12:10:18,925 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-17 12:10:18,925 [main:66] - Compilation checking started
2021-03-17 12:10:19,320 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = a + "1" + "2" + 3 + 4L + b + 5.0 + 6F + '7'

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:19,320 [main:28] - Try №74 of 513
2021-03-17 12:10:19,324 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:19,324 [main:66] - Compilation checking started
2021-03-17 12:10:19,723 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, String) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:19,724 [main:28] - Try №75 of 513
2021-03-17 12:10:19,734 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:19,734 [main:28] - Try №76 of 513
2021-03-17 12:10:19,753 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:10:19,754 [main:66] - Compilation checking started
2021-03-17 12:10:20,162 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$xOK")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:20,162 [main:28] - Try №77 of 513
2021-03-17 12:10:20,176 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:20,177 [main:28] - Try №78 of 513
2021-03-17 12:10:20,184 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:20,184 [main:66] - Compilation checking started
2021-03-17 12:10:20,570 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.test("K")) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:20,570 [main:28] - Try №79 of 513
2021-03-17 12:10:20,584 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-17 12:10:20,585 [main:28] - Try №80 of 513
2021-03-17 12:10:20,597 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:10:20,597 [main:66] - Compilation checking started
2021-03-17 12:10:21,101 [main:53] - Result = true
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("foo")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:21,101 [main:28] - Try №81 of 513
2021-03-17 12:10:21,116 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:21,117 [main:28] - Try №82 of 513
2021-03-17 12:10:21,132 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:10:21,132 [main:28] - Try №83 of 513
2021-03-17 12:10:21,136 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:21,136 [main:66] - Compilation checking started
2021-03-17 12:10:21,638 [main:53] - Result = true
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, test) in iterable.withIndex()) {
        s.append("foo")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:21,638 [main:28] - Try №84 of 513
2021-03-17 12:10:21,651 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-17 12:10:21,651 [main:66] - Compilation checking started
2021-03-17 12:10:22,148 [main:53] - Result = true
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, test) in iterable.withIndex()) {
        s.append("foo")
    }

    return "OK"
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:22,149 [main:28] - Try №85 of 513
2021-03-17 12:10:22,159 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:10:22,160 [main:28] - Try №86 of 513
2021-03-17 12:10:22,170 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:10:22,170 [main:66] - Compilation checking started
2021-03-17 12:10:22,569 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: String): String {
    val s = StringBuilder()

    for ((index, test) in iterable.withIndex()) {
        s.append("foo")
    }

    return "OK"
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:22,569 [main:28] - Try №87 of 513
2021-03-17 12:10:22,576 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:22,576 [main:28] - Try №88 of 513
2021-03-17 12:10:22,593 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:22,594 [main:28] - Try №89 of 513
2021-03-17 12:10:22,604 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:22,605 [main:66] - Compilation checking started
2021-03-17 12:10:22,990 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, test) in iterable.String()) {
        s.append("foo")
    }

    return "OK"
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:22,991 [main:28] - Try №90 of 513
2021-03-17 12:10:23,017 [main:33] - Trying to replace Element(BODY) on Element(BODY)
2021-03-17 12:10:23,017 [main:66] - Compilation checking started
2021-03-17 12:10:23,497 [main:53] - Result = true
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, test) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:23,497 [main:28] - Try №91 of 513
2021-03-17 12:10:23,507 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:23,507 [main:28] - Try №92 of 513
2021-03-17 12:10:23,521 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-17 12:10:23,521 [main:28] - Try №93 of 513
2021-03-17 12:10:23,525 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:23,526 [main:66] - Compilation checking started
2021-03-17 12:10:23,917 [main:49] - Result = false
Text:
val List = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, test) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:23,917 [main:28] - Try №94 of 513
2021-03-17 12:10:23,922 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:23,922 [main:66] - Compilation checking started
2021-03-17 12:10:24,302 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): size {
    val s = StringBuilder()

    for ((index, test) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:24,302 [main:28] - Try №95 of 513
2021-03-17 12:10:24,317 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:24,317 [main:28] - Try №96 of 513
2021-03-17 12:10:24,327 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:10:24,328 [main:28] - Try №97 of 513
2021-03-17 12:10:24,345 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:24,345 [main:28] - Try №98 of 513
2021-03-17 12:10:24,355 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-17 12:10:24,356 [main:28] - Try №99 of 513
2021-03-17 12:10:24,360 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:24,361 [main:66] - Compilation checking started
2021-03-17 12:10:24,774 [main:49] - Result = false
Text:
val size = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, test) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:24,774 [main:28] - Try №100 of 513
2021-03-17 12:10:24,779 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:24,779 [main:66] - Compilation checking started
2021-03-17 12:10:25,156 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <Collection : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, test) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:25,156 [main:28] - Try №101 of 513
2021-03-17 12:10:25,168 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-17 12:10:25,168 [main:66] - Compilation checking started
2021-03-17 12:10:25,731 [main:53] - Result = true
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, test) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:25,731 [main:28] - Try №102 of 513
2021-03-17 12:10:25,744 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:10:25,744 [main:28] - Try №103 of 513
2021-03-17 12:10:25,765 [main:33] - Trying to replace Element(FOR) on Element(FOR)
2021-03-17 12:10:25,765 [main:66] - Compilation checking started
2021-03-17 12:10:26,168 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for (i in 0..(size - 1) step 2) {
        res[get(i)] = get(i + 1)
    }

    return "OK"
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:26,168 [main:28] - Try №104 of 513
2021-03-17 12:10:26,184 [main:33] - Trying to replace Element(SHORT_STRING_TEMPLATE_ENTRY) on Element(SHORT_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:26,184 [main:28] - Try №105 of 513
2021-03-17 12:10:26,198 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:26,199 [main:28] - Try №106 of 513
2021-03-17 12:10:26,205 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:26,205 [main:28] - Try №107 of 513
2021-03-17 12:10:26,220 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:10:26,220 [main:28] - Try №108 of 513
2021-03-17 12:10:26,225 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:26,225 [main:66] - Compilation checking started
2021-03-17 12:10:26,611 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, test) in iterable.test()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:26,612 [main:28] - Try №109 of 513
2021-03-17 12:10:26,625 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:10:26,625 [main:28] - Try №110 of 513
2021-03-17 12:10:26,640 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:26,640 [main:28] - Try №111 of 513
2021-03-17 12:10:26,650 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:26,651 [main:66] - Compilation checking started
2021-03-17 12:10:27,044 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): id {
    val charProgression = 'g' downTo 'a'

    for ((index, test) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:27,044 [main:28] - Try №112 of 513
2021-03-17 12:10:27,056 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:10:27,057 [main:28] - Try №113 of 513
2021-03-17 12:10:27,061 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:27,061 [main:28] - Try №114 of 513
2021-03-17 12:10:27,076 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:27,076 [main:28] - Try №115 of 513
2021-03-17 12:10:27,092 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:10:27,092 [main:28] - Try №116 of 513
2021-03-17 12:10:27,108 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:27,108 [main:28] - Try №117 of 513
2021-03-17 12:10:27,128 [main:33] - Trying to replace Element(DESTRUCTURING_DECLARATION_ENTRY) on Element(DESTRUCTURING_DECLARATION_ENTRY)
2021-03-17 12:10:27,128 [main:28] - Try №118 of 513
2021-03-17 12:10:27,132 [main:33] - Trying to replace Element(TYPE_PARAMETER_LIST) on Element(TYPE_PARAMETER_LIST)
2021-03-17 12:10:27,132 [main:66] - Compilation checking started
2021-03-17 12:10:27,504 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <X, Y> test(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, test) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:27,504 [main:28] - Try №119 of 513
2021-03-17 12:10:27,518 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:10:27,518 [main:66] - Compilation checking started
2021-03-17 12:10:27,912 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, p01)

fun <T : Iterable<*>> test(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, test) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:27,913 [main:28] - Try №120 of 513
2021-03-17 12:10:27,919 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-17 12:10:27,920 [main:28] - Try №121 of 513
2021-03-17 12:10:27,935 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:10:27,935 [main:28] - Try №122 of 513
2021-03-17 12:10:27,943 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:27,943 [main:66] - Compilation checking started
2021-03-17 12:10:28,363 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, test) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val ss = toString()
    return "OK"
}
2021-03-17 12:10:28,363 [main:28] - Try №123 of 513
2021-03-17 12:10:28,381 [main:33] - Trying to replace Element(DESTRUCTURING_DECLARATION) on Element(DESTRUCTURING_DECLARATION)
2021-03-17 12:10:28,382 [main:66] - Compilation checking started
2021-03-17 12:10:28,872 [main:53] - Result = true
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:28,873 [main:28] - Try №124 of 513
2021-03-17 12:10:28,879 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-17 12:10:28,879 [main:66] - Compilation checking started
2021-03-17 12:10:29,254 [main:49] - Result = false
Text:
val xs = listOf("lol", "b", 1, ("OK"))

fun <T : Iterable<*>> test(): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:29,254 [main:28] - Try №125 of 513
2021-03-17 12:10:29,267 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:10:29,267 [main:66] - Compilation checking started
2021-03-17 12:10:29,743 [main:53] - Result = true
Text:
val xs = listOf("lol", "Foo", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val ss = test(xs)
    return "OK"
}
2021-03-17 12:10:29,743 [main:28] - Try №126 of 513
2021-03-17 12:10:29,758 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:10:29,759 [main:28] - Try №127 of 513
2021-03-17 12:10:29,763 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:29,763 [main:28] - Try №128 of 513
2021-03-17 12:10:29,776 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:29,776 [main:66] - Compilation checking started
2021-03-17 12:10:30,176 [main:49] - Result = false
Text:
val xs = listOf("lol", "Foo", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val ss = A(xs)
    return "OK"
}
2021-03-17 12:10:30,176 [main:28] - Try №129 of 513
2021-03-17 12:10:30,189 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:10:30,190 [main:28] - Try №130 of 513
2021-03-17 12:10:30,205 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:10:30,205 [main:28] - Try №131 of 513
2021-03-17 12:10:30,210 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:30,210 [main:66] - Compilation checking started
2021-03-17 12:10:30,678 [main:53] - Result = true
Text:
val xs = listOf("lol", "Foo", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val c = test(xs)
    return "OK"
}
2021-03-17 12:10:30,678 [main:28] - Try №132 of 513
2021-03-17 12:10:30,685 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:30,685 [main:66] - Compilation checking started
2021-03-17 12:10:31,097 [main:49] - Result = false
Text:
val xs = listOf("lol", "Foo", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.Host()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val c = test(xs)
    return "OK"
}
2021-03-17 12:10:31,097 [main:28] - Try №133 of 513
2021-03-17 12:10:31,112 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:31,113 [main:28] - Try №134 of 513
2021-03-17 12:10:31,131 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-17 12:10:31,132 [main:28] - Try №135 of 513
2021-03-17 12:10:31,142 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:31,142 [main:28] - Try №136 of 513
2021-03-17 12:10:31,150 [main:33] - Trying to replace Element(TYPE_PARAMETER) on Element(TYPE_PARAMETER)
2021-03-17 12:10:31,150 [main:66] - Compilation checking started
2021-03-17 12:10:31,550 [main:49] - Result = false
Text:
val xs = listOf("lol", "Foo", 1, ("OK"))

fun <reified T : Any> test(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val c = test(xs)
    return "OK"
}
2021-03-17 12:10:31,551 [main:28] - Try №137 of 513
2021-03-17 12:10:31,560 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:31,560 [main:28] - Try №138 of 513
2021-03-17 12:10:31,573 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-17 12:10:31,573 [main:28] - Try №139 of 513
2021-03-17 12:10:31,589 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:31,589 [main:28] - Try №140 of 513
2021-03-17 12:10:31,602 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:10:31,602 [main:28] - Try №141 of 513
2021-03-17 12:10:31,616 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:31,616 [main:28] - Try №142 of 513
2021-03-17 12:10:31,633 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:31,633 [main:28] - Try №143 of 513
2021-03-17 12:10:31,641 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:31,641 [main:28] - Try №144 of 513
2021-03-17 12:10:31,650 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:10:31,651 [main:28] - Try №145 of 513
2021-03-17 12:10:31,658 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-17 12:10:31,658 [main:28] - Try №146 of 513
2021-03-17 12:10:31,687 [main:33] - Trying to replace Element(BODY) on Element(BODY)
2021-03-17 12:10:31,687 [main:28] - Try №147 of 513
2021-03-17 12:10:31,700 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:31,700 [main:66] - Compilation checking started
2021-03-17 12:10:32,103 [main:49] - Result = false
Text:
val xs = listOf("lol", "Foo", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: Int): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val c = test(xs)
    return "OK"
}
2021-03-17 12:10:32,103 [main:28] - Try №148 of 513
2021-03-17 12:10:32,107 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:32,108 [main:66] - Compilation checking started
2021-03-17 12:10:32,495 [main:49] - Result = false
Text:
val xs = listOf("lol", "Foo", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): block {
    val c = test(xs)
    return "OK"
}
2021-03-17 12:10:32,496 [main:28] - Try №149 of 513
2021-03-17 12:10:32,500 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:32,500 [main:28] - Try №150 of 513
2021-03-17 12:10:32,507 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:10:32,507 [main:66] - Compilation checking started
2021-03-17 12:10:32,893 [main:49] - Result = false
Text:
val xs = listOf("lol", "Foo", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): Controller {
    val c = test(xs)
    return "OK"
}
2021-03-17 12:10:32,894 [main:28] - Try №151 of 513
2021-03-17 12:10:32,909 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:10:32,910 [main:28] - Try №152 of 513
2021-03-17 12:10:32,924 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:32,924 [main:28] - Try №153 of 513
2021-03-17 12:10:32,947 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-17 12:10:32,947 [main:28] - Try №154 of 513
2021-03-17 12:10:32,961 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:10:32,961 [main:28] - Try №155 of 513
2021-03-17 12:10:32,965 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:32,966 [main:28] - Try №156 of 513
2021-03-17 12:10:32,975 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-17 12:10:32,975 [main:28] - Try №157 of 513
2021-03-17 12:10:32,991 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:10:32,991 [main:28] - Try №158 of 513
2021-03-17 12:10:33,003 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:10:33,003 [main:28] - Try №159 of 513
2021-03-17 12:10:33,018 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:33,018 [main:28] - Try №160 of 513
2021-03-17 12:10:33,027 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:10:33,027 [main:28] - Try №161 of 513
2021-03-17 12:10:33,042 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:10:33,042 [main:28] - Try №162 of 513
2021-03-17 12:10:33,047 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:33,047 [main:28] - Try №163 of 513
2021-03-17 12:10:33,064 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-17 12:10:33,065 [main:28] - Try №164 of 513
2021-03-17 12:10:33,079 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-17 12:10:33,079 [main:28] - Try №165 of 513
2021-03-17 12:10:33,098 [main:33] - Trying to replace Element(DESTRUCTURING_DECLARATION) on Element(DESTRUCTURING_DECLARATION)
2021-03-17 12:10:33,098 [main:28] - Try №166 of 513
2021-03-17 12:10:33,111 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-17 12:10:33,111 [main:28] - Try №167 of 513
2021-03-17 12:10:33,125 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:33,126 [main:28] - Try №168 of 513
2021-03-17 12:10:33,130 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:33,130 [main:28] - Try №169 of 513
2021-03-17 12:10:33,134 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:33,134 [main:28] - Try №170 of 513
2021-03-17 12:10:33,142 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:33,142 [main:66] - Compilation checking started
2021-03-17 12:10:33,524 [main:49] - Result = false
Text:
val xs = doStuffEq()

fun <T : Iterable<*>> test(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val c = test(xs)
    return "OK"
}
2021-03-17 12:10:33,525 [main:28] - Try №171 of 513
2021-03-17 12:10:33,529 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:33,529 [main:66] - Compilation checking started
2021-03-17 12:10:33,932 [main:49] - Result = false
Text:
val xs = listOf("lol", "Foo", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val c = test(AbstractList)
    return "OK"
}
2021-03-17 12:10:33,932 [main:28] - Try №172 of 513
2021-03-17 12:10:33,936 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:33,936 [main:28] - Try №173 of 513
2021-03-17 12:10:33,950 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:33,951 [main:28] - Try №174 of 513
2021-03-17 12:10:33,967 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:10:33,967 [main:28] - Try №175 of 513
2021-03-17 12:10:33,987 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-17 12:10:33,987 [main:28] - Try №176 of 513
2021-03-17 12:10:33,999 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:10:33,999 [main:28] - Try №177 of 513
2021-03-17 12:10:34,006 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:10:34,006 [main:66] - Compilation checking started
2021-03-17 12:10:34,390 [main:49] - Result = false
Text:
val xs = listOf("lol", "Foo", 1, ("OK"))

fun <T : Iterable<*>> test(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): IK {
    val c = test(xs)
    return "OK"
}
2021-03-17 12:10:34,391 [main:28] - Try №178 of 513
2021-03-17 12:10:34,395 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:34,395 [main:28] - Try №179 of 513
2021-03-17 12:10:34,407 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-17 12:10:34,407 [main:28] - Try №180 of 513
2021-03-17 12:10:34,422 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-17 12:10:34,423 [main:28] - Try №181 of 513
2021-03-17 12:10:34,437 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:34,437 [main:28] - Try №182 of 513
2021-03-17 12:10:34,447 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-17 12:10:34,447 [main:28] - Try №183 of 513
2021-03-17 12:10:34,462 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:34,462 [main:28] - Try №184 of 513
2021-03-17 12:10:34,464 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-17 12:10:34,464 [main:66] - Compilation checking started
2021-03-17 12:10:34,464 [main:68] - Already checked
2021-03-17 12:10:34,464 [main:28] - Try №185 of 513
2021-03-17 12:10:34,476 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:10:34,477 [main:66] - Compilation checking started
2021-03-17 12:10:34,941 [main:53] - Result = true
Text:
val xs = listOf("lol", "Foo", 1, "K")

fun <T : Iterable<*>> test(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val c = test(xs)
    return "OK"
}
2021-03-17 12:10:34,941 [main:28] - Try №186 of 513
2021-03-17 12:10:34,952 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:10:34,952 [main:66] - Compilation checking started
2021-03-17 12:10:35,342 [main:49] - Result = false
Text:
val xs = listOf("lol", "Foo", 1, "K")

fun <T : Iterable<*>> test(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val c = test(xs)
    return "OK"
}
2021-03-17 12:10:35,342 [main:28] - Try №187 of 513
2021-03-17 12:10:35,361 [main:33] - Trying to replace Element(BODY) on Element(BODY)
2021-03-17 12:10:35,361 [main:28] - Try №188 of 513
2021-03-17 12:10:35,365 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:35,365 [main:28] - Try №189 of 513
2021-03-17 12:10:35,373 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:35,373 [main:66] - Compilation checking started
2021-03-17 12:10:35,853 [main:53] - Result = true
Text:
val xs = listOf("lol", "Foo", 1, "K")

fun <T : Iterable<*>> test(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val c = AssertionError()
    return "OK"
}
2021-03-17 12:10:35,853 [main:28] - Try №190 of 513
2021-03-17 12:10:35,865 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:10:35,865 [main:28] - Try №191 of 513
2021-03-17 12:10:35,875 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:35,875 [main:28] - Try №192 of 513
2021-03-17 12:10:35,889 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:35,890 [main:28] - Try №193 of 513
2021-03-17 12:10:35,898 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:10:35,898 [main:28] - Try №194 of 513
2021-03-17 12:10:35,904 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:10:35,904 [main:28] - Try №195 of 513
2021-03-17 12:10:35,912 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:10:35,913 [main:28] - Try №196 of 513
2021-03-17 12:10:35,928 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:10:35,928 [main:28] - Try №197 of 513
2021-03-17 12:10:35,932 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:35,932 [main:66] - Compilation checking started
2021-03-17 12:10:36,423 [main:53] - Result = true
Text:
val xs = listOf("lol", "Foo", 1, "K")

fun <T : Iterable<*>> Base(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val c = AssertionError()
    return "OK"
}
2021-03-17 12:10:36,423 [main:28] - Try №198 of 513
2021-03-17 12:10:36,439 [main:33] - Trying to replace Element(CONDITION) on Element(CONDITION)
2021-03-17 12:10:36,439 [main:28] - Try №199 of 513
2021-03-17 12:10:36,447 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:10:36,447 [main:66] - Compilation checking started
2021-03-17 12:10:36,871 [main:49] - Result = false
Text:
val xs = listOf("lol", "Foo", 1, "K")

fun <T : Iterable<*>> Base(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in Int.MIN_VALUE) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val c = AssertionError()
    return "OK"
}
2021-03-17 12:10:36,871 [main:28] - Try №200 of 513
2021-03-17 12:10:36,875 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:36,876 [main:66] - Compilation checking started
2021-03-17 12:10:37,247 [main:49] - Result = false
Text:
val xs = listOf("lol", "Foo", 1, "K")

fun <T : Iterable<*>> Base(it: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val c = AssertionError()
    return "OK"
}
2021-03-17 12:10:37,247 [main:28] - Try №201 of 513
2021-03-17 12:10:37,251 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:37,252 [main:28] - Try №202 of 513
2021-03-17 12:10:37,255 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:37,256 [main:66] - Compilation checking started
2021-03-17 12:10:37,646 [main:49] - Result = false
Text:
val xs = listOf("lol", "Foo", 1, "K")

fun <T : Iterable<*>> Base(iterable: box): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val c = AssertionError()
    return "OK"
}
2021-03-17 12:10:37,646 [main:28] - Try №203 of 513
2021-03-17 12:10:37,651 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:37,651 [main:28] - Try №204 of 513
2021-03-17 12:10:37,662 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:37,662 [main:28] - Try №205 of 513
2021-03-17 12:10:37,666 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:37,667 [main:28] - Try №206 of 513
2021-03-17 12:10:37,671 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:37,671 [main:28] - Try №207 of 513
2021-03-17 12:10:37,675 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:37,676 [main:66] - Compilation checking started
2021-03-17 12:10:38,086 [main:49] - Result = false
Text:
val xs = listOf("lol", "Foo", 1, "K")

fun <T : Iterable<*>> Base(iterable: HtmlTag): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val c = AssertionError()
    return "OK"
}
2021-03-17 12:10:38,086 [main:28] - Try №208 of 513
2021-03-17 12:10:38,102 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:38,103 [main:28] - Try №209 of 513
2021-03-17 12:10:38,113 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-17 12:10:38,113 [main:28] - Try №210 of 513
2021-03-17 12:10:38,120 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:38,120 [main:28] - Try №211 of 513
2021-03-17 12:10:38,125 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:38,125 [main:66] - Compilation checking started
2021-03-17 12:10:38,524 [main:49] - Result = false
Text:
val xs = listOf("lol", "Foo", 1, "K")

fun <T : Iterable<*>> Base(iterable: T): testZ {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val c = AssertionError()
    return "OK"
}
2021-03-17 12:10:38,524 [main:28] - Try №212 of 513
2021-03-17 12:10:38,539 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:10:38,539 [main:28] - Try №213 of 513
2021-03-17 12:10:38,547 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:38,547 [main:28] - Try №214 of 513
2021-03-17 12:10:38,560 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:38,561 [main:28] - Try №215 of 513
2021-03-17 12:10:38,573 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:10:38,574 [main:28] - Try №216 of 513
2021-03-17 12:10:38,587 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-17 12:10:38,587 [main:66] - Compilation checking started
2021-03-17 12:10:39,056 [main:53] - Result = true
Text:
val xs = listOf("lol", "Foo", 1, "K")

fun <T : Iterable<*>> Base(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:39,056 [main:28] - Try №217 of 513
2021-03-17 12:10:39,083 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-17 12:10:39,084 [main:28] - Try №218 of 513
2021-03-17 12:10:39,111 [main:33] - Trying to replace Element(DESTRUCTURING_DECLARATION_ENTRY) on Element(DESTRUCTURING_DECLARATION_ENTRY)
2021-03-17 12:10:39,111 [main:28] - Try №219 of 513
2021-03-17 12:10:39,118 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:10:39,119 [main:66] - Compilation checking started
2021-03-17 12:10:39,640 [main:53] - Result = true
Text:
val xs = listOf("lol", "Foo", 1, "K")

fun <T : String> Base(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:39,640 [main:28] - Try №220 of 513
2021-03-17 12:10:39,644 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:39,644 [main:28] - Try №221 of 513
2021-03-17 12:10:39,660 [main:33] - Trying to replace Element(SHORT_STRING_TEMPLATE_ENTRY) on Element(SHORT_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:39,661 [main:28] - Try №222 of 513
2021-03-17 12:10:39,675 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:39,675 [main:28] - Try №223 of 513
2021-03-17 12:10:39,685 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:39,685 [main:28] - Try №224 of 513
2021-03-17 12:10:39,692 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:39,692 [main:28] - Try №225 of 513
2021-03-17 12:10:39,702 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:39,703 [main:66] - Compilation checking started
2021-03-17 12:10:40,094 [main:49] - Result = false
Text:
val xs = listOf("lol", "Foo", 1, "K")

fun <T : String> Base(iterable: T): foo {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:40,094 [main:28] - Try №226 of 513
2021-03-17 12:10:40,104 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:40,104 [main:28] - Try №227 of 513
2021-03-17 12:10:40,108 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:40,109 [main:28] - Try №228 of 513
2021-03-17 12:10:40,121 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:10:40,121 [main:28] - Try №229 of 513
2021-03-17 12:10:40,129 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:40,129 [main:28] - Try №230 of 513
2021-03-17 12:10:40,137 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:40,137 [main:28] - Try №231 of 513
2021-03-17 12:10:40,147 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-17 12:10:40,147 [main:28] - Try №232 of 513
2021-03-17 12:10:40,159 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-17 12:10:40,160 [main:28] - Try №233 of 513
2021-03-17 12:10:40,177 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:10:40,177 [main:28] - Try №234 of 513
2021-03-17 12:10:40,190 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-17 12:10:40,190 [main:28] - Try №235 of 513
2021-03-17 12:10:40,196 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:10:40,197 [main:28] - Try №236 of 513
2021-03-17 12:10:40,213 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-17 12:10:40,214 [main:28] - Try №237 of 513
2021-03-17 12:10:40,224 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:40,225 [main:28] - Try №238 of 513
2021-03-17 12:10:40,231 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:10:40,231 [main:28] - Try №239 of 513
2021-03-17 12:10:40,238 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:40,238 [main:28] - Try №240 of 513
2021-03-17 12:10:40,253 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:40,254 [main:28] - Try №241 of 513
2021-03-17 12:10:40,262 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:40,262 [main:28] - Try №242 of 513
2021-03-17 12:10:40,267 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:10:40,267 [main:28] - Try №243 of 513
2021-03-17 12:10:40,274 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:10:40,275 [main:28] - Try №244 of 513
2021-03-17 12:10:40,286 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-17 12:10:40,287 [main:28] - Try №245 of 513
2021-03-17 12:10:40,299 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:10:40,299 [main:28] - Try №246 of 513
2021-03-17 12:10:40,315 [main:33] - Trying to replace Element(ELSE) on Element(ELSE)
2021-03-17 12:10:40,315 [main:28] - Try №247 of 513
2021-03-17 12:10:40,330 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:40,330 [main:28] - Try №248 of 513
2021-03-17 12:10:40,337 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-17 12:10:40,337 [main:28] - Try №249 of 513
2021-03-17 12:10:40,352 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:40,353 [main:28] - Try №250 of 513
2021-03-17 12:10:40,371 [main:33] - Trying to replace Element(DESTRUCTURING_DECLARATION) on Element(DESTRUCTURING_DECLARATION)
2021-03-17 12:10:40,371 [main:28] - Try №251 of 513
2021-03-17 12:10:40,380 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:10:40,380 [main:28] - Try №252 of 513
2021-03-17 12:10:40,395 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-17 12:10:40,395 [main:28] - Try №253 of 513
2021-03-17 12:10:40,414 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:10:40,414 [main:28] - Try №254 of 513
2021-03-17 12:10:40,417 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-17 12:10:40,417 [main:66] - Compilation checking started
2021-03-17 12:10:40,767 [main:49] - Result = false
Text:
val xs = listOf("lol", "Foo", 1, "K")

fun test() = x

fun box(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:40,767 [main:28] - Try №255 of 513
2021-03-17 12:10:40,781 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:40,782 [main:28] - Try №256 of 513
2021-03-17 12:10:40,788 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:40,788 [main:66] - Compilation checking started
2021-03-17 12:10:41,165 [main:49] - Result = false
Text:
val xs = listOf("lol", "Foo", 1, "K")

fun <T : String> Base(toString: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:41,165 [main:28] - Try №257 of 513
2021-03-17 12:10:41,172 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:41,172 [main:28] - Try №258 of 513
2021-03-17 12:10:41,185 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:41,186 [main:28] - Try №259 of 513
2021-03-17 12:10:41,193 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:41,193 [main:66] - Compilation checking started
2021-03-17 12:10:41,588 [main:49] - Result = false
Text:
val xs = fn(return "OK")

fun <T : String> Base(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:41,589 [main:28] - Try №260 of 513
2021-03-17 12:10:41,604 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:41,604 [main:28] - Try №261 of 513
2021-03-17 12:10:41,615 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:41,615 [main:28] - Try №262 of 513
2021-03-17 12:10:41,619 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:41,619 [main:28] - Try №263 of 513
2021-03-17 12:10:41,621 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-17 12:10:41,621 [main:66] - Compilation checking started
2021-03-17 12:10:41,621 [main:68] - Already checked
2021-03-17 12:10:41,621 [main:28] - Try №264 of 513
2021-03-17 12:10:41,626 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:41,627 [main:28] - Try №265 of 513
2021-03-17 12:10:41,640 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:41,641 [main:28] - Try №266 of 513
2021-03-17 12:10:41,655 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:41,655 [main:28] - Try №267 of 513
2021-03-17 12:10:41,673 [main:33] - Trying to replace Element(DESTRUCTURING_DECLARATION) on Element(DESTRUCTURING_DECLARATION)
2021-03-17 12:10:41,673 [main:28] - Try №268 of 513
2021-03-17 12:10:41,678 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:41,679 [main:66] - Compilation checking started
2021-03-17 12:10:42,069 [main:49] - Result = false
Text:
val xs = listOf("lol", "Foo", 1, "K")

fun <T : String> Base(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in javaClass.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:42,069 [main:28] - Try №269 of 513
2021-03-17 12:10:42,081 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:10:42,082 [main:28] - Try №270 of 513
2021-03-17 12:10:42,086 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:42,087 [main:66] - Compilation checking started
2021-03-17 12:10:42,579 [main:53] - Result = true
Text:
val o = listOf("lol", "Foo", 1, "K")

fun <T : String> Base(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:42,579 [main:28] - Try №271 of 513
2021-03-17 12:10:42,590 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:10:42,590 [main:28] - Try №272 of 513
2021-03-17 12:10:42,608 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:42,609 [main:28] - Try №273 of 513
2021-03-17 12:10:42,624 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-17 12:10:42,624 [main:28] - Try №274 of 513
2021-03-17 12:10:42,650 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-17 12:10:42,650 [main:28] - Try №275 of 513
2021-03-17 12:10:42,666 [main:33] - Trying to replace Element(SHORT_STRING_TEMPLATE_ENTRY) on Element(SHORT_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:42,666 [main:28] - Try №276 of 513
2021-03-17 12:10:42,681 [main:33] - Trying to replace Element(SHORT_STRING_TEMPLATE_ENTRY) on Element(SHORT_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:42,681 [main:28] - Try №277 of 513
2021-03-17 12:10:42,691 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:42,691 [main:28] - Try №278 of 513
2021-03-17 12:10:42,695 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:42,695 [main:28] - Try №279 of 513
2021-03-17 12:10:42,708 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:10:42,708 [main:28] - Try №280 of 513
2021-03-17 12:10:42,723 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:42,723 [main:28] - Try №281 of 513
2021-03-17 12:10:42,739 [main:33] - Trying to replace Element(SHORT_STRING_TEMPLATE_ENTRY) on Element(SHORT_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:42,739 [main:28] - Try №282 of 513
2021-03-17 12:10:42,746 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:42,746 [main:28] - Try №283 of 513
2021-03-17 12:10:42,749 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:42,749 [main:28] - Try №284 of 513
2021-03-17 12:10:42,758 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:10:42,759 [main:28] - Try №285 of 513
2021-03-17 12:10:42,773 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:42,773 [main:28] - Try №286 of 513
2021-03-17 12:10:42,784 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:10:42,784 [main:66] - Compilation checking started
2021-03-17 12:10:43,174 [main:49] - Result = false
Text:
val o = listOf("lol", "Foo", 1, "K")

fun <T : String> Base(iterable: T): T {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:43,175 [main:28] - Try №287 of 513
2021-03-17 12:10:43,188 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:43,189 [main:28] - Try №288 of 513
2021-03-17 12:10:43,193 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:43,193 [main:28] - Try №289 of 513
2021-03-17 12:10:43,226 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:10:43,227 [main:28] - Try №290 of 513
2021-03-17 12:10:43,231 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:10:43,231 [main:28] - Try №291 of 513
2021-03-17 12:10:43,241 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:43,242 [main:66] - Compilation checking started
2021-03-17 12:10:43,648 [main:49] - Result = false
Text:
val o = listOf("lol", "Foo", 1, "K")

fun <T : String> Base(iterable: Int): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:43,648 [main:28] - Try №292 of 513
2021-03-17 12:10:43,659 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:10:43,659 [main:28] - Try №293 of 513
2021-03-17 12:10:43,663 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-17 12:10:43,663 [main:66] - Compilation checking started
2021-03-17 12:10:44,008 [main:49] - Result = false
Text:
val o = listOf("lol", "Foo", 1, "K")

fun foo(): Foo? = Foo("OK")

fun box(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:44,008 [main:28] - Try №294 of 513
2021-03-17 12:10:44,022 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:44,022 [main:28] - Try №295 of 513
2021-03-17 12:10:44,032 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:44,032 [main:28] - Try №296 of 513
2021-03-17 12:10:44,044 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:10:44,044 [main:66] - Compilation checking started
2021-03-17 12:10:44,503 [main:53] - Result = true
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:44,503 [main:28] - Try №297 of 513
2021-03-17 12:10:44,508 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-17 12:10:44,509 [main:66] - Compilation checking started
2021-03-17 12:10:44,871 [main:49] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(k: KFlowable<Foo<Enum<*>>>): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:44,871 [main:28] - Try №298 of 513
2021-03-17 12:10:44,875 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:44,875 [main:28] - Try №299 of 513
2021-03-17 12:10:44,887 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:10:44,887 [main:28] - Try №300 of 513
2021-03-17 12:10:44,900 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:44,900 [main:28] - Try №301 of 513
2021-03-17 12:10:44,905 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:44,905 [main:66] - Compilation checking started
2021-03-17 12:10:45,294 [main:49] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): UInt {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:45,294 [main:28] - Try №302 of 513
2021-03-17 12:10:45,298 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:45,298 [main:28] - Try №303 of 513
2021-03-17 12:10:45,308 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:45,309 [main:66] - Compilation checking started
2021-03-17 12:10:45,675 [main:49] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: y): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:45,676 [main:28] - Try №304 of 513
2021-03-17 12:10:45,683 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:45,683 [main:66] - Compilation checking started
2021-03-17 12:10:46,063 [main:49] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.asList("AK", "OK", "EK")) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:46,063 [main:28] - Try №305 of 513
2021-03-17 12:10:46,070 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:46,070 [main:28] - Try №306 of 513
2021-03-17 12:10:46,074 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:46,074 [main:28] - Try №307 of 513
2021-03-17 12:10:46,084 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:46,084 [main:28] - Try №308 of 513
2021-03-17 12:10:46,095 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:10:46,095 [main:28] - Try №309 of 513
2021-03-17 12:10:46,110 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:46,110 [main:28] - Try №310 of 513
2021-03-17 12:10:46,120 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:46,120 [main:66] - Compilation checking started
2021-03-17 12:10:46,507 [main:49] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): s {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:46,507 [main:28] - Try №311 of 513
2021-03-17 12:10:46,525 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-17 12:10:46,525 [main:28] - Try №312 of 513
2021-03-17 12:10:46,529 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:46,529 [main:28] - Try №313 of 513
2021-03-17 12:10:46,543 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:46,543 [main:28] - Try №314 of 513
2021-03-17 12:10:46,562 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:10:46,562 [main:66] - Compilation checking started
2021-03-17 12:10:46,992 [main:49] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex("val test.A.mem: kotlin.String", A::mem)) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:46,992 [main:28] - Try №315 of 513
2021-03-17 12:10:47,013 [main:33] - Trying to replace Element(DESTRUCTURING_DECLARATION) on Element(DESTRUCTURING_DECLARATION)
2021-03-17 12:10:47,013 [main:28] - Try №316 of 513
2021-03-17 12:10:47,027 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:47,027 [main:28] - Try №317 of 513
2021-03-17 12:10:47,036 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:10:47,036 [main:28] - Try №318 of 513
2021-03-17 12:10:47,048 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-17 12:10:47,048 [main:28] - Try №319 of 513
2021-03-17 12:10:47,052 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:47,053 [main:28] - Try №320 of 513
2021-03-17 12:10:47,057 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:47,057 [main:66] - Compilation checking started
2021-03-17 12:10:47,446 [main:49] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun box(): declaringClass {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:47,447 [main:28] - Try №321 of 513
2021-03-17 12:10:47,460 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:47,460 [main:28] - Try №322 of 513
2021-03-17 12:10:47,467 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:47,467 [main:28] - Try №323 of 513
2021-03-17 12:10:47,479 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:10:47,479 [main:28] - Try №324 of 513
2021-03-17 12:10:47,483 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:47,483 [main:66] - Compilation checking started
2021-03-17 12:10:47,938 [main:53] - Result = true
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun String(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:47,938 [main:28] - Try №325 of 513
2021-03-17 12:10:47,942 [main:33] - Trying to replace Element(TYPE_PARAMETER_LIST) on Element(TYPE_PARAMETER_LIST)
2021-03-17 12:10:47,942 [main:66] - Compilation checking started
2021-03-17 12:10:48,320 [main:49] - Result = false
Text:
val o = listOf(65535)

fun <T> Base(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun String(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:48,320 [main:28] - Try №326 of 513
2021-03-17 12:10:48,330 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:48,330 [main:28] - Try №327 of 513
2021-03-17 12:10:48,335 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:48,335 [main:28] - Try №328 of 513
2021-03-17 12:10:48,347 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:10:48,348 [main:28] - Try №329 of 513
2021-03-17 12:10:48,355 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:10:48,356 [main:28] - Try №330 of 513
2021-03-17 12:10:48,368 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-17 12:10:48,369 [main:66] - Compilation checking started
2021-03-17 12:10:48,762 [main:49] - Result = false
Text:
override val size: Int get() = 0

fun <T : String> Base(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun String(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:48,762 [main:28] - Try №331 of 513
2021-03-17 12:10:48,774 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:10:48,774 [main:28] - Try №332 of 513
2021-03-17 12:10:48,781 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:48,782 [main:66] - Compilation checking started
2021-03-17 12:10:49,148 [main:49] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.UnsupportedOperationException()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun String(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:49,148 [main:28] - Try №333 of 513
2021-03-17 12:10:49,161 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:49,161 [main:66] - Compilation checking started
2021-03-17 12:10:49,550 [main:49] - Result = false
Text:
val o = lambdaAsParameter(65535)

fun <T : String> Base(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun String(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:49,550 [main:28] - Try №334 of 513
2021-03-17 12:10:49,567 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:49,567 [main:28] - Try №335 of 513
2021-03-17 12:10:49,574 [main:33] - Trying to replace Element(TYPE_PARAMETER) on Element(TYPE_PARAMETER)
2021-03-17 12:10:49,575 [main:66] - Compilation checking started
2021-03-17 12:10:49,575 [main:68] - Already checked
2021-03-17 12:10:49,575 [main:49] - Result = false
Text:
val o = listOf(65535)

fun <T> Base(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun String(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:49,575 [main:28] - Try №336 of 513
2021-03-17 12:10:49,581 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:10:49,582 [main:66] - Compilation checking started
2021-03-17 12:10:49,948 [main:49] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: My): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun String(): String {
    val myIntegerProp: java.lang.Integer? = null
    return "OK"
}
2021-03-17 12:10:49,948 [main:28] - Try №337 of 513
2021-03-17 12:10:49,955 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-17 12:10:49,955 [main:66] - Compilation checking started
2021-03-17 12:10:50,531 [main:53] - Result = true
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun String(): String {
    val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:10:50,532 [main:28] - Try №338 of 513
2021-03-17 12:10:50,547 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:10:50,547 [main:28] - Try №339 of 513
2021-03-17 12:10:50,556 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-17 12:10:50,556 [main:28] - Try №340 of 513
2021-03-17 12:10:50,559 [main:33] - Trying to replace Element(IMPORT_LIST) on Element(IMPORT_LIST)
2021-03-17 12:10:50,559 [main:66] - Compilation checking started
2021-03-17 12:10:50,559 [main:68] - Already checked
2021-03-17 12:10:50,559 [main:28] - Try №341 of 513
2021-03-17 12:10:50,578 [main:33] - Trying to replace Element(DESTRUCTURING_DECLARATION_ENTRY) on Element(DESTRUCTURING_DECLARATION_ENTRY)
2021-03-17 12:10:50,578 [main:28] - Try №342 of 513
2021-03-17 12:10:50,594 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-17 12:10:50,594 [main:28] - Try №343 of 513
2021-03-17 12:10:50,607 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:10:50,607 [main:28] - Try №344 of 513
2021-03-17 12:10:50,614 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:50,614 [main:28] - Try №345 of 513
2021-03-17 12:10:50,619 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:50,619 [main:28] - Try №346 of 513
2021-03-17 12:10:50,626 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:50,626 [main:28] - Try №347 of 513
2021-03-17 12:10:50,639 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:50,639 [main:28] - Try №348 of 513
2021-03-17 12:10:50,655 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:50,656 [main:28] - Try №349 of 513
2021-03-17 12:10:50,670 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-17 12:10:50,670 [main:28] - Try №350 of 513
2021-03-17 12:10:50,681 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:10:50,682 [main:28] - Try №351 of 513
2021-03-17 12:10:50,686 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:50,687 [main:28] - Try №352 of 513
2021-03-17 12:10:50,699 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-17 12:10:50,699 [main:28] - Try №353 of 513
2021-03-17 12:10:50,707 [main:33] - Trying to replace Element(TYPE_PARAMETER) on Element(TYPE_PARAMETER)
2021-03-17 12:10:50,707 [main:66] - Compilation checking started
2021-03-17 12:10:51,111 [main:49] - Result = false
Text:
val o = listOf(65535)

fun <T> Base(iterable: T): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun String(): String {
    val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:10:51,111 [main:28] - Try №354 of 513
2021-03-17 12:10:51,115 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:51,116 [main:28] - Try №355 of 513
2021-03-17 12:10:51,132 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:51,132 [main:28] - Try №356 of 513
2021-03-17 12:10:51,148 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:10:51,148 [main:28] - Try №357 of 513
2021-03-17 12:10:51,152 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:51,152 [main:28] - Try №358 of 513
2021-03-17 12:10:51,157 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:51,157 [main:28] - Try №359 of 513
2021-03-17 12:10:51,165 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-17 12:10:51,165 [main:28] - Try №360 of 513
2021-03-17 12:10:51,176 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:51,176 [main:66] - Compilation checking started
2021-03-17 12:10:51,769 [main:53] - Result = true
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun String(): String {
    val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:10:51,769 [main:28] - Try №361 of 513
2021-03-17 12:10:51,784 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:51,784 [main:28] - Try №362 of 513
2021-03-17 12:10:51,803 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:10:51,803 [main:28] - Try №363 of 513
2021-03-17 12:10:51,819 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:51,819 [main:28] - Try №364 of 513
2021-03-17 12:10:51,824 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-17 12:10:51,825 [main:66] - Compilation checking started
2021-03-17 12:10:52,285 [main:49] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(x : Any): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun String(): String {
    val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:10:52,285 [main:28] - Try №365 of 513
2021-03-17 12:10:52,295 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:52,295 [main:28] - Try №366 of 513
2021-03-17 12:10:52,300 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:52,300 [main:28] - Try №367 of 513
2021-03-17 12:10:52,304 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:52,304 [main:66] - Compilation checking started
2021-03-17 12:10:52,710 [main:49] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in TYPE.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun String(): String {
    val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:10:52,711 [main:28] - Try №368 of 513
2021-03-17 12:10:52,723 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:10:52,723 [main:28] - Try №369 of 513
2021-03-17 12:10:52,730 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:10:52,730 [main:28] - Try №370 of 513
2021-03-17 12:10:52,734 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:52,734 [main:28] - Try №371 of 513
2021-03-17 12:10:52,747 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:10:52,747 [main:28] - Try №372 of 513
2021-03-17 12:10:52,758 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:52,758 [main:28] - Try №373 of 513
2021-03-17 12:10:52,772 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:10:52,773 [main:28] - Try №374 of 513
2021-03-17 12:10:52,783 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:10:52,783 [main:28] - Try №375 of 513
2021-03-17 12:10:52,800 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:10:52,801 [main:28] - Try №376 of 513
2021-03-17 12:10:52,805 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:52,805 [main:66] - Compilation checking started
2021-03-17 12:10:53,215 [main:49] - Result = false
Text:
val o = COROUTINE_SUSPENDED(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun String(): String {
    val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:10:53,215 [main:28] - Try №377 of 513
2021-03-17 12:10:53,224 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:53,224 [main:66] - Compilation checking started
2021-03-17 12:10:53,775 [main:49] - Result = false
Text:
val o = AssertionError("$xs")

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun String(): String {
    val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:10:53,776 [main:28] - Try №378 of 513
2021-03-17 12:10:53,778 [main:33] - Trying to replace Element(IMPORT_LIST) on Element(IMPORT_LIST)
2021-03-17 12:10:53,778 [main:66] - Compilation checking started
2021-03-17 12:10:53,778 [main:68] - Already checked
2021-03-17 12:10:53,778 [main:28] - Try №379 of 513
2021-03-17 12:10:53,798 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-17 12:10:53,798 [main:28] - Try №380 of 513
2021-03-17 12:10:53,802 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:53,803 [main:28] - Try №381 of 513
2021-03-17 12:10:53,816 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:10:53,816 [main:28] - Try №382 of 513
2021-03-17 12:10:53,834 [main:33] - Trying to replace Element(DESTRUCTURING_DECLARATION) on Element(DESTRUCTURING_DECLARATION)
2021-03-17 12:10:53,834 [main:28] - Try №383 of 513
2021-03-17 12:10:53,850 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:10:53,850 [main:28] - Try №384 of 513
2021-03-17 12:10:53,863 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:10:53,863 [main:28] - Try №385 of 513
2021-03-17 12:10:53,874 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:10:53,874 [main:28] - Try №386 of 513
2021-03-17 12:10:53,889 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:53,889 [main:28] - Try №387 of 513
2021-03-17 12:10:53,903 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:53,903 [main:28] - Try №388 of 513
2021-03-17 12:10:53,917 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:10:53,918 [main:28] - Try №389 of 513
2021-03-17 12:10:53,927 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-17 12:10:53,927 [main:28] - Try №390 of 513
2021-03-17 12:10:53,940 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-17 12:10:53,940 [main:28] - Try №391 of 513
2021-03-17 12:10:53,944 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:53,944 [main:66] - Compilation checking started
2021-03-17 12:10:54,348 [main:49] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.R()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun String(): String {
    val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:10:54,348 [main:28] - Try №392 of 513
2021-03-17 12:10:54,358 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-17 12:10:54,359 [main:66] - Compilation checking started
2021-03-17 12:10:54,808 [main:49] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for (a: Double? in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun String(): String {
    val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:10:54,808 [main:28] - Try №393 of 513
2021-03-17 12:10:54,826 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:10:54,826 [main:28] - Try №394 of 513
2021-03-17 12:10:54,838 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:10:54,838 [main:28] - Try №395 of 513
2021-03-17 12:10:54,847 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:10:54,847 [main:28] - Try №396 of 513
2021-03-17 12:10:54,863 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:54,863 [main:28] - Try №397 of 513
2021-03-17 12:10:54,877 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:54,878 [main:28] - Try №398 of 513
2021-03-17 12:10:54,892 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-17 12:10:54,892 [main:28] - Try №399 of 513
2021-03-17 12:10:54,904 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:10:54,904 [main:28] - Try №400 of 513
2021-03-17 12:10:54,918 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:10:54,918 [main:28] - Try №401 of 513
2021-03-17 12:10:54,931 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:10:54,932 [main:28] - Try №402 of 513
2021-03-17 12:10:54,947 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:10:54,947 [main:28] - Try №403 of 513
2021-03-17 12:10:54,953 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:54,954 [main:28] - Try №404 of 513
2021-03-17 12:10:54,964 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-17 12:10:54,964 [main:66] - Compilation checking started
2021-03-17 12:10:55,382 [main:49] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(c: suspend () -> Unit): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun String(): String {
    val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:10:55,382 [main:28] - Try №405 of 513
2021-03-17 12:10:55,394 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:10:55,394 [main:28] - Try №406 of 513
2021-03-17 12:10:55,399 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:10:55,399 [main:28] - Try №407 of 513
2021-03-17 12:10:55,412 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:10:55,412 [main:28] - Try №408 of 513
2021-03-17 12:10:55,422 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:55,422 [main:28] - Try №409 of 513
2021-03-17 12:10:55,438 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:55,438 [main:28] - Try №410 of 513
2021-03-17 12:10:55,453 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:10:55,453 [main:28] - Try №411 of 513
2021-03-17 12:10:55,467 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:55,467 [main:28] - Try №412 of 513
2021-03-17 12:10:55,483 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-17 12:10:55,483 [main:28] - Try №413 of 513
2021-03-17 12:10:55,486 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:55,487 [main:28] - Try №414 of 513
2021-03-17 12:10:55,502 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-17 12:10:55,502 [main:28] - Try №415 of 513
2021-03-17 12:10:55,513 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:10:55,513 [main:28] - Try №416 of 513
2021-03-17 12:10:55,523 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:55,524 [main:28] - Try №417 of 513
2021-03-17 12:10:55,528 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:55,528 [main:28] - Try №418 of 513
2021-03-17 12:10:55,544 [main:33] - Trying to replace Element(SHORT_STRING_TEMPLATE_ENTRY) on Element(SHORT_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:55,545 [main:28] - Try №419 of 513
2021-03-17 12:10:55,557 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:10:55,557 [main:28] - Try №420 of 513
2021-03-17 12:10:55,571 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:55,571 [main:28] - Try №421 of 513
2021-03-17 12:10:55,587 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-17 12:10:55,587 [main:28] - Try №422 of 513
2021-03-17 12:10:55,598 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:10:55,598 [main:28] - Try №423 of 513
2021-03-17 12:10:55,613 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:55,613 [main:28] - Try №424 of 513
2021-03-17 12:10:55,616 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-17 12:10:55,616 [main:66] - Compilation checking started
2021-03-17 12:10:56,345 [main:49] - Result = false
Text:
val o = listOf(65535)

fun box(): String {
    val uintList = mutableListOf<UInt>()
    val uintProgression = 7u downTo 1u
    for (i in uintProgression step 7) {
        uintList += i
    }
    assertEquals(listOf(7u), uintList)

    val ulongList = mutableListOf<ULong>()
    val ulongProgression = 7uL downTo 1uL
    for (i in ulongProgression step 7L) {
        ulongList += i
    }
    assertEquals(listOf(7uL), ulongList)

    return "OK"
}

fun String(): String {
    val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:10:56,346 [main:28] - Try №425 of 513
2021-03-17 12:10:56,348 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-17 12:10:56,348 [main:66] - Compilation checking started
2021-03-17 12:10:56,349 [main:68] - Already checked
2021-03-17 12:10:56,349 [main:28] - Try №426 of 513
2021-03-17 12:10:56,355 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:56,355 [main:28] - Try №427 of 513
2021-03-17 12:10:56,376 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:10:56,376 [main:28] - Try №428 of 513
2021-03-17 12:10:56,391 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-17 12:10:56,391 [main:28] - Try №429 of 513
2021-03-17 12:10:56,406 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:56,406 [main:28] - Try №430 of 513
2021-03-17 12:10:56,418 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:10:56,419 [main:28] - Try №431 of 513
2021-03-17 12:10:56,431 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:10:56,432 [main:28] - Try №432 of 513
2021-03-17 12:10:56,434 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-17 12:10:56,434 [main:66] - Compilation checking started
2021-03-17 12:10:56,434 [main:68] - Already checked
2021-03-17 12:10:56,434 [main:28] - Try №433 of 513
2021-03-17 12:10:56,443 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:56,443 [main:28] - Try №434 of 513
2021-03-17 12:10:56,448 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:10:56,448 [main:28] - Try №435 of 513
2021-03-17 12:10:56,464 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:10:56,464 [main:28] - Try №436 of 513
2021-03-17 12:10:56,474 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:10:56,474 [main:28] - Try №437 of 513
2021-03-17 12:10:56,487 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:10:56,487 [main:28] - Try №438 of 513
2021-03-17 12:10:56,501 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:10:56,502 [main:28] - Try №439 of 513
2021-03-17 12:10:56,519 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:10:56,519 [main:28] - Try №440 of 513
2021-03-17 12:10:56,536 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:56,536 [main:28] - Try №441 of 513
2021-03-17 12:10:56,554 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:56,554 [main:28] - Try №442 of 513
2021-03-17 12:10:56,559 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:56,559 [main:28] - Try №443 of 513
2021-03-17 12:10:56,564 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:56,564 [main:28] - Try №444 of 513
2021-03-17 12:10:56,576 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:10:56,577 [main:28] - Try №445 of 513
2021-03-17 12:10:56,586 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:10:56,586 [main:28] - Try №446 of 513
2021-03-17 12:10:56,597 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-17 12:10:56,597 [main:28] - Try №447 of 513
2021-03-17 12:10:56,616 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:10:56,616 [main:28] - Try №448 of 513
2021-03-17 12:10:56,630 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:56,631 [main:28] - Try №449 of 513
2021-03-17 12:10:56,645 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:56,645 [main:28] - Try №450 of 513
2021-03-17 12:10:56,659 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:56,660 [main:28] - Try №451 of 513
2021-03-17 12:10:56,673 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:56,673 [main:28] - Try №452 of 513
2021-03-17 12:10:56,681 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:10:56,681 [main:66] - Compilation checking started
2021-03-17 12:10:57,098 [main:49] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.getAnnotation(JavaAnn::class.java)) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun String(): String {
    val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:10:57,098 [main:28] - Try №453 of 513
2021-03-17 12:10:57,116 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:57,116 [main:28] - Try №454 of 513
2021-03-17 12:10:57,126 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-17 12:10:57,126 [main:28] - Try №455 of 513
2021-03-17 12:10:57,135 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-17 12:10:57,135 [main:28] - Try №456 of 513
2021-03-17 12:10:57,153 [main:33] - Trying to replace Element(DESTRUCTURING_DECLARATION_ENTRY) on Element(DESTRUCTURING_DECLARATION_ENTRY)
2021-03-17 12:10:57,153 [main:28] - Try №457 of 513
2021-03-17 12:10:57,157 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:57,157 [main:28] - Try №458 of 513
2021-03-17 12:10:57,171 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:57,171 [main:28] - Try №459 of 513
2021-03-17 12:10:57,175 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:57,175 [main:28] - Try №460 of 513
2021-03-17 12:10:57,188 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:57,188 [main:28] - Try №461 of 513
2021-03-17 12:10:57,198 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:57,198 [main:28] - Try №462 of 513
2021-03-17 12:10:57,212 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-17 12:10:57,212 [main:28] - Try №463 of 513
2021-03-17 12:10:57,227 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:10:57,227 [main:28] - Try №464 of 513
2021-03-17 12:10:57,231 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:57,231 [main:66] - Compilation checking started
2021-03-17 12:10:57,634 [main:49] - Result = false
Text:
val o = arr(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun String(): String {
    val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:10:57,634 [main:28] - Try №465 of 513
2021-03-17 12:10:57,682 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:10:57,682 [main:28] - Try №466 of 513
2021-03-17 12:10:57,690 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:10:57,690 [main:28] - Try №467 of 513
2021-03-17 12:10:57,700 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:10:57,700 [main:28] - Try №468 of 513
2021-03-17 12:10:57,715 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:57,715 [main:28] - Try №469 of 513
2021-03-17 12:10:57,728 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:10:57,728 [main:28] - Try №470 of 513
2021-03-17 12:10:57,739 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:10:57,739 [main:28] - Try №471 of 513
2021-03-17 12:10:57,754 [main:33] - Trying to replace Element(SHORT_STRING_TEMPLATE_ENTRY) on Element(SHORT_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:57,754 [main:28] - Try №472 of 513
2021-03-17 12:10:57,767 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:10:57,767 [main:28] - Try №473 of 513
2021-03-17 12:10:57,771 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:57,771 [main:28] - Try №474 of 513
2021-03-17 12:10:57,785 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:57,785 [main:28] - Try №475 of 513
2021-03-17 12:10:57,799 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:10:57,799 [main:28] - Try №476 of 513
2021-03-17 12:10:57,809 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:10:57,809 [main:28] - Try №477 of 513
2021-03-17 12:10:57,819 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:57,819 [main:28] - Try №478 of 513
2021-03-17 12:10:57,823 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:57,823 [main:28] - Try №479 of 513
2021-03-17 12:10:57,836 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:10:57,837 [main:28] - Try №480 of 513
2021-03-17 12:10:57,848 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-17 12:10:57,848 [main:28] - Try №481 of 513
2021-03-17 12:10:57,864 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:10:57,864 [main:28] - Try №482 of 513
2021-03-17 12:10:57,869 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:10:57,869 [main:28] - Try №483 of 513
2021-03-17 12:10:57,880 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:10:57,880 [main:28] - Try №484 of 513
2021-03-17 12:10:57,894 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:57,894 [main:28] - Try №485 of 513
2021-03-17 12:10:57,906 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-17 12:10:57,907 [main:28] - Try №486 of 513
2021-03-17 12:10:57,912 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:10:57,912 [main:28] - Try №487 of 513
2021-03-17 12:10:57,915 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:57,916 [main:28] - Try №488 of 513
2021-03-17 12:10:57,919 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:57,919 [main:28] - Try №489 of 513
2021-03-17 12:10:57,941 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:10:57,942 [main:28] - Try №490 of 513
2021-03-17 12:10:57,959 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-17 12:10:57,959 [main:28] - Try №491 of 513
2021-03-17 12:10:57,963 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:57,963 [main:28] - Try №492 of 513
2021-03-17 12:10:57,974 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:10:57,974 [main:28] - Try №493 of 513
2021-03-17 12:10:57,987 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:10:57,987 [main:28] - Try №494 of 513
2021-03-17 12:10:58,006 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-17 12:10:58,006 [main:28] - Try №495 of 513
2021-03-17 12:10:58,010 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:58,010 [main:28] - Try №496 of 513
2021-03-17 12:10:58,024 [main:33] - Trying to replace Element(ELSE) on Element(ELSE)
2021-03-17 12:10:58,025 [main:28] - Try №497 of 513
2021-03-17 12:10:58,029 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:58,029 [main:28] - Try №498 of 513
2021-03-17 12:10:58,038 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:10:58,039 [main:28] - Try №499 of 513
2021-03-17 12:10:58,050 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-17 12:10:58,051 [main:28] - Try №500 of 513
2021-03-17 12:10:58,065 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:10:58,066 [main:28] - Try №501 of 513
2021-03-17 12:10:58,076 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:58,076 [main:28] - Try №502 of 513
2021-03-17 12:10:58,089 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:10:58,090 [main:28] - Try №503 of 513
2021-03-17 12:10:58,102 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-17 12:10:58,102 [main:28] - Try №504 of 513
2021-03-17 12:10:58,117 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:58,118 [main:28] - Try №505 of 513
2021-03-17 12:10:58,121 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:58,122 [main:28] - Try №506 of 513
2021-03-17 12:10:58,140 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-17 12:10:58,140 [main:28] - Try №507 of 513
2021-03-17 12:10:58,144 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:10:58,145 [main:28] - Try №508 of 513
2021-03-17 12:10:58,154 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:10:58,154 [main:28] - Try №509 of 513
2021-03-17 12:10:58,172 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-17 12:10:58,172 [main:28] - Try №510 of 513
2021-03-17 12:10:58,183 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:58,183 [main:28] - Try №511 of 513
2021-03-17 12:10:58,198 [main:33] - Trying to replace Element(ELSE) on Element(ELSE)
2021-03-17 12:10:58,198 [main:28] - Try №512 of 513
2021-03-17 12:10:58,209 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:10:58,209 [main:66] - Compilation checking started
2021-03-17 12:10:58,611 [main:49] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.String()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun String(): String {
    val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:10:58,611 [main:28] - Try №513 of 513
2021-03-17 12:10:58,632 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:10:58,897 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:10:58,898 [main:66] - Compilation checking started
2021-03-17 12:10:59,492 [main:94] - Result = true
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    return "OK"
}

fun String(): String {
    val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    array.contentToString().withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:10:59,875 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:10:59,876 [main:66] - Compilation checking started
2021-03-17 12:11:00,604 [main:94] - Result = true
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    "Loop should not be executed".withIndex()
return "OK"
}

fun String(): String {
    val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    array.contentToString().withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:01,016 [main:49] - AVOIDING RECURSION func: Base
2021-03-17 12:11:01,200 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:01,200 [main:66] - Compilation checking started
2021-03-17 12:11:01,828 [main:97] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    toTypedArray()
"Loop should not be executed".withIndex()
return "OK"
}

fun String(): String {
    val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    array.contentToString().withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:02,033 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:02,034 [main:66] - Compilation checking started
2021-03-17 12:11:02,685 [main:94] - Result = true
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    "Loop should not be executed".withIndex()
return "OK"
}

fun String(): String {
    val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:03,052 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:03,053 [main:66] - Compilation checking started
2021-03-17 12:11:03,054 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:11:03,054 [main:97] - Result = false
Text:
val o = listOf(65535)

toTypedArray()
fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    "Loop should not be executed".withIndex()
return "OK"
}

fun String(): String {
    val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:03,238 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:03,238 [main:66] - Compilation checking started
2021-03-17 12:11:03,704 [main:97] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    "Loop should not be executed".withIndex()
isArrayOf()
return "OK"
}

fun String(): String {
    val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:03,898 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:03,898 [main:66] - Compilation checking started
2021-03-17 12:11:04,369 [main:97] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    "Loop should not be executed".withIndex()
return "OK"
}

fun String(): String {
    isArrayOf()
val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:04,579 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:04,579 [main:66] - Compilation checking started
2021-03-17 12:11:05,107 [main:94] - Result = true
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    "Loop should not be executed".withIndex()
return "OK"
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:05,491 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:05,491 [main:66] - Compilation checking started
2021-03-17 12:11:05,940 [main:97] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    contentToString()
for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    "Loop should not be executed".withIndex()
return "OK"
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:06,471 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:06,472 [main:66] - Compilation checking started
2021-03-17 12:11:07,123 [main:94] - Result = true
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    "Loop should not be executed".withIndex()
return "OK"
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:07,424 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:07,424 [main:66] - Compilation checking started
2021-03-17 12:11:07,942 [main:97] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    "Loop should not be executed".withIndex()
return "OK"
contentToString()
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:08,607 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:08,607 [main:66] - Compilation checking started
2021-03-17 12:11:09,065 [main:97] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    toTypedArray()
}

    "Loop should not be executed".withIndex()
return "OK"
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:09,244 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:09,245 [main:66] - Compilation checking started
2021-03-17 12:11:09,673 [main:97] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    "Loop should not be executed".withIndex()
return "OK"
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
Base("fail: is not Array<Int>")
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:09,840 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:09,840 [main:66] - Compilation checking started
2021-03-17 12:11:10,253 [main:97] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    "Loop should not be executed".withIndex()
isArrayOf()
return "OK"
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:10,333 [main:49] - AVOIDING RECURSION func: String
2021-03-17 12:11:10,579 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:10,579 [main:66] - Compilation checking started
2021-03-17 12:11:10,998 [main:97] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        contentToString()
throw AssertionError("Loop should not be executed")
    }

    "Loop should not be executed".withIndex()
return "OK"
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    val str = array.contentToString()
    array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:11,077 [main:49] - AVOIDING RECURSION func: String
2021-03-17 12:11:11,232 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:11,233 [main:66] - Compilation checking started
2021-03-17 12:11:11,743 [main:94] - Result = true
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    "Loop should not be executed".withIndex()
return "OK"
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:11,983 [main:49] - AVOIDING RECURSION func: Base
2021-03-17 12:11:12,140 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:12,140 [main:66] - Compilation checking started
2021-03-17 12:11:12,653 [main:94] - Result = true
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    "Loop should not be executed".withIndex()
String()
return "OK"
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:12,904 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:12,904 [main:66] - Compilation checking started
2021-03-17 12:11:12,905 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:11:12,905 [main:97] - Result = false
Text:
val o = listOf(65535)

withIndex()
fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    }

    "Loop should not be executed".withIndex()
String()
return "OK"
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:12,985 [main:49] - AVOIDING RECURSION func: Base
2021-03-17 12:11:13,149 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:13,149 [main:66] - Compilation checking started
2021-03-17 12:11:13,663 [main:94] - Result = true
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    "Loop should not be executed".withIndex()
}

    "Loop should not be executed".withIndex()
String()
return "OK"
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:13,908 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:13,909 [main:66] - Compilation checking started
2021-03-17 12:11:14,321 [main:97] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    "Loop should not be executed".withIndex()
}

    "Loop should not be executed".withIndex()
String()
return "OK"
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
isArrayOf()
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:14,583 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:14,584 [main:66] - Compilation checking started
2021-03-17 12:11:15,103 [main:94] - Result = true
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    "Loop should not be executed".withIndex()
}

    listOf(65535, 65535, 65535)
"Loop should not be executed".withIndex()
String()
return "OK"
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:15,348 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:15,348 [main:66] - Compilation checking started
2021-03-17 12:11:15,859 [main:94] - Result = true
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    "Loop should not be executed".withIndex()
}

    listOf(65535, 65535, 65535)
"Loop should not be executed".withIndex()
String()
return "OK"
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    str.withIndex()
array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:16,350 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:16,351 [main:66] - Compilation checking started
2021-03-17 12:11:16,753 [main:97] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    contentToString()
for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    "Loop should not be executed".withIndex()
}

    listOf(65535, 65535, 65535)
"Loop should not be executed".withIndex()
String()
return "OK"
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    str.withIndex()
array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:17,164 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:17,164 [main:66] - Compilation checking started
2021-03-17 12:11:17,665 [main:94] - Result = true
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    "Loop should not be executed".withIndex()
}

    listOf(65535, 65535, 65535)
"Loop should not be executed".withIndex()
String()
return "OK"
listOf(1327919088, 65535, -262117347)
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    str.withIndex()
array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:17,912 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:17,912 [main:66] - Compilation checking started
2021-03-17 12:11:18,341 [main:97] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    "Loop should not be executed".withIndex()
}

    listOf(65535, 65535, 65535)
contentToString()
"Loop should not be executed".withIndex()
String()
return "OK"
listOf(1327919088, 65535, -262117347)
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    str.withIndex()
array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:18,663 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:18,663 [main:66] - Compilation checking started
2021-03-17 12:11:18,664 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:11:18,664 [main:97] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    "Loop should not be executed".withIndex()
}

    listOf(65535, 65535, 65535)
"Loop should not be executed".withIndex()
String()
return "OK"
listOf(1327919088, 65535, -262117347)
}

contentToString()
fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    str.withIndex()
array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:19,001 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:19,001 [main:66] - Compilation checking started
2021-03-17 12:11:19,404 [main:97] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    "Loop should not be executed".withIndex()
isArrayOf()
}

    listOf(65535, 65535, 65535)
"Loop should not be executed".withIndex()
String()
return "OK"
listOf(1327919088, 65535, -262117347)
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    str.withIndex()
array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:19,566 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:19,567 [main:66] - Compilation checking started
2021-03-17 12:11:19,568 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:11:19,568 [main:97] - Result = false
Text:
val o = listOf(65535)

withIndex()
fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    "Loop should not be executed".withIndex()
}

    listOf(65535, 65535, 65535)
"Loop should not be executed".withIndex()
String()
return "OK"
listOf(1327919088, 65535, -262117347)
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    str.withIndex()
array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:19,812 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:19,813 [main:66] - Compilation checking started
2021-03-17 12:11:20,235 [main:97] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    "Loop should not be executed".withIndex()
}

    listOf(65535, 65535, 65535)
"Loop should not be executed".withIndex()
contentToString()
String()
return "OK"
listOf(1327919088, 65535, -262117347)
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    str.withIndex()
array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
}
2021-03-17 12:11:20,394 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:20,395 [main:66] - Compilation checking started
2021-03-17 12:11:20,892 [main:94] - Result = true
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    "Loop should not be executed".withIndex()
}

    listOf(65535, 65535, 65535)
"Loop should not be executed".withIndex()
String()
return "OK"
listOf(1327919088, 65535, -262117347)
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    str.withIndex()
array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
"[2, 3, 9]".withIndex()
}
2021-03-17 12:11:21,147 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:21,148 [main:66] - Compilation checking started
2021-03-17 12:11:21,549 [main:97] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    "Loop should not be executed".withIndex()
}

    listOf(65535, 65535, 65535)
"Loop should not be executed".withIndex()
contentToString()
String()
return "OK"
listOf(1327919088, 65535, -262117347)
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    str.withIndex()
array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
if (str != "[2, 3, 9]") return str

    return "OK"
"[2, 3, 9]".withIndex()
}
2021-03-17 12:11:21,709 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:21,709 [main:66] - Compilation checking started
2021-03-17 12:11:22,219 [main:94] - Result = true
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    "Loop should not be executed".withIndex()
}

    listOf(65535, 65535, 65535)
"Loop should not be executed".withIndex()
String()
return "OK"
listOf(1327919088, 65535, -262117347)
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    str.withIndex()
array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
listOf(-1348543157, 3, 65535)
if (str != "[2, 3, 9]") return str

    return "OK"
"[2, 3, 9]".withIndex()
}
2021-03-17 12:11:22,458 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:22,458 [main:66] - Compilation checking started
2021-03-17 12:11:22,984 [main:94] - Result = true
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    "Loop should not be executed".withIndex()
}

    listOf(65535, 65535, 65535)
"Loop should not be executed".withIndex()
String()
return "OK"
listOf(1327919088, 65535, -262117347)
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    str.withIndex()
listOf(441408801, 1308629569, 441408801)
array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
listOf(-1348543157, 3, 65535)
if (str != "[2, 3, 9]") return str

    return "OK"
"[2, 3, 9]".withIndex()
}
2021-03-17 12:11:23,229 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:23,229 [main:66] - Compilation checking started
2021-03-17 12:11:23,744 [main:94] - Result = true
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    "Loop should not be executed".withIndex()
}

    listOf(65535, 65535, 65535)
"Loop should not be executed".withIndex()
String()
String().withIndex()
return "OK"
listOf(1327919088, 65535, -262117347)
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    str.withIndex()
listOf(441408801, 1308629569, 441408801)
array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
listOf(-1348543157, 3, 65535)
if (str != "[2, 3, 9]") return str

    return "OK"
"[2, 3, 9]".withIndex()
}
2021-03-17 12:11:24,263 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:24,263 [main:66] - Compilation checking started
2021-03-17 12:11:24,670 [main:97] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    "Loop should not be executed".withIndex()
}

    listOf(65535, 65535, 65535)
"Loop should not be executed".withIndex()
String()
String().withIndex()
return "OK"
listOf(1327919088, 65535, -262117347)
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    str.withIndex()
listOf(441408801, 1308629569, 441408801)
array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
isArrayOf()
listOf(-1348543157, 3, 65535)
if (str != "[2, 3, 9]") return str

    return "OK"
"[2, 3, 9]".withIndex()
}
2021-03-17 12:11:25,499 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:25,500 [main:66] - Compilation checking started
2021-03-17 12:11:25,901 [main:97] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    "Loop should not be executed".withIndex()
}

    listOf(65535, 65535, 65535)
"Loop should not be executed".withIndex()
String()
String().withIndex()
return "OK"
listOf(1327919088, 65535, -262117347)
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    str.withIndex()
listOf(441408801, 1308629569, 441408801)
array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
listOf(-1348543157, 3, 65535)
isArrayOf()
if (str != "[2, 3, 9]") return str

    return "OK"
"[2, 3, 9]".withIndex()
}
2021-03-17 12:11:26,323 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:26,324 [main:66] - Compilation checking started
2021-03-17 12:11:26,727 [main:97] - Result = false
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    "Loop should not be executed".withIndex()
}

    listOf(65535, 65535, 65535)
"Loop should not be executed".withIndex()
String()
String().withIndex()
return "OK"
listOf(1327919088, 65535, -262117347)
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    str.withIndex()
Base(contentToString())
listOf(441408801, 1308629569, 441408801)
array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
listOf(-1348543157, 3, 65535)
if (str != "[2, 3, 9]") return str

    return "OK"
"[2, 3, 9]".withIndex()
}
2021-03-17 12:11:26,909 [main:87] - Trying to add BLOCK to PsiWhiteSpace
2021-03-17 12:11:26,909 [main:66] - Compilation checking started
2021-03-17 12:11:27,408 [main:94] - Result = true
Text:
val o = listOf(65535)

fun <T : String> Base(iterable: String): String {
    val charProgression = 'g' downTo 'a'

    for ((index, x) in iterable.withIndex()) {
        throw AssertionError("Loop should not be executed")
    "Loop should not be executed".withIndex()
}

    listOf(65535, 65535, 65535)
"Loop should not be executed".withIndex()
String()
String().withIndex()
return "OK"
listOf(1327919088, 65535, -262117347)
}

fun String(): String {
    listOf(-1018264417, 1880372294, -1348543157)
val array = listOf(2, 3, 9).toTypedArray()
    listOf(-441408801, 1348543157, 65535)
if (!array.isArrayOf<Int>()) return "fail: is not Array<Int>"

    listOf(9, 3, 441408801)
val str = array.contentToString()
    str.withIndex()
listOf(441408801, 1308629569, 441408801)
array.contentToString().withIndex()
"fail: is not Array<Int>".withIndex()
listOf(1348543157, 1880372294, 441408801)
listOf(-1348543157, 3, 65535)
if (str != "[2, 3, 9]") return str

    return "OK"
"[2, 3, 9]".withIndex()
}
2021-03-17 12:11:27,652 [main:49] - AVOIDING RECURSION func: String
2021-03-17 12:11:28,234 [main:66] - Compilation checking started
2021-03-17 12:11:28,235 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:11:28,315 [main:66] - Compilation checking started
2021-03-17 12:11:28,315 [main:68] - Already checked
2021-03-17 12:11:28,400 [main:66] - Compilation checking started
2021-03-17 12:11:28,998 [main:66] - Compilation checking started
2021-03-17 12:11:29,578 [main:66] - Compilation checking started
2021-03-17 12:11:29,579 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:11:29,659 [main:66] - Compilation checking started
2021-03-17 12:11:29,659 [main:68] - Already checked
2021-03-17 12:11:29,740 [main:66] - Compilation checking started
2021-03-17 12:11:30,326 [main:66] - Compilation checking started
2021-03-17 12:11:30,327 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:11:30,407 [main:66] - Compilation checking started
2021-03-17 12:11:30,891 [main:66] - Compilation checking started
2021-03-17 12:11:30,892 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:11:30,984 [main:66] - Compilation checking started
2021-03-17 12:11:31,560 [main:66] - Compilation checking started
2021-03-17 12:11:31,560 [main:68] - Already checked
2021-03-17 12:11:31,643 [main:66] - Compilation checking started
2021-03-17 12:11:32,259 [main:66] - Compilation checking started
2021-03-17 12:11:32,835 [main:66] - Compilation checking started
2021-03-17 12:11:33,344 [main:66] - Compilation checking started
2021-03-17 12:11:33,928 [main:66] - Compilation checking started
2021-03-17 12:11:34,544 [main:66] - Compilation checking started
2021-03-17 12:11:35,048 [main:66] - Compilation checking started
2021-03-17 12:11:35,640 [main:66] - Compilation checking started
2021-03-17 12:11:36,232 [main:66] - Compilation checking started
2021-03-17 12:11:36,807 [main:66] - Compilation checking started
2021-03-17 12:11:37,401 [main:66] - Compilation checking started
2021-03-17 12:11:37,922 [main:66] - Compilation checking started
2021-03-17 12:11:38,521 [main:66] - Compilation checking started
2021-03-17 12:11:39,091 [main:66] - Compilation checking started
2021-03-17 12:11:39,683 [main:66] - Compilation checking started
2021-03-17 12:11:39,684 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:11:39,762 [main:66] - Compilation checking started
2021-03-17 12:11:39,763 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:11:39,844 [main:66] - Compilation checking started
2021-03-17 12:11:40,429 [main:66] - Compilation checking started
2021-03-17 12:11:41,000 [main:66] - Compilation checking started
2021-03-17 12:11:41,586 [main:66] - Compilation checking started
2021-03-17 12:11:42,165 [main:66] - Compilation checking started
2021-03-17 12:11:42,759 [main:66] - Compilation checking started
2021-03-17 12:11:43,244 [main:66] - Compilation checking started
2021-03-17 12:11:43,754 [main:66] - Compilation checking started
2021-03-17 12:11:44,236 [main:66] - Compilation checking started
2021-03-17 12:11:44,236 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:11:44,320 [main:66] - Compilation checking started
2021-03-17 12:11:44,320 [main:68] - Already checked
2021-03-17 12:11:44,413 [main:66] - Compilation checking started
2021-03-17 12:11:44,984 [main:66] - Compilation checking started
2021-03-17 12:11:45,577 [main:66] - Compilation checking started
2021-03-17 12:11:46,149 [main:66] - Compilation checking started
2021-03-17 12:11:46,734 [main:66] - Compilation checking started
2021-03-17 12:11:47,316 [main:66] - Compilation checking started
2021-03-17 12:11:47,899 [main:66] - Compilation checking started
2021-03-17 12:11:48,477 [main:66] - Compilation checking started
2021-03-17 12:11:48,478 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:11:48,558 [main:66] - Compilation checking started
2021-03-17 12:11:49,063 [main:66] - Compilation checking started
2021-03-17 12:11:49,630 [main:66] - Compilation checking started
2021-03-17 12:11:50,206 [main:66] - Compilation checking started
2021-03-17 12:11:50,697 [main:66] - Compilation checking started
2021-03-17 12:11:51,422 [main:43] - AFTER TRY 0 res = val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}
2021-03-17 12:11:51,722 [main:45] - GENERATING CALL OF fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}
2021-03-17 12:11:51,732 [main:63] - WITHOUT TYPE PARAMS = fun <T : Iterable<*>> test(iterable: UShortArray): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}
2021-03-17 12:11:51,804 [main:298] - generating value of type = UShortArray false depth = 1
2021-03-17 12:11:51,890 [main:45] - GENERATING CALL OF fun UShortArray(size: kotlin.Int, init: (kotlin.Int)->kotlin.UShort): UShortArray = TODO()
2021-03-17 12:11:51,891 [main:63] - WITHOUT TYPE PARAMS = fun UShortArray(size: kotlin.Int, init: (kotlin.Int)->kotlin.UShort): UShortArray = TODO()
2021-03-17 12:11:52,113 [main:298] - generating value of type = Int true depth = 4
2021-03-17 12:11:52,113 [main:298] - generating value of type = Function1<Int, UShort> false depth = 4
2021-03-17 12:11:52,114 [main:298] - generating value of type = UShort true depth = 5
2021-03-17 12:11:52,114 [main:97] - GENERATED = UShortArray(-993761412, {a: Int -> 26151.toUShort()})
2021-03-17 12:11:52,114 [main:97] - GENERATED = test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))
2021-03-17 12:11:52,191 [main:58] - Try №0
2021-03-17 12:11:54,053 [main:76] - Trying to insert fun fu0() = false.toString()
2021-03-17 12:11:54,138 [main:66] - Compilation checking started
2021-03-17 12:11:54,707 [main:101] - Trying to change 28 nodes
2021-03-17 12:11:54,707 [main:105] - replacing (toString(), String)
2021-03-17 12:11:54,707 [main:36] - replacing toString() String
2021-03-17 12:11:54,707 [main:40] - Getting value of type String
2021-03-17 12:11:54,780 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:11:54,781 [main:44] - GENERATED VALUE OF TYPE String = "iwwpd"
2021-03-17 12:11:54,781 [main:47] - GENERATED IS CALL =false
2021-03-17 12:11:54,782 [main:53] - randomType = Long
2021-03-17 12:11:54,855 [main:298] - generating value of type = Long true depth = 0
2021-03-17 12:11:54,959 [main:133] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@7404a5a0]
2021-03-17 12:11:54,959 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36517812]
2021-03-17 12:11:54,959 [main:63] - Generated call from random type = (-7872255068553891837).toChar().lowercase()
2021-03-17 12:11:54,960 [main:112] - replacement of toString() of type String is (-7872255068553891837).toChar().lowercase()
2021-03-17 12:11:55,033 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:11:55,034 [main:66] - Compilation checking started
2021-03-17 12:11:55,451 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = false.toString()

fun fu1() = 1.toByte().toString()

fun fu2() = 1.toShort().toString()

fun fu3() = 1.toString()

fun fu4() = 1L.(-7872255068553891837).toChar().lowercase()

fun fu5() = 1.0F.toString()

fun fu6() = 1.0.toString()

fun fu7() = 'c'.toString()


2021-03-17 12:11:55,451 [main:105] - replacing (toString(), String)
2021-03-17 12:11:55,451 [main:36] - replacing toString() String
2021-03-17 12:11:55,451 [main:40] - Getting value of type String
2021-03-17 12:11:55,542 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:11:55,543 [main:44] - GENERATED VALUE OF TYPE String = "uozrw"
2021-03-17 12:11:55,543 [main:47] - GENERATED IS CALL =false
2021-03-17 12:11:55,622 [main:53] - randomType = UInt
2021-03-17 12:11:55,697 [main:298] - generating value of type = UInt true depth = 0
2021-03-17 12:11:55,747 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@293b1711]
2021-03-17 12:11:55,821 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:11:55,822 [main:63] - Generated call from random type = (739872007.toUInt()).toString(312796648)
2021-03-17 12:11:55,822 [main:90] - GETTING String from String
2021-03-17 12:11:55,851 [main:97] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154f24c5]]
2021-03-17 12:11:55,851 [main:133] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154f24c5]
2021-03-17 12:11:55,925 [main:298] - generating value of type = CharSequence false depth = 0
2021-03-17 12:11:55,931 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).removeSurrounding("lejqj")
2021-03-17 12:11:55,931 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56aaa1ac]]
2021-03-17 12:11:55,931 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:11:56,006 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:11:56,078 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:11:56,079 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56aaa1ac]
2021-03-17 12:11:56,153 [main:298] - generating value of type = Regex false depth = 0
2021-03-17 12:11:56,231 [main:45] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-17 12:11:56,232 [main:63] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-17 12:11:56,468 [main:298] - generating value of type = String true depth = 3
2021-03-17 12:11:56,468 [main:97] - GENERATED = Regex("slacl")
2021-03-17 12:11:56,544 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:11:56,545 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).subSequence(1149490940, -1182990126).replaceFirst(Regex("slacl"), "tnfcx")
2021-03-17 12:11:56,545 [main:97] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47396d16]]
2021-03-17 12:11:56,545 [main:133] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47396d16]
2021-03-17 12:11:56,620 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:11:56,620 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).prependIndent("taijo")
2021-03-17 12:11:56,620 [main:97] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17cb5b8f]]
2021-03-17 12:11:56,620 [main:133] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17cb5b8f]
2021-03-17 12:11:56,693 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:11:56,693 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).dropLast(-311856931)
2021-03-17 12:11:56,694 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@722db6bf]]
2021-03-17 12:11:56,694 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@722db6bf]
2021-03-17 12:11:56,694 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).reversed()
2021-03-17 12:11:56,694 [main:97] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ddfc4]]
2021-03-17 12:11:56,694 [main:133] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ddfc4]
2021-03-17 12:11:56,767 [main:298] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-17 12:11:56,767 [main:298] - generating value of type = Boolean true depth = 1
2021-03-17 12:11:56,767 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).filterNot({a: Char -> true})
2021-03-17 12:11:56,768 [main:97] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78ae7d17]]
2021-03-17 12:11:56,768 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78ae7d17]
2021-03-17 12:11:56,768 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).lowercase()
2021-03-17 12:11:56,768 [main:97] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5487590]]
2021-03-17 12:11:56,768 [main:133] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5487590]
2021-03-17 12:11:56,842 [main:298] - generating value of type = Any false depth = 0
2021-03-17 12:11:56,843 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).plus("xitzk")
2021-03-17 12:11:56,843 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55546f86]]
2021-03-17 12:11:56,843 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:11:56,916 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:11:57,015 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:11:57,016 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55546f86]
2021-03-17 12:11:57,094 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:11:57,185 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:11:57,185 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).subSequence(-1159000736, -288537487).substring(1288818880, 1035685299)
2021-03-17 12:11:57,185 [main:97] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aab152b]]
2021-03-17 12:11:57,186 [main:133] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aab152b]
2021-03-17 12:11:57,261 [main:298] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-17 12:11:57,261 [main:298] - generating value of type = Boolean true depth = 1
2021-03-17 12:11:57,262 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).dropLastWhile({a: Char -> false})
2021-03-17 12:11:57,262 [main:112] - replacement of toString() of type String is "uozrw"
2021-03-17 12:11:57,335 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-17 12:11:57,336 [main:66] - Compilation checking started
2021-03-17 12:11:57,732 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = false.toString()

fun fu1() = 1.toByte()."uozrw"

fun fu2() = 1.toShort().toString()

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = 1.0F.toString()

fun fu6() = 1.0.toString()

fun fu7() = 'c'.toString()


2021-03-17 12:11:57,732 [main:105] - replacing (1.toShort().toString(), String)
2021-03-17 12:11:57,733 [main:36] - replacing 1.toShort().toString() String
2021-03-17 12:11:57,733 [main:40] - Getting value of type String
2021-03-17 12:11:57,805 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:11:57,805 [main:44] - GENERATED VALUE OF TYPE String = "hbkhb"
2021-03-17 12:11:57,805 [main:47] - GENERATED IS CALL =false
2021-03-17 12:11:57,882 [main:53] - randomType = UInt
2021-03-17 12:11:57,971 [main:298] - generating value of type = UInt true depth = 0
2021-03-17 12:11:58,010 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@56118120]
2021-03-17 12:11:58,084 [main:298] - generating value of type = UByte true depth = 0
2021-03-17 12:11:58,084 [main:133] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f616537]
2021-03-17 12:11:58,158 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:11:58,158 [main:63] - Generated call from random type = (1475777763.toUInt()).compareTo(38.toUByte()).toString(1924665063)
2021-03-17 12:11:58,158 [main:90] - GETTING String from String
2021-03-17 12:11:58,181 [main:97] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27e79453]]
2021-03-17 12:11:58,181 [main:133] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27e79453]
2021-03-17 12:11:58,257 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:11:58,331 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:11:58,332 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).padEnd(1278674302, 'ɐ')
2021-03-17 12:11:58,332 [main:97] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2616f1aa]]
2021-03-17 12:11:58,332 [main:133] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2616f1aa]
2021-03-17 12:11:58,405 [main:298] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-17 12:11:58,405 [main:298] - generating value of type = Boolean true depth = 1
2021-03-17 12:11:58,406 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).filter({a: Char -> false})
2021-03-17 12:11:58,406 [main:97] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f616537]]
2021-03-17 12:11:58,406 [main:133] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6]
2021-03-17 12:11:58,479 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:11:58,479 [main:133] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f616537]
2021-03-17 12:11:58,553 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:11:58,554 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).compareTo("ntdyl").toString(-697312792)
2021-03-17 12:11:58,554 [main:97] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4ec47168], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f616537]]
2021-03-17 12:11:58,554 [main:133] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f616537]
2021-03-17 12:11:58,647 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:11:58,648 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).length.toString(344878572)
2021-03-17 12:11:58,648 [main:97] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31d1acd4]]
2021-03-17 12:11:58,648 [main:133] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31d1acd4]
2021-03-17 12:11:58,741 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:11:58,742 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).takeLast(651796777)
2021-03-17 12:11:58,743 [main:97] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48eb66c6]]
2021-03-17 12:11:58,743 [main:133] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48eb66c6]
2021-03-17 12:11:58,743 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).trimIndent()
2021-03-17 12:11:58,743 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55546f86]]
2021-03-17 12:11:58,743 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:11:58,819 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:11:58,892 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:11:58,893 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55546f86]
2021-03-17 12:11:58,965 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:11:59,039 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:11:59,039 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).subSequence(-1449273773, -287682182).substring(1967184935, -877854246)
2021-03-17 12:11:59,039 [main:97] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b85d020]]
2021-03-17 12:11:59,039 [main:133] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b85d020]
2021-03-17 12:11:59,111 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:11:59,112 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndent("xxbeb")
2021-03-17 12:11:59,112 [main:97] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@552c6ae3]]
2021-03-17 12:11:59,112 [main:133] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@552c6ae3]
2021-03-17 12:11:59,184 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:11:59,275 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:11:59,359 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:11:59,359 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceAfter('疂', "eoptv", "hexwk")
2021-03-17 12:11:59,360 [main:97] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19729eed]]
2021-03-17 12:11:59,360 [main:133] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19729eed]
2021-03-17 12:11:59,434 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:11:59,508 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:11:59,508 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).substringAfterLast('ƴ', "xvvht")
2021-03-17 12:11:59,508 [main:112] - replacement of 1.toShort().toString() of type String is "hbkhb"
2021-03-17 12:11:59,580 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-17 12:11:59,581 [main:66] - Compilation checking started
2021-03-17 12:12:00,042 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = false.toString()

fun fu1() = 1.toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = 1.0F.toString()

fun fu6() = 1.0.toString()

fun fu7() = 'c'.toString()


2021-03-17 12:12:00,042 [main:105] - replacing (toString(), String)
2021-03-17 12:12:00,042 [main:36] - replacing toString() String
2021-03-17 12:12:00,043 [main:40] - Getting value of type String
2021-03-17 12:12:00,120 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:00,121 [main:44] - GENERATED VALUE OF TYPE String = "ewkhe"
2021-03-17 12:12:00,121 [main:47] - GENERATED IS CALL =false
2021-03-17 12:12:00,122 [main:53] - randomType = Boolean
2021-03-17 12:12:00,213 [main:298] - generating value of type = Boolean true depth = 0
2021-03-17 12:12:00,223 [main:133] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@632712f]
2021-03-17 12:12:00,310 [main:298] - generating value of type = Boolean true depth = 0
2021-03-17 12:12:00,310 [main:133] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f616537]
2021-03-17 12:12:00,384 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:00,384 [main:63] - Generated call from random type = (true).compareTo(true).toString(1291269053)
2021-03-17 12:12:00,384 [main:90] - GETTING String from String
2021-03-17 12:12:00,411 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24e42fbc]]
2021-03-17 12:12:00,411 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24e42fbc]
2021-03-17 12:12:00,411 [main:101] - GENERATED CALL = (ss).trim()
2021-03-17 12:12:00,411 [main:97] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48eb66c6]]
2021-03-17 12:12:00,411 [main:133] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48eb66c6]
2021-03-17 12:12:00,411 [main:101] - GENERATED CALL = (ss).trimIndent()
2021-03-17 12:12:00,411 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55546f86]]
2021-03-17 12:12:00,411 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:12:00,484 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:00,557 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:00,558 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55546f86]
2021-03-17 12:12:00,632 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:00,705 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:00,705 [main:101] - GENERATED CALL = (ss).subSequence(1167074321, 1883854735).substring(663345059, -1474465892)
2021-03-17 12:12:00,705 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56aaa1ac]]
2021-03-17 12:12:00,705 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:12:00,778 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:00,853 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:00,853 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56aaa1ac]
2021-03-17 12:12:00,950 [main:298] - generating value of type = Regex false depth = 0
2021-03-17 12:12:01,030 [main:45] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-17 12:12:01,031 [main:63] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-17 12:12:01,264 [main:298] - generating value of type = String true depth = 3
2021-03-17 12:12:01,264 [main:298] - generating value of type = RegexOption false depth = 3
2021-03-17 12:12:01,268 [main:97] - GENERATED = Regex("emjye", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-17 12:12:01,343 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:01,343 [main:101] - GENERATED CALL = (ss).subSequence(1942785321, -1719948707).replaceFirst(Regex("emjye", kotlin.text.RegexOption.IGNORE_CASE), "rmuyl")
2021-03-17 12:12:01,343 [main:97] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353c96cc]]
2021-03-17 12:12:01,344 [main:133] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353c96cc]
2021-03-17 12:12:01,418 [main:298] - generating value of type = CharSequence false depth = 0
2021-03-17 12:12:01,496 [main:298] - generating value of type = Boolean true depth = 0
2021-03-17 12:12:01,496 [main:101] - GENERATED CALL = (ss).commonPrefixWith("itbhw", false)
2021-03-17 12:12:01,496 [main:97] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@152a6d5e]]
2021-03-17 12:12:01,497 [main:133] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@152a6d5e]
2021-03-17 12:12:01,588 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:01,588 [main:101] - GENERATED CALL = (ss).drop(1173005381)
2021-03-17 12:12:01,588 [main:97] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2836a04d]]
2021-03-17 12:12:01,588 [main:133] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2836a04d]
2021-03-17 12:12:01,665 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:01,746 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:01,747 [main:101] - GENERATED CALL = (ss).replaceIndentByMargin("hbjth", "ljdek")
2021-03-17 12:12:01,747 [main:97] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ddfc4]]
2021-03-17 12:12:01,747 [main:133] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ddfc4]
2021-03-17 12:12:01,821 [main:298] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-17 12:12:01,821 [main:298] - generating value of type = Boolean true depth = 1
2021-03-17 12:12:01,821 [main:101] - GENERATED CALL = (ss).filterNot({a: Char -> true})
2021-03-17 12:12:01,821 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353c96cc]]
2021-03-17 12:12:01,822 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:12:01,895 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:01,968 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:01,968 [main:133] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353c96cc]
2021-03-17 12:12:02,040 [main:298] - generating value of type = CharSequence false depth = 0
2021-03-17 12:12:02,116 [main:45] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-17 12:12:02,117 [main:63] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-17 12:12:02,300 [main:298] - generating value of type = CharSequence false depth = 3
2021-03-17 12:12:02,390 [main:45] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-17 12:12:02,391 [main:63] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-17 12:12:02,541 [main:298] - generating value of type = CharSequence false depth = 6
2021-03-17 12:12:02,617 [main:45] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-17 12:12:02,618 [main:63] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-17 12:12:02,767 [main:298] - generating value of type = CharSequence false depth = 9
2021-03-17 12:12:02,771 [main:97] - GENERATED = StringBuilder("kaxpf")
2021-03-17 12:12:02,771 [main:97] - GENERATED = StringBuilder(StringBuilder("kaxpf"))
2021-03-17 12:12:02,771 [main:97] - GENERATED = StringBuilder(StringBuilder(StringBuilder("kaxpf")))
2021-03-17 12:12:02,843 [main:298] - generating value of type = Boolean true depth = 0
2021-03-17 12:12:02,843 [main:101] - GENERATED CALL = (ss).subSequence(1526807036, -1193954211).commonPrefixWith(StringBuilder(StringBuilder(StringBuilder("kaxpf"))), false)
2021-03-17 12:12:02,843 [main:97] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61265893]]
2021-03-17 12:12:02,844 [main:133] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61265893]
2021-03-17 12:12:02,936 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:02,936 [main:101] - GENERATED CALL = (ss).repeat(-177017066)
2021-03-17 12:12:02,936 [main:112] - replacement of toString() of type String is (ss).subSequence(1526807036, -1193954211).commonPrefixWith(StringBuilder(StringBuilder(StringBuilder("kaxpf"))), false)
2021-03-17 12:12:03,012 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:12:03,012 [main:66] - Compilation checking started
2021-03-17 12:12:03,420 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = false.toString()

fun fu1() = 1.toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = 1.0F.toString()

fun fu6() = 1.0.(ss).subSequence(1526807036, -1193954211).commonPrefixWith(StringBuilder(StringBuilder(StringBuilder("kaxpf"))), false)

fun fu7() = 'c'.toString()


2021-03-17 12:12:03,421 [main:105] - replacing (1.0F.toString(), String)
2021-03-17 12:12:03,421 [main:36] - replacing 1.0F.toString() String
2021-03-17 12:12:03,421 [main:40] - Getting value of type String
2021-03-17 12:12:03,493 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:03,494 [main:44] - GENERATED VALUE OF TYPE String = "zkymv"
2021-03-17 12:12:03,494 [main:47] - GENERATED IS CALL =false
2021-03-17 12:12:03,571 [main:53] - randomType = Boolean?
2021-03-17 12:12:03,643 [main:298] - generating value of type = Boolean true depth = 0
2021-03-17 12:12:03,682 [main:133] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@632712f]
2021-03-17 12:12:03,754 [main:298] - generating value of type = Boolean true depth = 0
2021-03-17 12:12:03,755 [main:133] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f616537]
2021-03-17 12:12:03,827 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:03,828 [main:63] - Generated call from random type = (false)?.compareTo(true).toString(-1402522752)
2021-03-17 12:12:03,828 [main:90] - GETTING String from String
2021-03-17 12:12:03,855 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61265893]]
2021-03-17 12:12:03,855 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:12:03,946 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:04,019 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:04,020 [main:133] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61265893]
2021-03-17 12:12:04,092 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:04,092 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).subSequence(-1832509126, 2103052204).repeat(-883228558)
2021-03-17 12:12:04,093 [main:97] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2836a04d]]
2021-03-17 12:12:04,093 [main:133] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2836a04d]
2021-03-17 12:12:04,165 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:04,238 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:04,238 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")
2021-03-17 12:12:04,238 [main:97] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd8ad02]]
2021-03-17 12:12:04,239 [main:133] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd8ad02]
2021-03-17 12:12:04,313 [main:298] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-17 12:12:04,313 [main:298] - generating value of type = Boolean true depth = 1
2021-03-17 12:12:04,314 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).dropWhile({a: Char -> true})
2021-03-17 12:12:04,314 [main:97] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b0694d5]]
2021-03-17 12:12:04,314 [main:133] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8]
2021-03-17 12:12:04,388 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:04,388 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b0694d5]
2021-03-17 12:12:04,389 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).get(-251050791).uppercase()
2021-03-17 12:12:04,389 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6413a5c1]]
2021-03-17 12:12:04,389 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6413a5c1]
2021-03-17 12:12:04,389 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).toLowerCase()
2021-03-17 12:12:04,389 [main:97] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4951c124]]
2021-03-17 12:12:04,389 [main:133] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4951c124]
2021-03-17 12:12:04,464 [main:298] - generating value of type = CharSequence false depth = 0
2021-03-17 12:12:04,541 [main:298] - generating value of type = Boolean true depth = 0
2021-03-17 12:12:04,541 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).commonSuffixWith("srhpn", true)
2021-03-17 12:12:04,541 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e90d312]]
2021-03-17 12:12:04,541 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e90d312]
2021-03-17 12:12:04,634 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:04,711 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:04,804 [main:298] - generating value of type = CharSequence false depth = 0
2021-03-17 12:12:04,809 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceRange(1065547030, 209079377, "ijlte")
2021-03-17 12:12:04,809 [main:97] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50edc1cc]]
2021-03-17 12:12:04,809 [main:133] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50edc1cc]
2021-03-17 12:12:04,883 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:04,956 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:04,957 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).substringAfter('省', "ekrzg")
2021-03-17 12:12:04,957 [main:97] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48eb66c6]]
2021-03-17 12:12:04,957 [main:133] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48eb66c6]
2021-03-17 12:12:04,958 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).trimIndent()
2021-03-17 12:12:04,958 [main:97] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e0acb5]]
2021-03-17 12:12:04,958 [main:133] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e0acb5]
2021-03-17 12:12:05,032 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:05,105 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:05,106 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).padStart(1273041196, '瀶')
2021-03-17 12:12:05,106 [main:112] - replacement of 1.0F.toString() of type String is (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")
2021-03-17 12:12:05,177 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:12:05,178 [main:66] - Compilation checking started
2021-03-17 12:12:05,814 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = false.toString()

fun fu1() = 1.toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = 1.0.toString()

fun fu7() = 'c'.toString()


2021-03-17 12:12:05,815 [main:105] - replacing (toByte(), Byte)
2021-03-17 12:12:05,815 [main:36] - replacing toByte() Byte
2021-03-17 12:12:05,815 [main:40] - Getting value of type Byte
2021-03-17 12:12:05,902 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:12:05,903 [main:44] - GENERATED VALUE OF TYPE Byte = -109
2021-03-17 12:12:05,903 [main:47] - GENERATED IS CALL =false
2021-03-17 12:12:05,995 [main:53] - randomType = UInt
2021-03-17 12:12:06,071 [main:298] - generating value of type = UInt true depth = 0
2021-03-17 12:12:06,105 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3af29c3e]
2021-03-17 12:12:06,106 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.takeHighestOneBit(): kotlin.Byte defined in kotlin[DeserializedSimpleFunctionDescriptor@45c21bc8]
2021-03-17 12:12:06,106 [main:63] - Generated call from random type = (614260019.toUInt()).toByte().takeHighestOneBit()
2021-03-17 12:12:06,107 [main:90] - GETTING Byte from String
2021-03-17 12:12:06,129 [main:97] - Case = [public fun kotlin.String.toByte(): kotlin.Byte defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a7d645]]
2021-03-17 12:12:06,129 [main:133] - GENERATING call of type public fun kotlin.String.toByte(): kotlin.Byte defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a7d645]
2021-03-17 12:12:06,130 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).toByte()
2021-03-17 12:12:06,130 [main:97] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8], public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@b8e4b53]]
2021-03-17 12:12:06,130 [main:133] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8]
2021-03-17 12:12:06,210 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:06,211 [main:133] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@b8e4b53]
2021-03-17 12:12:06,211 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).get(1308138744).toByte()
2021-03-17 12:12:06,211 [main:97] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6], public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5065963c]]
2021-03-17 12:12:06,211 [main:133] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6]
2021-03-17 12:12:06,287 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:06,287 [main:133] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5065963c]
2021-03-17 12:12:06,287 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).compareTo("uvxko").toByte()
2021-03-17 12:12:06,288 [main:97] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Int.mod(other: kotlin.Byte): kotlin.Byte defined in kotlin[DeserializedSimpleFunctionDescriptor@3c7ca576]]
2021-03-17 12:12:06,288 [main:133] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6]
2021-03-17 12:12:06,362 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:06,363 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Int.mod(other: kotlin.Byte): kotlin.Byte defined in kotlin[DeserializedSimpleFunctionDescriptor@3c7ca576]
2021-03-17 12:12:06,438 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:12:06,439 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).compareTo("lmgtn").mod(-31)
2021-03-17 12:12:06,439 [main:97] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4ec47168], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Int.mod(other: kotlin.Byte): kotlin.Byte defined in kotlin[DeserializedSimpleFunctionDescriptor@3c7ca576]]
2021-03-17 12:12:06,439 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Int.mod(other: kotlin.Byte): kotlin.Byte defined in kotlin[DeserializedSimpleFunctionDescriptor@3c7ca576]
2021-03-17 12:12:06,515 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:12:06,516 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).length.mod(103)
2021-03-17 12:12:06,516 [main:97] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4ec47168], public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5065963c]]
2021-03-17 12:12:06,516 [main:133] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5065963c]
2021-03-17 12:12:06,516 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).length.toByte()
2021-03-17 12:12:06,516 [main:112] - replacement of toByte() of type Byte is (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).get(1308138744).toByte()
2021-03-17 12:12:06,591 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:12:06,591 [main:66] - Compilation checking started
2021-03-17 12:12:07,015 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = false.toString()

fun fu1() = 1.(test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).get(1308138744).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = 1.0.toString()

fun fu7() = 'c'.toString()


2021-03-17 12:12:07,016 [main:105] - replacing (1.0, Double)
2021-03-17 12:12:07,016 [main:36] - replacing 1.0 Double
2021-03-17 12:12:07,016 [main:40] - Getting value of type Double
2021-03-17 12:12:07,090 [main:298] - generating value of type = Double true depth = 0
2021-03-17 12:12:07,091 [main:44] - GENERATED VALUE OF TYPE Double = 0.19181430442390235
2021-03-17 12:12:07,091 [main:47] - GENERATED IS CALL =false
2021-03-17 12:12:07,092 [main:53] - randomType = String
2021-03-17 12:12:07,166 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:07,185 [main:133] - GENERATING call of type public inline fun kotlin.CharSequence.sumByDouble(selector: (kotlin.Char) -> kotlin.Double): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a9e1927]
2021-03-17 12:12:07,260 [main:298] - generating value of type = Function1<Char, Double> false depth = 0
2021-03-17 12:12:07,260 [main:298] - generating value of type = Double true depth = 1
2021-03-17 12:12:07,261 [main:63] - Generated call from random type = ("gwops").sumByDouble({a: Char -> 0.48070916417079623})
2021-03-17 12:12:07,262 [main:90] - GETTING Double from String
2021-03-17 12:12:07,285 [main:97] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4ec47168], public open fun toDouble(): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@60bae387]]
2021-03-17 12:12:07,285 [main:133] - GENERATING call of type public open fun toDouble(): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@60bae387]
2021-03-17 12:12:07,286 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).length.toDouble()
2021-03-17 12:12:07,286 [main:97] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4ec47168], public final operator fun times(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5b31570]]
2021-03-17 12:12:07,286 [main:133] - GENERATING call of type public final operator fun times(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5b31570]
2021-03-17 12:12:07,362 [main:298] - generating value of type = Double true depth = 0
2021-03-17 12:12:07,363 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).length.times(0.24067177226422998)
2021-03-17 12:12:07,363 [main:97] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6], public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@76a821f4]]
2021-03-17 12:12:07,363 [main:133] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6]
2021-03-17 12:12:07,441 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:07,442 [main:133] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@76a821f4]
2021-03-17 12:12:07,519 [main:298] - generating value of type = Double true depth = 0
2021-03-17 12:12:07,519 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).compareTo("bfxdx").div(0.15334690698552667)
2021-03-17 12:12:07,520 [main:97] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4ec47168], public final operator fun plus(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5b2c0545]]
2021-03-17 12:12:07,520 [main:133] - GENERATING call of type public final operator fun plus(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5b2c0545]
2021-03-17 12:12:07,597 [main:298] - generating value of type = Double true depth = 0
2021-03-17 12:12:07,597 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).length.plus(0.7834107709989844)
2021-03-17 12:12:07,598 [main:97] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.minOf(selector: (kotlin.Char) -> kotlin.Double): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4de8fcc7]]
2021-03-17 12:12:07,598 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.minOf(selector: (kotlin.Char) -> kotlin.Double): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4de8fcc7]
2021-03-17 12:12:07,673 [main:298] - generating value of type = Function1<Char, Double> false depth = 0
2021-03-17 12:12:07,673 [main:298] - generating value of type = Double true depth = 1
2021-03-17 12:12:07,674 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).minOf({a: Char -> 0.8268834379866433})
2021-03-17 12:12:07,674 [main:97] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6], public final operator fun times(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5b31570]]
2021-03-17 12:12:07,674 [main:133] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6]
2021-03-17 12:12:07,748 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:07,749 [main:133] - GENERATING call of type public final operator fun times(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5b31570]
2021-03-17 12:12:07,823 [main:298] - generating value of type = Double true depth = 0
2021-03-17 12:12:07,824 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).compareTo("ilkoq").times(0.5209117686743268)
2021-03-17 12:12:07,824 [main:97] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@631cc71a]]
2021-03-17 12:12:07,824 [main:133] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6]
2021-03-17 12:12:07,921 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:07,922 [main:133] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@631cc71a]
2021-03-17 12:12:08,018 [main:298] - generating value of type = Double true depth = 0
2021-03-17 12:12:08,019 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).compareTo("pokvu").rem(0.61739440868639)
2021-03-17 12:12:08,019 [main:97] - Case = [public inline fun kotlin.CharSequence.sumByDouble(selector: (kotlin.Char) -> kotlin.Double): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a9e1927]]
2021-03-17 12:12:08,019 [main:133] - GENERATING call of type public inline fun kotlin.CharSequence.sumByDouble(selector: (kotlin.Char) -> kotlin.Double): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a9e1927]
2021-03-17 12:12:08,099 [main:298] - generating value of type = Function1<Char, Double> false depth = 0
2021-03-17 12:12:08,099 [main:298] - generating value of type = Double true depth = 1
2021-03-17 12:12:08,100 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).sumByDouble({a: Char -> 0.5683147212878698})
2021-03-17 12:12:08,100 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.minOf(selector: (kotlin.Char) -> kotlin.Double): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4de8fcc7]]
2021-03-17 12:12:08,100 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:12:08,175 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:08,250 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:08,250 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.minOf(selector: (kotlin.Char) -> kotlin.Double): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4de8fcc7]
2021-03-17 12:12:08,325 [main:298] - generating value of type = Function1<Char, Double> false depth = 0
2021-03-17 12:12:08,326 [main:298] - generating value of type = Double true depth = 1
2021-03-17 12:12:08,326 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).subSequence(-2109151582, -650019425).minOf({a: Char -> 0.058610009673138896})
2021-03-17 12:12:08,327 [main:97] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8], public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@199b49ba]]
2021-03-17 12:12:08,327 [main:133] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8]
2021-03-17 12:12:08,402 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:08,402 [main:133] - GENERATING call of type public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@199b49ba]
2021-03-17 12:12:08,402 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).get(1776198856).toDouble()
2021-03-17 12:12:08,403 [main:112] - replacement of 1.0 of type Double is (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).compareTo("pokvu").rem(0.61739440868639)
2021-03-17 12:12:08,477 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:12:08,477 [main:66] - Compilation checking started
2021-03-17 12:12:09,014 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = false.toString()

fun fu1() = 1.toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).compareTo("pokvu").rem(0.61739440868639).toString()

fun fu7() = 'c'.toString()


2021-03-17 12:12:09,014 [main:105] - replacing (toString(), String)
2021-03-17 12:12:09,014 [main:36] - replacing toString() String
2021-03-17 12:12:09,014 [main:40] - Getting value of type String
2021-03-17 12:12:09,116 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:09,116 [main:44] - GENERATED VALUE OF TYPE String = "xbhst"
2021-03-17 12:12:09,117 [main:47] - GENERATED IS CALL =false
2021-03-17 12:12:09,448 [main:53] - randomType = LinkedHashMap<Map<UInt?, Int>, Long>
2021-03-17 12:12:09,524 [main:298] - generating value of type = LinkedHashMap<Map<UInt?, Int>, Long> false depth = 0
2021-03-17 12:12:09,606 [main:45] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Map<UInt?, Int>, Long>): LkedHashMap<Map<UInt?, Int>, Long> = TODO()
2021-03-17 12:12:09,608 [main:63] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Map<UInt?, Int>, Long>): LkedHashMap<Map<UInt?, Int>, Long> = TODO()
2021-03-17 12:12:09,686 [main:298] - generating value of type = Pair<Map<UInt?, Int>, Long> false depth = 3
2021-03-17 12:12:09,769 [main:45] - GENERATING CALL OF fun <A, B> Pair(first: Map<UInt?, Int>, second: Long): Pair<Map<UInt?, Int>, Long> = TODO()
2021-03-17 12:12:09,770 [main:63] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Map<UInt?, Int>, second: Long): Pair<Map<UInt?, Int>, Long> = TODO()
2021-03-17 12:12:09,850 [main:298] - generating value of type = Map<UInt?, Int> false depth = 6
2021-03-17 12:12:09,933 [main:45] - GENERATING CALL OF fun <K, V> mapOf(pairs: Pair<UInt?, Int>): Map<UInt?, Int> = TODO()
2021-03-17 12:12:09,934 [main:63] - WITHOUT TYPE PARAMS = fun <K, V> mapOf(pairs: Pair<UInt?, Int>): Map<UInt?, Int> = TODO()
2021-03-17 12:12:10,071 [main:298] - generating value of type = Pair<UInt?, Int> false depth = 9
2021-03-17 12:12:10,160 [main:45] - GENERATING CALL OF fun <A, B> Pair(first: UInt?, second: Int): Pair<UInt?, Int> = TODO()
2021-03-17 12:12:10,162 [main:63] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UInt?, second: Int): Pair<UInt?, Int> = TODO()
2021-03-17 12:12:10,264 [main:298] - generating value of type = UInt true depth = 12
2021-03-17 12:12:10,265 [main:298] - generating value of type = Int true depth = 12
2021-03-17 12:12:10,265 [main:97] - GENERATED = Pair<UInt?, Int>(528414601.toUInt(), 281335576)
2021-03-17 12:12:10,265 [main:97] - GENERATED = mapOf<UInt?, Int>(Pair<UInt?, Int>(528414601.toUInt(), 281335576))
2021-03-17 12:12:10,265 [main:298] - generating value of type = Long true depth = 6
2021-03-17 12:12:10,266 [main:97] - GENERATED = Pair<Map<UInt?, Int>, Long>(mapOf<UInt?, Int>(Pair<UInt?, Int>(528414601.toUInt(), 281335576)), -7092033701313694364)
2021-03-17 12:12:10,266 [main:97] - GENERATED = linkedMapOf<Map<UInt?, Int>, Long>(Pair<Map<UInt?, Int>, Long>(mapOf<UInt?, Int>(Pair<UInt?, Int>(528414601.toUInt(), 281335576)), -7092033701313694364))
2021-03-17 12:12:10,496 [main:133] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f616537]
2021-03-17 12:12:10,581 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:10,581 [main:63] - Generated call from random type = (linkedMapOf<Map<UInt?, Int>, Long>(Pair<Map<UInt?, Int>, Long>(mapOf<UInt?, Int>(Pair<UInt?, Int>(528414601.toUInt(), 281335576)), -7092033701313694364))).size.toString(-2097199360)
2021-03-17 12:12:10,582 [main:90] - GETTING String from String
2021-03-17 12:12:10,616 [main:97] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2616f1aa]]
2021-03-17 12:12:10,616 [main:133] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2616f1aa]
2021-03-17 12:12:10,695 [main:298] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-17 12:12:10,696 [main:298] - generating value of type = Boolean true depth = 1
2021-03-17 12:12:10,696 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).filter({a: Char -> false})
2021-03-17 12:12:10,697 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353c96cc]]
2021-03-17 12:12:10,697 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:12:10,775 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:10,855 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:10,855 [main:133] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353c96cc]
2021-03-17 12:12:10,933 [main:298] - generating value of type = CharSequence false depth = 0
2021-03-17 12:12:11,018 [main:45] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-17 12:12:11,020 [main:63] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-17 12:12:11,230 [main:298] - generating value of type = Int true depth = 3
2021-03-17 12:12:11,231 [main:97] - GENERATED = StringBuilder(567432397)
2021-03-17 12:12:11,313 [main:298] - generating value of type = Boolean true depth = 0
2021-03-17 12:12:11,314 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).subSequence(2061796226, 900041597).commonPrefixWith(StringBuilder(567432397), false)
2021-03-17 12:12:11,314 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dfa8f00]]
2021-03-17 12:12:11,314 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dfa8f00]
2021-03-17 12:12:11,399 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:11,400 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).concat("fjwdq")
2021-03-17 12:12:11,400 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56aaa1ac]]
2021-03-17 12:12:11,400 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:12:11,477 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:11,555 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:11,556 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56aaa1ac]
2021-03-17 12:12:11,631 [main:298] - generating value of type = Regex false depth = 0
2021-03-17 12:12:11,710 [main:45] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-17 12:12:11,711 [main:63] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-17 12:12:11,868 [main:298] - generating value of type = String true depth = 3
2021-03-17 12:12:11,869 [main:97] - GENERATED = Regex("wbvue")
2021-03-17 12:12:11,945 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:11,946 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).subSequence(1788743989, -1364668719).replaceFirst(Regex("wbvue"), "jputp")
2021-03-17 12:12:11,946 [main:97] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44d1d7ff]]
2021-03-17 12:12:11,946 [main:133] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44d1d7ff]
2021-03-17 12:12:12,021 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:12,022 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).trimMargin("vhfir")
2021-03-17 12:12:12,022 [main:97] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17cb5b8f]]
2021-03-17 12:12:12,022 [main:133] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17cb5b8f]
2021-03-17 12:12:12,123 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:12,124 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).dropLast(2067758122)
2021-03-17 12:12:12,124 [main:97] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ba98907]]
2021-03-17 12:12:12,124 [main:133] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ba98907]
2021-03-17 12:12:12,207 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:12,306 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:12,384 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:12,385 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceBeforeLast('❨', "jkhqw", "hqdxn")
2021-03-17 12:12:12,385 [main:97] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@358eb8f6]]
2021-03-17 12:12:12,385 [main:133] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@358eb8f6]
2021-03-17 12:12:12,461 [main:298] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-17 12:12:12,461 [main:298] - generating value of type = Boolean true depth = 1
2021-03-17 12:12:12,462 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).filterIndexed({a: Int, b: Char -> false})
2021-03-17 12:12:12,462 [main:97] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ddfc4]]
2021-03-17 12:12:12,462 [main:133] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ddfc4]
2021-03-17 12:12:12,539 [main:298] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-17 12:12:12,539 [main:298] - generating value of type = Boolean true depth = 1
2021-03-17 12:12:12,540 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).filterNot({a: Char -> false})
2021-03-17 12:12:12,540 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61265893]]
2021-03-17 12:12:12,540 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:12:12,616 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:12,693 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:12,694 [main:133] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61265893]
2021-03-17 12:12:12,769 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:12,770 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).subSequence(-762294999, -99139603).repeat(1822020916)
2021-03-17 12:12:12,770 [main:112] - replacement of toString() of type String is test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))
2021-03-17 12:12:12,846 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:12:12,846 [main:66] - Compilation checking started
2021-03-17 12:12:13,283 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = false.toString()

fun fu1() = 1.toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).compareTo("pokvu").rem(0.61739440868639).toString()

fun fu7() = 'c'.toString()


2021-03-17 12:12:13,283 [main:105] - replacing ((test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).compareTo("pokvu").rem(0.61739440868639).toString(), String)
2021-03-17 12:12:13,283 [main:36] - replacing (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).compareTo("pokvu").rem(0.61739440868639).toString() String
2021-03-17 12:12:13,283 [main:40] - Getting value of type String
2021-03-17 12:12:13,359 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:13,360 [main:44] - GENERATED VALUE OF TYPE String = "yquru"
2021-03-17 12:12:13,360 [main:47] - GENERATED IS CALL =false
2021-03-17 12:12:14,081 [main:53] - randomType = Function2<Map<Short, Function1<ULong, ULong>>, UInt, UInt?>
2021-03-17 12:12:14,159 [main:298] - generating value of type = Function2<Map<Short, Function1<ULong, ULong>>, UInt, UInt?> false depth = 0
2021-03-17 12:12:14,159 [main:298] - generating value of type = UInt true depth = 1
2021-03-17 12:12:14,179 [main:90] - GETTING String from String
2021-03-17 12:12:14,204 [main:97] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@275e239a]]
2021-03-17 12:12:14,205 [main:133] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@275e239a]
2021-03-17 12:12:14,309 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:14,310 [main:101] - GENERATED CALL = (ss).take(-930646136)
2021-03-17 12:12:14,310 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55546f86]]
2021-03-17 12:12:14,310 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:12:14,395 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:14,488 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:14,489 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55546f86]
2021-03-17 12:12:14,572 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:14,650 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:14,651 [main:101] - GENERATED CALL = (ss).subSequence(1339527083, -1263787454).substring(790076115, -1888592793)
2021-03-17 12:12:14,651 [main:97] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@552c6ae3]]
2021-03-17 12:12:14,651 [main:133] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@552c6ae3]
2021-03-17 12:12:14,731 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:14,809 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:14,885 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:14,885 [main:101] - GENERATED CALL = (ss).replaceAfter('꭯', "pthxg", "uczcr")
2021-03-17 12:12:14,886 [main:97] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77b30a82]]
2021-03-17 12:12:14,886 [main:133] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77b30a82]
2021-03-17 12:12:14,962 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:15,042 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:15,042 [main:101] - GENERATED CALL = (ss).substringBeforeLast('뷀', "pgjkh")
2021-03-17 12:12:15,043 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50b5bc0a]]
2021-03-17 12:12:15,043 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50b5bc0a]
2021-03-17 12:12:15,178 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:15,297 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:15,298 [main:101] - GENERATED CALL = (ss).removeRange(353188840, -911348553)
2021-03-17 12:12:15,298 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@722db6bf]]
2021-03-17 12:12:15,298 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@722db6bf]
2021-03-17 12:12:15,298 [main:101] - GENERATED CALL = (ss).reversed()
2021-03-17 12:12:15,298 [main:97] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78058bb4]]
2021-03-17 12:12:15,298 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78058bb4]
2021-03-17 12:12:15,299 [main:101] - GENERATED CALL = (ss).uppercase()
2021-03-17 12:12:15,299 [main:97] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@565782bc]]
2021-03-17 12:12:15,299 [main:133] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@565782bc]
2021-03-17 12:12:15,412 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:15,490 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:15,567 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:15,568 [main:101] - GENERATED CALL = (ss).replaceAfterLast('앎', "fwzwi", "ynmnx")
2021-03-17 12:12:15,568 [main:97] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e0acb5]]
2021-03-17 12:12:15,568 [main:133] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e0acb5]
2021-03-17 12:12:15,645 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:15,721 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:15,722 [main:101] - GENERATED CALL = (ss).padStart(-2125543424, '淟')
2021-03-17 12:12:15,722 [main:97] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b0694d5]]
2021-03-17 12:12:15,722 [main:133] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8]
2021-03-17 12:12:15,797 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:15,798 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b0694d5]
2021-03-17 12:12:15,798 [main:101] - GENERATED CALL = (ss).get(816488742).uppercase()
2021-03-17 12:12:15,798 [main:112] - replacement of (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).compareTo("pokvu").rem(0.61739440868639).toString() of type String is (ss).subSequence(1339527083, -1263787454).substring(790076115, -1888592793)
2021-03-17 12:12:15,877 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:12:15,877 [main:66] - Compilation checking started
2021-03-17 12:12:16,292 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = false.toString()

fun fu1() = 1.toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (ss).subSequence(1339527083, -1263787454).substring(790076115, -1888592793)

fun fu7() = 'c'.toString()


2021-03-17 12:12:16,292 [main:105] - replacing (toString(), String)
2021-03-17 12:12:16,292 [main:36] - replacing toString() String
2021-03-17 12:12:16,292 [main:40] - Getting value of type String
2021-03-17 12:12:16,368 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:16,369 [main:44] - GENERATED VALUE OF TYPE String = "xrqyy"
2021-03-17 12:12:16,369 [main:47] - GENERATED IS CALL =false
2021-03-17 12:12:16,472 [main:53] - randomType = Long?
2021-03-17 12:12:16,547 [main:298] - generating value of type = Long true depth = 0
2021-03-17 12:12:16,605 [main:133] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4e248c8b]
2021-03-17 12:12:16,605 [main:133] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30291238]
2021-03-17 12:12:16,687 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:16,687 [main:63] - Generated call from random type = (-8609671303490728153)?.toLong().toString(-191231617)
2021-03-17 12:12:16,688 [main:90] - GETTING String from String
2021-03-17 12:12:16,722 [main:97] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ddfc4]]
2021-03-17 12:12:16,722 [main:133] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ddfc4]
2021-03-17 12:12:16,804 [main:298] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-17 12:12:16,805 [main:298] - generating value of type = Boolean true depth = 1
2021-03-17 12:12:16,805 [main:101] - GENERATED CALL = (ss).filterNot({a: Char -> false})
2021-03-17 12:12:16,806 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@82daf5c]]
2021-03-17 12:12:16,806 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@82daf5c]
2021-03-17 12:12:16,806 [main:101] - GENERATED CALL = (ss).trimStart()
2021-03-17 12:12:16,806 [main:97] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@314ad0a5]]
2021-03-17 12:12:16,806 [main:133] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@314ad0a5]
2021-03-17 12:12:16,887 [main:298] - generating value of type = CharSequence false depth = 0
2021-03-17 12:12:16,891 [main:101] - GENERATED CALL = (ss).removePrefix(StringBuilder())
2021-03-17 12:12:16,892 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55546f86]]
2021-03-17 12:12:16,892 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:12:16,971 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:17,049 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:17,050 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55546f86]
2021-03-17 12:12:17,127 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:17,204 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:17,204 [main:101] - GENERATED CALL = (ss).subSequence(1219578540, 1455682064).substring(-1481719140, 2101005033)
2021-03-17 12:12:17,205 [main:97] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aab152b]]
2021-03-17 12:12:17,205 [main:133] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aab152b]
2021-03-17 12:12:17,281 [main:298] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-17 12:12:17,282 [main:298] - generating value of type = Boolean true depth = 1
2021-03-17 12:12:17,283 [main:101] - GENERATED CALL = (ss).dropLastWhile({a: Char -> true})
2021-03-17 12:12:17,283 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72f91e3a]]
2021-03-17 12:12:17,283 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:12:17,359 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:17,436 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:17,436 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72f91e3a]
2021-03-17 12:12:17,537 [main:298] - generating value of type = Regex false depth = 0
2021-03-17 12:12:17,622 [main:45] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-17 12:12:17,623 [main:63] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-17 12:12:17,873 [main:298] - generating value of type = String true depth = 3
2021-03-17 12:12:17,873 [main:298] - generating value of type = Set<RegexOption> false depth = 3
2021-03-17 12:12:17,954 [main:45] - GENERATING CALL OF fun <E> buildSet(capacity: kotlin.Int, builderAction: kotlin.collections.MutableSet<RegexOption>.()->kotlin.Unit): Set<RegexOption> = TODO()
2021-03-17 12:12:17,955 [main:63] - WITHOUT TYPE PARAMS = fun <E> buildSet(capacity: kotlin.Int, builderAction: kotlin.collections.MutableSet<RegexOption>.()->kotlin.Unit): Set<RegexOption> = TODO()
2021-03-17 12:12:18,194 [main:298] - generating value of type = Int true depth = 6
2021-03-17 12:12:18,194 [main:298] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<RegexOption>, Unit> false depth = 6
2021-03-17 12:12:18,195 [main:298] - generating value of type = Unit false depth = 7
2021-03-17 12:12:18,278 [main:45] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-17 12:12:18,280 [main:63] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-17 12:12:18,558 [main:298] - generating value of type = Boolean true depth = 10
2021-03-17 12:12:18,559 [main:298] - generating value of type = Function0<Any> false depth = 10
2021-03-17 12:12:18,559 [main:298] - generating value of type = Any false depth = 11
2021-03-17 12:12:18,560 [main:97] - GENERATED = check(true, { "beyfy"})
2021-03-17 12:12:18,560 [main:97] - GENERATED = buildSet<RegexOption>(1784246151, { check(true, { "beyfy"})})
2021-03-17 12:12:18,560 [main:97] - GENERATED = Regex("xkcrd", buildSet<RegexOption>(1784246151, { check(true, { "beyfy"})}))
2021-03-17 12:12:18,644 [main:298] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-17 12:12:18,645 [main:298] - generating value of type = CharSequence false depth = 1
2021-03-17 12:12:18,649 [main:101] - GENERATED CALL = (ss).subSequence(-1758857990, 1913788810).replace(Regex("xkcrd", buildSet<RegexOption>(1784246151, { check(true, { "beyfy"})})), {a: MatchResult -> "rcarg"})
2021-03-17 12:12:18,649 [main:97] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21b5c26c]]
2021-03-17 12:12:18,649 [main:133] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21b5c26c]
2021-03-17 12:12:18,726 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:18,801 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:18,877 [main:298] - generating value of type = Boolean true depth = 0
2021-03-17 12:12:18,878 [main:101] - GENERATED CALL = (ss).replace('ꍶ', '暈', false)
2021-03-17 12:12:18,878 [main:97] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@275e239a]]
2021-03-17 12:12:18,878 [main:133] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@275e239a]
2021-03-17 12:12:18,954 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:18,954 [main:101] - GENERATED CALL = (ss).take(-230791919)
2021-03-17 12:12:18,954 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4951c124]]
2021-03-17 12:12:18,954 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:12:19,029 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:19,105 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:19,106 [main:133] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4951c124]
2021-03-17 12:12:19,181 [main:298] - generating value of type = CharSequence false depth = 0
2021-03-17 12:12:19,260 [main:298] - generating value of type = Boolean true depth = 0
2021-03-17 12:12:19,260 [main:101] - GENERATED CALL = (ss).subSequence(1395648832, -1355186923).commonSuffixWith("pefoj", true)
2021-03-17 12:12:19,260 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24e42fbc]]
2021-03-17 12:12:19,261 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24e42fbc]
2021-03-17 12:12:19,261 [main:101] - GENERATED CALL = (ss).trim()
2021-03-17 12:12:19,261 [main:112] - replacement of toString() of type String is (ss).filterNot({a: Char -> false})
2021-03-17 12:12:19,335 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:12:19,336 [main:66] - Compilation checking started
2021-03-17 12:12:19,762 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = false.toString()

fun fu1() = 1.toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).compareTo("pokvu").rem(0.61739440868639).(ss).filterNot({a: Char -> false})

fun fu7() = 'c'.toString()


2021-03-17 12:12:19,762 [main:105] - replacing ((test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).compareTo("pokvu").rem(0.61739440868639).toString(), String)
2021-03-17 12:12:19,762 [main:36] - replacing (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).compareTo("pokvu").rem(0.61739440868639).toString() String
2021-03-17 12:12:19,762 [main:40] - Getting value of type String
2021-03-17 12:12:19,841 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:19,841 [main:44] - GENERATED VALUE OF TYPE String = "kgqnp"
2021-03-17 12:12:19,842 [main:47] - GENERATED IS CALL =false
2021-03-17 12:12:20,008 [main:53] - randomType = HashMap<Float, Double>
2021-03-17 12:12:20,084 [main:298] - generating value of type = HashMap<Float, Double> false depth = 0
2021-03-17 12:12:20,163 [main:45] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<Float, Double> = TODO()
2021-03-17 12:12:20,164 [main:63] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<Float, Double> = TODO()
2021-03-17 12:12:20,242 [main:97] - GENERATED = hashMapOf<Float, Double>()
2021-03-17 12:12:20,372 [main:133] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f616537]
2021-03-17 12:12:20,450 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:20,451 [main:63] - Generated call from random type = (hashMapOf<Float, Double>()).size.toString(1815761518)
2021-03-17 12:12:20,451 [main:112] - replacement of (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).compareTo("pokvu").rem(0.61739440868639).toString() of type String is (hashMapOf<Float, Double>()).size.toString(1815761518)
2021-03-17 12:12:20,528 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:12:20,528 [main:66] - Compilation checking started
2021-03-17 12:12:21,106 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = false.toString()

fun fu1() = 1.toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(1815761518)

fun fu7() = 'c'.toString()


2021-03-17 12:12:21,106 [main:105] - replacing (toString(), String)
2021-03-17 12:12:21,106 [main:36] - replacing toString() String
2021-03-17 12:12:21,106 [main:40] - Getting value of type String
2021-03-17 12:12:21,188 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:21,188 [main:44] - GENERATED VALUE OF TYPE String = "xtfyb"
2021-03-17 12:12:21,189 [main:47] - GENERATED IS CALL =false
2021-03-17 12:12:21,189 [main:53] - randomType = Byte
2021-03-17 12:12:21,273 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:12:21,330 [main:133] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3fd822bc]
2021-03-17 12:12:21,412 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:12:21,413 [main:133] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f616537]
2021-03-17 12:12:21,496 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:21,497 [main:63] - Generated call from random type = (110).compareTo(16).toString(1154625218)
2021-03-17 12:12:21,497 [main:90] - GETTING String from String
2021-03-17 12:12:21,530 [main:97] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b85d020]]
2021-03-17 12:12:21,530 [main:133] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b85d020]
2021-03-17 12:12:21,608 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:21,609 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndent("jojkx")
2021-03-17 12:12:21,609 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dfa8f00]]
2021-03-17 12:12:21,609 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dfa8f00]
2021-03-17 12:12:21,686 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:21,686 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).concat("kkosu")
2021-03-17 12:12:21,687 [main:97] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@314ad0a5]]
2021-03-17 12:12:21,687 [main:133] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@314ad0a5]
2021-03-17 12:12:21,763 [main:298] - generating value of type = CharSequence false depth = 0
2021-03-17 12:12:21,767 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).removePrefix(StringBuilder())
2021-03-17 12:12:21,767 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b3459af]]
2021-03-17 12:12:21,767 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b3459af]
2021-03-17 12:12:21,857 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:21,857 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).substring(57467511)
2021-03-17 12:12:21,857 [main:97] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47396d16]]
2021-03-17 12:12:21,858 [main:133] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47396d16]
2021-03-17 12:12:21,936 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:21,936 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).prependIndent("vyodm")
2021-03-17 12:12:21,936 [main:97] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@703ebc43]]
2021-03-17 12:12:21,936 [main:133] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@703ebc43]
2021-03-17 12:12:22,013 [main:298] - generating value of type = CharSequence false depth = 0
2021-03-17 12:12:22,016 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).removeSuffix("cxtev")
2021-03-17 12:12:22,016 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@722db6bf]]
2021-03-17 12:12:22,016 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@722db6bf]
2021-03-17 12:12:22,017 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).reversed()
2021-03-17 12:12:22,017 [main:97] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36517812]]
2021-03-17 12:12:22,017 [main:133] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8]
2021-03-17 12:12:22,093 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:22,093 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36517812]
2021-03-17 12:12:22,094 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).get(-1042944381).lowercase()
2021-03-17 12:12:22,094 [main:97] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5487590]]
2021-03-17 12:12:22,094 [main:133] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5487590]
2021-03-17 12:12:22,187 [main:298] - generating value of type = Any false depth = 0
2021-03-17 12:12:22,188 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).plus("ksdbw")
2021-03-17 12:12:22,188 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4951c124]]
2021-03-17 12:12:22,188 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:12:22,269 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:22,374 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:22,375 [main:133] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4951c124]
2021-03-17 12:12:22,464 [main:298] - generating value of type = CharSequence false depth = 0
2021-03-17 12:12:22,543 [main:45] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-17 12:12:22,544 [main:63] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-17 12:12:22,700 [main:298] - generating value of type = String true depth = 3
2021-03-17 12:12:22,701 [main:97] - GENERATED = StringBuilder("ukplc")
2021-03-17 12:12:22,777 [main:298] - generating value of type = Boolean true depth = 0
2021-03-17 12:12:22,777 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).subSequence(-472845406, 66607355).commonSuffixWith(StringBuilder("ukplc"), false)
2021-03-17 12:12:22,777 [main:112] - replacement of toString() of type String is (110).compareTo(16).toString(1154625218)
2021-03-17 12:12:22,852 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:12:22,853 [main:66] - Compilation checking started
2021-03-17 12:12:23,262 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = false.toString()

fun fu1() = 1.toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.(110).compareTo(16).toString(1154625218)

fun fu5() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(1815761518)

fun fu7() = 'c'.toString()


2021-03-17 12:12:23,263 [main:105] - replacing (false.toString(), String)
2021-03-17 12:12:23,263 [main:36] - replacing false.toString() String
2021-03-17 12:12:23,263 [main:40] - Getting value of type String
2021-03-17 12:12:23,340 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:23,340 [main:44] - GENERATED VALUE OF TYPE String = "xviyf"
2021-03-17 12:12:23,340 [main:47] - GENERATED IS CALL =false
2021-03-17 12:12:23,341 [main:53] - randomType = Double
2021-03-17 12:12:23,418 [main:298] - generating value of type = Double true depth = 0
2021-03-17 12:12:23,456 [main:133] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@456a4033]
2021-03-17 12:12:23,456 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36517812]
2021-03-17 12:12:23,457 [main:63] - Generated call from random type = (0.8257279108421159).toChar().lowercase()
2021-03-17 12:12:23,457 [main:90] - GETTING String from String
2021-03-17 12:12:23,488 [main:97] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd8ad02]]
2021-03-17 12:12:23,488 [main:133] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd8ad02]
2021-03-17 12:12:23,563 [main:298] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-17 12:12:23,563 [main:298] - generating value of type = Boolean true depth = 1
2021-03-17 12:12:23,564 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).dropWhile({a: Char -> true})
2021-03-17 12:12:23,564 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a908161]]
2021-03-17 12:12:23,564 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a908161]
2021-03-17 12:12:23,639 [main:298] - generating value of type = Iterable<Int> false depth = 0
2021-03-17 12:12:23,721 [main:45] - GENERATING CALL OF fun <T> mutableListOf(elements: Int): Iterable<Int> = TODO()
2021-03-17 12:12:23,722 [main:63] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(elements: Int): Iterable<Int> = TODO()
2021-03-17 12:12:23,801 [main:298] - generating value of type = Int true depth = 3
2021-03-17 12:12:23,802 [main:97] - GENERATED = mutableListOf<Int>(2023994210)
2021-03-17 12:12:23,802 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).slice(mutableListOf<Int>(2023994210))
2021-03-17 12:12:23,802 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e90d312]]
2021-03-17 12:12:23,802 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e90d312]
2021-03-17 12:12:23,878 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:23,954 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:24,029 [main:298] - generating value of type = CharSequence false depth = 0
2021-03-17 12:12:24,033 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceRange(2032961492, -1519449714, "rmzon")
2021-03-17 12:12:24,037 [main:97] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f616537]]
2021-03-17 12:12:24,037 [main:133] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6]
2021-03-17 12:12:24,111 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:24,112 [main:133] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f616537]
2021-03-17 12:12:24,187 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:24,188 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).compareTo("aowrd").toString(-22861021)
2021-03-17 12:12:24,188 [main:97] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26f19c6e]]
2021-03-17 12:12:24,188 [main:133] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26f19c6e]
2021-03-17 12:12:24,263 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:24,340 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:24,415 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:24,416 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceBefore('䤬', "ozqku", "gseon")
2021-03-17 12:12:24,416 [main:97] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44d1d7ff]]
2021-03-17 12:12:24,416 [main:133] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44d1d7ff]
2021-03-17 12:12:24,512 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:24,513 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).trimMargin("qdxrb")
2021-03-17 12:12:24,513 [main:97] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b85d020]]
2021-03-17 12:12:24,513 [main:133] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b85d020]
2021-03-17 12:12:24,594 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:24,595 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndent("krmnl")
2021-03-17 12:12:24,595 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61265893]]
2021-03-17 12:12:24,595 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:12:24,683 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:24,762 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:24,762 [main:133] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61265893]
2021-03-17 12:12:24,839 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:24,839 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).subSequence(2120277740, -295402595).repeat(-314168154)
2021-03-17 12:12:24,839 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50b5bc0a]]
2021-03-17 12:12:24,840 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50b5bc0a]
2021-03-17 12:12:24,917 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:24,995 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:24,996 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).removeRange(868827589, -1397402667)
2021-03-17 12:12:24,996 [main:97] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b0694d5]]
2021-03-17 12:12:24,996 [main:133] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8]
2021-03-17 12:12:25,075 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:25,075 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b0694d5]
2021-03-17 12:12:25,076 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).get(179064972).uppercase()
2021-03-17 12:12:25,076 [main:112] - replacement of false.toString() of type String is (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndent("krmnl")
2021-03-17 12:12:25,156 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:12:25,157 [main:66] - Compilation checking started
2021-03-17 12:12:25,723 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndent("krmnl")

fun fu1() = 1.toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(1815761518)

fun fu7() = 'c'.toString()


2021-03-17 12:12:25,724 [main:105] - replacing (toString(), String)
2021-03-17 12:12:25,724 [main:36] - replacing toString() String
2021-03-17 12:12:25,724 [main:40] - Getting value of type String
2021-03-17 12:12:25,800 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:25,801 [main:44] - GENERATED VALUE OF TYPE String = "dnysf"
2021-03-17 12:12:25,801 [main:47] - GENERATED IS CALL =false
2021-03-17 12:12:25,802 [main:53] - randomType = Double
2021-03-17 12:12:25,880 [main:298] - generating value of type = Double true depth = 0
2021-03-17 12:12:25,960 [main:133] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@456a4033]
2021-03-17 12:12:25,960 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36517812]
2021-03-17 12:12:25,960 [main:63] - Generated call from random type = (0.8718520187580433).toChar().lowercase()
2021-03-17 12:12:25,960 [main:90] - GETTING String from String
2021-03-17 12:12:25,982 [main:97] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50edc1cc]]
2021-03-17 12:12:25,982 [main:133] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50edc1cc]
2021-03-17 12:12:26,059 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:26,135 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:26,135 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).substringAfter('ꝟ', "kqqea")
2021-03-17 12:12:26,135 [main:97] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26f19c6e]]
2021-03-17 12:12:26,136 [main:133] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26f19c6e]
2021-03-17 12:12:26,212 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:26,289 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:26,366 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:26,367 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceBefore('僪', "qeewb", "wvywi")
2021-03-17 12:12:26,367 [main:97] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77b30a82]]
2021-03-17 12:12:26,367 [main:133] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77b30a82]
2021-03-17 12:12:26,444 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:26,520 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:26,521 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).substringBeforeLast('熛', "rcptt")
2021-03-17 12:12:26,521 [main:97] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b85d020]]
2021-03-17 12:12:26,521 [main:133] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b85d020]
2021-03-17 12:12:26,597 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:26,598 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndent("athyc")
2021-03-17 12:12:26,598 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b3459af]]
2021-03-17 12:12:26,598 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b3459af]
2021-03-17 12:12:26,674 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:26,675 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).substring(1256141045)
2021-03-17 12:12:26,675 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72f91e3a]]
2021-03-17 12:12:26,675 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:12:26,754 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:26,831 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:26,831 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72f91e3a]
2021-03-17 12:12:26,908 [main:298] - generating value of type = Regex false depth = 0
2021-03-17 12:12:27,009 [main:45] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-17 12:12:27,010 [main:63] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-17 12:12:27,264 [main:298] - generating value of type = String true depth = 3
2021-03-17 12:12:27,265 [main:298] - generating value of type = Set<RegexOption> false depth = 3
2021-03-17 12:12:27,345 [main:45] - GENERATING CALL OF fun <T> linkedSetOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-17 12:12:27,346 [main:63] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-17 12:12:27,424 [main:298] - generating value of type = RegexOption false depth = 6
2021-03-17 12:12:27,425 [main:97] - GENERATED = linkedSetOf<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE)
2021-03-17 12:12:27,425 [main:97] - GENERATED = Regex("bvvdc", linkedSetOf<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE))
2021-03-17 12:12:27,501 [main:298] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-17 12:12:27,502 [main:298] - generating value of type = CharSequence false depth = 1
2021-03-17 12:12:27,505 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).subSequence(-1786372412, -813600812).replace(Regex("bvvdc", linkedSetOf<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE)), {a: MatchResult -> StringBuilder()})
2021-03-17 12:12:27,505 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68f81a66]]
2021-03-17 12:12:27,506 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68f81a66]
2021-03-17 12:12:27,506 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).toUpperCase()
2021-03-17 12:12:27,506 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@82daf5c]]
2021-03-17 12:12:27,506 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@82daf5c]
2021-03-17 12:12:27,506 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).trimStart()
2021-03-17 12:12:27,506 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6413a5c1]]
2021-03-17 12:12:27,506 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6413a5c1]
2021-03-17 12:12:27,506 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).toLowerCase()
2021-03-17 12:12:27,506 [main:97] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47396d16]]
2021-03-17 12:12:27,506 [main:133] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47396d16]
2021-03-17 12:12:27,582 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:27,583 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).prependIndent("uxnlf")
2021-03-17 12:12:27,583 [main:112] - replacement of toString() of type String is (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).substringAfter('ꝟ', "kqqea")
2021-03-17 12:12:27,659 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:12:27,659 [main:66] - Compilation checking started
2021-03-17 12:12:28,087 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndent("krmnl")

fun fu1() = 1.toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.(test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).substringAfter('ꝟ', "kqqea")

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(1815761518)

fun fu7() = 'c'.toString()


2021-03-17 12:12:28,087 [main:105] - replacing ('c', Char)
2021-03-17 12:12:28,087 [main:36] - replacing 'c' Char
2021-03-17 12:12:28,088 [main:40] - Getting value of type Char
2021-03-17 12:12:28,176 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:28,176 [main:44] - GENERATED VALUE OF TYPE Char = '陑'
2021-03-17 12:12:28,176 [main:47] - GENERATED IS CALL =false
2021-03-17 12:12:28,177 [main:53] - randomType = Int
2021-03-17 12:12:28,251 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:28,285 [main:133] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5f656b4f]
2021-03-17 12:12:28,285 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.Char.toUpperCase(): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4abde9ad]
2021-03-17 12:12:28,286 [main:63] - Generated call from random type = (69578300).toChar().toUpperCase()
2021-03-17 12:12:28,286 [main:112] - replacement of 'c' of type Char is (69578300).toChar().toUpperCase()
2021-03-17 12:12:28,377 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:12:28,378 [main:66] - Compilation checking started
2021-03-17 12:12:28,918 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndent("krmnl")

fun fu1() = 1.toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(1815761518)

fun fu7() = (69578300).toChar().toUpperCase().toString()


2021-03-17 12:12:28,918 [main:105] - replacing (1.toByte(), Byte)
2021-03-17 12:12:28,918 [main:36] - replacing 1.toByte() Byte
2021-03-17 12:12:28,919 [main:40] - Getting value of type Byte
2021-03-17 12:12:29,008 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:12:29,008 [main:44] - GENERATED VALUE OF TYPE Byte = -125
2021-03-17 12:12:29,008 [main:47] - GENERATED IS CALL =false
2021-03-17 12:12:29,172 [main:53] - randomType = ArrayDeque<Byte?>
2021-03-17 12:12:29,249 [main:298] - generating value of type = ArrayDeque<Byte?> false depth = 0
2021-03-17 12:12:29,327 [main:45] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Byte?> = TODO()
2021-03-17 12:12:29,328 [main:63] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Byte?> = TODO()
2021-03-17 12:12:29,497 [main:298] - generating value of type = Int true depth = 3
2021-03-17 12:12:29,498 [main:97] - GENERATED = ArrayDeque<Byte?>(-1520194624)
2021-03-17 12:12:29,723 [main:133] - GENERATING call of type public final fun lastOrNull(): kotlin.Byte? defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@1ea1cfea]
2021-03-17 12:12:29,723 [main:63] - Generated call from random type = (ArrayDeque<Byte?>(-1520194624)).lastOrNull()!!
2021-03-17 12:12:29,724 [main:90] - GETTING Byte from String
2021-03-17 12:12:29,757 [main:97] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Int.mod(other: kotlin.Byte): kotlin.Byte defined in kotlin[DeserializedSimpleFunctionDescriptor@3c7ca576]]
2021-03-17 12:12:29,757 [main:133] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6]
2021-03-17 12:12:29,836 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:29,837 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Int.mod(other: kotlin.Byte): kotlin.Byte defined in kotlin[DeserializedSimpleFunctionDescriptor@3c7ca576]
2021-03-17 12:12:29,912 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:12:29,913 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).compareTo("oftly").mod(112)
2021-03-17 12:12:29,913 [main:97] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8], public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@b8e4b53]]
2021-03-17 12:12:29,913 [main:133] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8]
2021-03-17 12:12:30,010 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:30,011 [main:133] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@b8e4b53]
2021-03-17 12:12:30,011 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).get(-551349236).toByte()
2021-03-17 12:12:30,011 [main:97] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4ec47168], public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5065963c]]
2021-03-17 12:12:30,011 [main:133] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5065963c]
2021-03-17 12:12:30,011 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).length.toByte()
2021-03-17 12:12:30,011 [main:97] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4ec47168], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Int.mod(other: kotlin.Byte): kotlin.Byte defined in kotlin[DeserializedSimpleFunctionDescriptor@3c7ca576]]
2021-03-17 12:12:30,011 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Int.mod(other: kotlin.Byte): kotlin.Byte defined in kotlin[DeserializedSimpleFunctionDescriptor@3c7ca576]
2021-03-17 12:12:30,085 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:12:30,086 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).length.mod(-26)
2021-03-17 12:12:30,086 [main:97] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6], public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5065963c]]
2021-03-17 12:12:30,086 [main:133] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6]
2021-03-17 12:12:30,159 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:30,159 [main:133] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5065963c]
2021-03-17 12:12:30,160 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).compareTo("idpas").toByte()
2021-03-17 12:12:30,160 [main:97] - Case = [public fun kotlin.String.toByte(): kotlin.Byte defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a7d645]]
2021-03-17 12:12:30,160 [main:133] - GENERATING call of type public fun kotlin.String.toByte(): kotlin.Byte defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a7d645]
2021-03-17 12:12:30,160 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).toByte()
2021-03-17 12:12:30,160 [main:112] - replacement of 1.toByte() of type Byte is (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).toByte()
2021-03-17 12:12:30,233 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:12:30,233 [main:66] - Compilation checking started
2021-03-17 12:12:30,779 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(1815761518)

fun fu7() = (69578300).toChar().toUpperCase().toString()


2021-03-17 12:12:30,779 [main:105] - replacing (toString(), String)
2021-03-17 12:12:30,780 [main:36] - replacing toString() String
2021-03-17 12:12:30,780 [main:40] - Getting value of type String
2021-03-17 12:12:30,854 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:30,855 [main:44] - GENERATED VALUE OF TYPE String = "msfsm"
2021-03-17 12:12:30,855 [main:47] - GENERATED IS CALL =false
2021-03-17 12:12:30,935 [main:53] - randomType = UByte
2021-03-17 12:12:31,011 [main:298] - generating value of type = UByte true depth = 0
2021-03-17 12:12:31,042 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun mod(other: kotlin.UShort): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@19b70d82]
2021-03-17 12:12:31,117 [main:298] - generating value of type = UShort true depth = 0
2021-03-17 12:12:31,117 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19ea608f]
2021-03-17 12:12:31,192 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:31,193 [main:63] - Generated call from random type = (103.toUByte()).mod(3762.toUShort()).toString(918870964)
2021-03-17 12:12:31,193 [main:90] - GETTING String from String
2021-03-17 12:12:31,215 [main:97] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2616f1aa]]
2021-03-17 12:12:31,216 [main:133] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2616f1aa]
2021-03-17 12:12:31,289 [main:298] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-17 12:12:31,290 [main:298] - generating value of type = Boolean true depth = 1
2021-03-17 12:12:31,291 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).filter({a: Char -> false})
2021-03-17 12:12:31,291 [main:97] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4ec47168], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f616537]]
2021-03-17 12:12:31,291 [main:133] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f616537]
2021-03-17 12:12:31,366 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:31,367 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).length.toString(1301494268)
2021-03-17 12:12:31,367 [main:97] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154f24c5]]
2021-03-17 12:12:31,367 [main:133] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154f24c5]
2021-03-17 12:12:31,442 [main:298] - generating value of type = CharSequence false depth = 0
2021-03-17 12:12:31,550 [main:45] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-17 12:12:31,551 [main:63] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-17 12:12:31,705 [main:298] - generating value of type = Int true depth = 3
2021-03-17 12:12:31,706 [main:97] - GENERATED = StringBuilder(-648547615)
2021-03-17 12:12:31,706 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).removeSurrounding(StringBuilder(-648547615))
2021-03-17 12:12:31,706 [main:97] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@358eb8f6]]
2021-03-17 12:12:31,706 [main:133] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@358eb8f6]
2021-03-17 12:12:31,781 [main:298] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-17 12:12:31,781 [main:298] - generating value of type = Boolean true depth = 1
2021-03-17 12:12:31,782 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).filterIndexed({a: Int, b: Char -> true})
2021-03-17 12:12:31,782 [main:97] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@565782bc]]
2021-03-17 12:12:31,782 [main:133] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@565782bc]
2021-03-17 12:12:31,857 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:31,932 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:32,006 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:32,007 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceAfterLast('溩', "nrswz", "syhnf")
2021-03-17 12:12:32,007 [main:97] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aab152b]]
2021-03-17 12:12:32,007 [main:133] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aab152b]
2021-03-17 12:12:32,081 [main:298] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-17 12:12:32,082 [main:298] - generating value of type = Boolean true depth = 1
2021-03-17 12:12:32,082 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).dropLastWhile({a: Char -> false})
2021-03-17 12:12:32,082 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68f81a66]]
2021-03-17 12:12:32,083 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68f81a66]
2021-03-17 12:12:32,083 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).toUpperCase()
2021-03-17 12:12:32,083 [main:97] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c3b3e75]]
2021-03-17 12:12:32,083 [main:133] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c3b3e75]
2021-03-17 12:12:32,083 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).capitalize()
2021-03-17 12:12:32,083 [main:97] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30493443]]
2021-03-17 12:12:32,083 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30493443]
2021-03-17 12:12:32,158 [main:298] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-17 12:12:32,158 [main:298] - generating value of type = Char true depth = 1
2021-03-17 12:12:32,159 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceFirstChar({a: Char -> '׍'})
2021-03-17 12:12:32,159 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24e42fbc]]
2021-03-17 12:12:32,159 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24e42fbc]
2021-03-17 12:12:32,159 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).trim()
2021-03-17 12:12:32,159 [main:112] - replacement of toString() of type String is (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).filter({a: Char -> false})
2021-03-17 12:12:32,233 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:12:32,233 [main:66] - Compilation checking started
2021-03-17 12:12:32,659 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.(test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).filter({a: Char -> false})

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(1815761518)

fun fu7() = (69578300).toChar().toUpperCase().toString()


2021-03-17 12:12:32,734 [main:139] - TRYING TO REPLACE CONSTANT 993761412
2021-03-17 12:12:32,809 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-17 12:12:32,809 [main:66] - Compilation checking started
2021-03-17 12:12:33,377 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 26151.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(1815761518)

fun fu7() = (69578300).toChar().toUpperCase().toString()


2021-03-17 12:12:33,378 [main:139] - TRYING TO REPLACE CONSTANT 26151
2021-03-17 12:12:33,455 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-17 12:12:33,455 [main:66] - Compilation checking started
2021-03-17 12:12:33,987 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(1815761518)

fun fu7() = (69578300).toChar().toUpperCase().toString()


2021-03-17 12:12:33,987 [main:139] - TRYING TO REPLACE CONSTANT 1815761518
2021-03-17 12:12:34,065 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:12:34,065 [main:66] - Compilation checking started
2021-03-17 12:12:34,606 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()


2021-03-17 12:12:34,606 [main:139] - TRYING TO REPLACE CONSTANT 993761412
2021-03-17 12:12:34,687 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-17 12:12:34,687 [main:66] - Compilation checking started
2021-03-17 12:12:35,260 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()


2021-03-17 12:12:35,260 [main:139] - TRYING TO REPLACE CONSTANT 26151
2021-03-17 12:12:35,367 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:12:35,367 [main:66] - Compilation checking started
2021-03-17 12:12:35,899 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()


2021-03-17 12:12:35,900 [main:139] - TRYING TO REPLACE CONSTANT 69578300
2021-03-17 12:12:35,994 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:12:35,994 [main:66] - Compilation checking started
2021-03-17 12:12:36,407 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(-993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (size).toChar().toUpperCase().toString()


2021-03-17 12:12:36,407 [main:139] - TRYING TO REPLACE CONSTANT 993761412
2021-03-17 12:12:36,485 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-17 12:12:36,485 [main:66] - Compilation checking started
2021-03-17 12:12:37,039 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()


2021-03-17 12:12:37,039 [main:139] - TRYING TO REPLACE CONSTANT 26151
2021-03-17 12:12:37,115 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-17 12:12:37,116 [main:43] - AFTER TRY 1 res = val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()


2021-03-17 12:12:37,416 [main:45] - GENERATING CALL OF fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}
2021-03-17 12:12:37,418 [main:63] - WITHOUT TYPE PARAMS = fun <T : Iterable<*>> test(iterable: Iterable<*>): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}
2021-03-17 12:12:37,498 [main:298] - generating value of type = Iterable<*> false depth = 1
2021-03-17 12:12:37,579 [main:45] - GENERATING CALL OF fun <T> setOfNotNull(element: Any?): Iterable<*> = TODO()
2021-03-17 12:12:37,580 [main:63] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(element: Any?): Iterable<*> = TODO()
2021-03-17 12:12:37,659 [main:298] - generating value of type = Any false depth = 4
2021-03-17 12:12:37,659 [main:97] - GENERATED = setOfNotNull<Any?>("lmqcf")
2021-03-17 12:12:37,659 [main:97] - GENERATED = test<Iterable<*>>(setOfNotNull<Any?>("lmqcf"))
2021-03-17 12:12:37,740 [main:58] - Try №1
2021-03-17 12:12:37,887 [main:43] - AFTER TRY 2 res = val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()


2021-03-17 12:12:38,218 [main:45] - GENERATING CALL OF fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}
2021-03-17 12:12:38,220 [main:63] - WITHOUT TYPE PARAMS = fun <T : Iterable<*>> test(iterable: Iterable<*>): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}
2021-03-17 12:12:38,297 [main:298] - generating value of type = Iterable<*> false depth = 1
2021-03-17 12:12:38,377 [main:45] - GENERATING CALL OF fun <T> emptySet(): Iterable<*> = TODO()
2021-03-17 12:12:38,379 [main:63] - WITHOUT TYPE PARAMS = fun <T> emptySet(): Iterable<*> = TODO()
2021-03-17 12:12:38,457 [main:97] - GENERATED = emptySet<Any?>()
2021-03-17 12:12:38,457 [main:97] - GENERATED = test<Iterable<*>>(emptySet<Any?>())
2021-03-17 12:12:38,540 [main:58] - Try №2
2021-03-17 12:12:40,347 [main:76] - Trying to insert fun box866(): String =
        Kla1().Kla2().callback()
2021-03-17 12:12:40,496 [main:66] - Compilation checking started
2021-03-17 12:12:41,316 [main:101] - Trying to change 12 nodes
2021-03-17 12:12:41,316 [main:105] - replacing (prope0, String)
2021-03-17 12:12:41,317 [main:36] - replacing prope0 String
2021-03-17 12:12:41,318 [main:40] - Getting value of type String
2021-03-17 12:12:41,413 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:41,414 [main:44] - GENERATED VALUE OF TYPE String = "agbpy"
2021-03-17 12:12:41,415 [main:47] - GENERATED IS CALL =false
2021-03-17 12:12:41,634 [main:53] - randomType = ULong?
2021-03-17 12:12:41,733 [main:298] - generating value of type = ULong true depth = 0
2021-03-17 12:12:41,786 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@53fb9378]
2021-03-17 12:12:41,786 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65122db8]
2021-03-17 12:12:41,883 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:41,884 [main:63] - Generated call from random type = (5066448472914084768.toULong())?.toShort().toString(-1170513118)
2021-03-17 12:12:41,885 [main:90] - GETTING String from Char
2021-03-17 12:12:41,922 [main:97] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6069728], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30291238]]
2021-03-17 12:12:41,922 [main:133] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6069728]
2021-03-17 12:12:41,922 [main:133] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30291238]
2021-03-17 12:12:42,020 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:42,021 [main:101] - GENERATED CALL = ((69578300).toChar()).toLong().toString(-2036573736)
2021-03-17 12:12:42,021 [main:97] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@b8e4b53], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed2685d]]
2021-03-17 12:12:42,021 [main:133] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@b8e4b53]
2021-03-17 12:12:42,021 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed2685d]
2021-03-17 12:12:42,110 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:42,111 [main:101] - GENERATED CALL = ((69578300).toChar()).toByte().toString(-1612348319)
2021-03-17 12:12:42,111 [main:97] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba2d41f]]
2021-03-17 12:12:42,111 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba2d41f]
2021-03-17 12:12:42,112 [main:101] - GENERATED CALL = ((69578300).toChar()).titlecase()
2021-03-17 12:12:42,112 [main:97] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b0694d5]]
2021-03-17 12:12:42,112 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b0694d5]
2021-03-17 12:12:42,112 [main:101] - GENERATED CALL = ((69578300).toChar()).uppercase()
2021-03-17 12:12:42,112 [main:97] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f616537]]
2021-03-17 12:12:42,112 [main:133] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20]
2021-03-17 12:12:42,200 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:42,200 [main:133] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f616537]
2021-03-17 12:12:42,315 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:42,316 [main:101] - GENERATED CALL = ((69578300).toChar()).compareTo('餓').toString(550519735)
2021-03-17 12:12:42,316 [main:97] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36517812]]
2021-03-17 12:12:42,316 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36517812]
2021-03-17 12:12:42,316 [main:101] - GENERATED CALL = ((69578300).toChar()).lowercase()
2021-03-17 12:12:42,316 [main:97] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4593c8cb], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65122db8]]
2021-03-17 12:12:42,317 [main:133] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4593c8cb]
2021-03-17 12:12:42,317 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65122db8]
2021-03-17 12:12:42,411 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:42,413 [main:101] - GENERATED CALL = ((69578300).toChar()).toShort().toString(-1440948109)
2021-03-17 12:12:42,413 [main:97] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca2c133]]
2021-03-17 12:12:42,413 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca2c133]
2021-03-17 12:12:42,513 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:42,515 [main:101] - GENERATED CALL = ((69578300).toChar()).plus("ftroo")
2021-03-17 12:12:42,515 [main:112] - replacement of prope0 of type String is (5066448472914084768.toULong())?.toShort().toString(-1170513118)
2021-03-17 12:12:42,606 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:12:42,606 [main:66] - Compilation checking started
2021-03-17 12:12:43,073 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0(
            run {
                val prope1 = (5066448472914084768.toULong())?.toShort().toString(-1170513118)
                { prope1 }
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:12:43,073 [main:105] - replacing (prope1, String)
2021-03-17 12:12:43,074 [main:36] - replacing prope1 String
2021-03-17 12:12:43,074 [main:40] - Getting value of type String
2021-03-17 12:12:43,163 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:43,164 [main:44] - GENERATED VALUE OF TYPE String = "zfhcm"
2021-03-17 12:12:43,164 [main:47] - GENERATED IS CALL =false
2021-03-17 12:12:43,559 [main:53] - randomType = Pair<LinkedHashMap<Boolean, Float?>?, Char>
2021-03-17 12:12:43,648 [main:298] - generating value of type = Pair<LinkedHashMap<Boolean, Float?>?, Char> false depth = 0
2021-03-17 12:12:43,746 [main:45] - GENERATING CALL OF fun <A, B> Pair(first: LinkedHashMap<Boolean, Float?>?, second: Char): Pair<LinkedHashMap<Boolean, Float?>?, Char> = TODO()
2021-03-17 12:12:43,748 [main:63] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: LinkedHashMap<Boolean, Float?>?, second: Char): Pair<LinkedHashMap<Boolean, Float?>?, Char> = TODO()
2021-03-17 12:12:43,840 [main:298] - generating value of type = LinkedHashMap<Boolean, Float?> false depth = 3
2021-03-17 12:12:43,933 [main:45] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Boolean, Float?>): LkedHashMap<Boolean, Float?> = TODO()
2021-03-17 12:12:43,934 [main:63] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Boolean, Float?>): LkedHashMap<Boolean, Float?> = TODO()
2021-03-17 12:12:44,024 [main:298] - generating value of type = Pair<Boolean, Float?> false depth = 6
2021-03-17 12:12:44,166 [main:45] - GENERATING CALL OF fun <A, B> Pair(first: Boolean, second: Float?): Pair<Boolean, Float?> = TODO()
2021-03-17 12:12:44,168 [main:63] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Boolean, second: Float?): Pair<Boolean, Float?> = TODO()
2021-03-17 12:12:44,257 [main:298] - generating value of type = Boolean true depth = 9
2021-03-17 12:12:44,258 [main:298] - generating value of type = Float true depth = 9
2021-03-17 12:12:44,258 [main:97] - GENERATED = Pair<Boolean, Float?>(true, 0.80606747f)
2021-03-17 12:12:44,259 [main:97] - GENERATED = linkedMapOf<Boolean, Float?>(Pair<Boolean, Float?>(true, 0.80606747f))
2021-03-17 12:12:44,259 [main:298] - generating value of type = Char true depth = 3
2021-03-17 12:12:44,259 [main:97] - GENERATED = Pair<LinkedHashMap<Boolean, Float?>?, Char>(linkedMapOf<Boolean, Float?>(Pair<Boolean, Float?>(true, 0.80606747f)), '佧')
2021-03-17 12:12:44,282 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba2d41f]
2021-03-17 12:12:44,283 [main:63] - Generated call from random type = (Pair<LinkedHashMap<Boolean, Float?>?, Char>(linkedMapOf<Boolean, Float?>(Pair<Boolean, Float?>(true, 0.80606747f)), '佧')).second.titlecase()
2021-03-17 12:12:44,283 [main:90] - GETTING String from String
2021-03-17 12:12:44,306 [main:97] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b0694d5]]
2021-03-17 12:12:44,306 [main:133] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8]
2021-03-17 12:12:44,393 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:44,394 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b0694d5]
2021-03-17 12:12:44,395 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).get(1321955179).uppercase()
2021-03-17 12:12:44,395 [main:97] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba2d41f]]
2021-03-17 12:12:44,395 [main:133] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8]
2021-03-17 12:12:44,484 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:44,485 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba2d41f]
2021-03-17 12:12:44,485 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).get(1003840474).titlecase()
2021-03-17 12:12:44,485 [main:97] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9089de5]]
2021-03-17 12:12:44,485 [main:133] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9089de5]
2021-03-17 12:12:44,573 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:44,665 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:44,666 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).substringBefore('䴚', "ighuh")
2021-03-17 12:12:44,666 [main:97] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78ae7d17]]
2021-03-17 12:12:44,666 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78ae7d17]
2021-03-17 12:12:44,666 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).lowercase()
2021-03-17 12:12:44,667 [main:97] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ddfc4]]
2021-03-17 12:12:44,667 [main:133] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ddfc4]
2021-03-17 12:12:44,760 [main:298] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-17 12:12:44,761 [main:298] - generating value of type = Boolean true depth = 1
2021-03-17 12:12:44,762 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).filterNot({a: Char -> true})
2021-03-17 12:12:44,762 [main:97] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50edc1cc]]
2021-03-17 12:12:44,762 [main:133] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50edc1cc]
2021-03-17 12:12:44,854 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:44,942 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:44,943 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).substringAfter('ꡚ', "ntocn")
2021-03-17 12:12:44,943 [main:97] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27e79453]]
2021-03-17 12:12:44,943 [main:133] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27e79453]
2021-03-17 12:12:45,028 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:45,113 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:45,114 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).padEnd(1300065040, '')
2021-03-17 12:12:45,114 [main:97] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@314ad0a5]]
2021-03-17 12:12:45,114 [main:133] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@314ad0a5]
2021-03-17 12:12:45,198 [main:298] - generating value of type = CharSequence false depth = 0
2021-03-17 12:12:45,202 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).removePrefix("dvswf")
2021-03-17 12:12:45,202 [main:97] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@565782bc]]
2021-03-17 12:12:45,202 [main:133] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@565782bc]
2021-03-17 12:12:45,291 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:45,377 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:45,465 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:45,466 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).replaceAfterLast('ஶ', "yilej", "tfixk")
2021-03-17 12:12:45,466 [main:97] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b85d020]]
2021-03-17 12:12:45,466 [main:133] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b85d020]
2021-03-17 12:12:45,558 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:45,559 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).replaceIndent("cecnm")
2021-03-17 12:12:45,559 [main:112] - replacement of prope1 of type String is ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).padEnd(1300065040, '')
2021-03-17 12:12:45,648 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:12:45,649 [main:66] - Compilation checking started
2021-03-17 12:12:46,325 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).padEnd(1300065040, '') }
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:12:46,326 [main:105] - replacing (callback(), String)
2021-03-17 12:12:46,326 [main:36] - replacing callback() String
2021-03-17 12:12:46,326 [main:40] - Getting value of type String
2021-03-17 12:12:46,416 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:46,417 [main:44] - GENERATED VALUE OF TYPE String = "dvpma"
2021-03-17 12:12:46,417 [main:47] - GENERATED IS CALL =false
2021-03-17 12:12:46,419 [main:53] - randomType = Float
2021-03-17 12:12:46,506 [main:298] - generating value of type = Float true depth = 0
2021-03-17 12:12:46,548 [main:133] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@21870d1e]
2021-03-17 12:12:46,548 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65122db8]
2021-03-17 12:12:46,637 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:46,638 [main:63] - Generated call from random type = (0.31769103f).toShort().toString(626263861)
2021-03-17 12:12:46,638 [main:90] - GETTING String from String
2021-03-17 12:12:46,658 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a908161]]
2021-03-17 12:12:46,658 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a908161]
2021-03-17 12:12:46,746 [main:298] - generating value of type = Iterable<Int> false depth = 0
2021-03-17 12:12:46,840 [main:45] - GENERATING CALL OF fun <T> setOf(elements: Int): Iterable<Int> = TODO()
2021-03-17 12:12:46,842 [main:63] - WITHOUT TYPE PARAMS = fun <T> setOf(elements: Int): Iterable<Int> = TODO()
2021-03-17 12:12:46,935 [main:298] - generating value of type = Int true depth = 3
2021-03-17 12:12:46,936 [main:97] - GENERATED = setOf<Int>(41971082)
2021-03-17 12:12:46,937 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).slice(setOf<Int>(41971082))
2021-03-17 12:12:46,937 [main:97] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44d1d7ff]]
2021-03-17 12:12:46,937 [main:133] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44d1d7ff]
2021-03-17 12:12:47,032 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:47,033 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).trimMargin("khjfc")
2021-03-17 12:12:47,033 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61265893]]
2021-03-17 12:12:47,033 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:12:47,124 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:47,213 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:47,215 [main:133] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61265893]
2021-03-17 12:12:47,305 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:47,307 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).subSequence(2080583081, 479813601).repeat(1128751406)
2021-03-17 12:12:47,307 [main:97] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca2c133]]
2021-03-17 12:12:47,307 [main:133] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8]
2021-03-17 12:12:47,395 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:47,396 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca2c133]
2021-03-17 12:12:47,484 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:47,485 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).get(1315974200).plus("unuth")
2021-03-17 12:12:47,485 [main:97] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@565782bc]]
2021-03-17 12:12:47,485 [main:133] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@565782bc]
2021-03-17 12:12:47,573 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:47,664 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:47,757 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:47,758 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceAfterLast('䃨', "fzudj", "jxphh")
2021-03-17 12:12:47,758 [main:97] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@358eb8f6]]
2021-03-17 12:12:47,758 [main:133] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@358eb8f6]
2021-03-17 12:12:47,877 [main:298] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-17 12:12:47,878 [main:298] - generating value of type = Boolean true depth = 1
2021-03-17 12:12:47,879 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).filterIndexed({a: Int, b: Char -> false})
2021-03-17 12:12:47,879 [main:97] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@552c6ae3]]
2021-03-17 12:12:47,879 [main:133] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@552c6ae3]
2021-03-17 12:12:47,965 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:48,051 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:48,139 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:48,140 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceAfter('', "drlhl", "opblz")
2021-03-17 12:12:48,140 [main:97] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353c96cc]]
2021-03-17 12:12:48,140 [main:133] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@353c96cc]
2021-03-17 12:12:48,226 [main:298] - generating value of type = CharSequence false depth = 0
2021-03-17 12:12:48,322 [main:45] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-17 12:12:48,324 [main:63] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-17 12:12:48,502 [main:298] - generating value of type = Int true depth = 3
2021-03-17 12:12:48,504 [main:97] - GENERATED = StringBuilder(-3407932)
2021-03-17 12:12:48,590 [main:298] - generating value of type = Boolean true depth = 0
2021-03-17 12:12:48,591 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).commonPrefixWith(StringBuilder(-3407932), true)
2021-03-17 12:12:48,591 [main:97] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61265893]]
2021-03-17 12:12:48,591 [main:133] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61265893]
2021-03-17 12:12:48,680 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:48,682 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).repeat(601507155)
2021-03-17 12:12:48,682 [main:97] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@275e239a]]
2021-03-17 12:12:48,682 [main:133] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@275e239a]
2021-03-17 12:12:48,771 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:48,773 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).take(674145027)
2021-03-17 12:12:48,773 [main:112] - replacement of callback() of type String is (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).filterIndexed({a: Int, b: Char -> false})
2021-03-17 12:12:48,858 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:12:48,859 [main:66] - Compilation checking started
2021-03-17 12:12:49,312 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).padEnd(1300065040, '') }
            }
    )
}

fun box866(): String =
        Kla1().Kla2().(test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).filterIndexed({a: Int, b: Char -> false})


2021-03-17 12:12:49,313 [main:105] - replacing ("OK", String)
2021-03-17 12:12:49,314 [main:36] - replacing "OK" String
2021-03-17 12:12:49,314 [main:40] - Getting value of type String
2021-03-17 12:12:49,402 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:49,403 [main:44] - GENERATED VALUE OF TYPE String = "tugkn"
2021-03-17 12:12:49,403 [main:47] - GENERATED IS CALL =false
2021-03-17 12:12:49,497 [main:53] - randomType = UByte
2021-03-17 12:12:49,583 [main:298] - generating value of type = UByte true depth = 0
2021-03-17 12:12:49,614 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@360cc0d1]
2021-03-17 12:12:49,614 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65122db8]
2021-03-17 12:12:49,699 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:49,701 [main:63] - Generated call from random type = (0.toUByte()).toShort().toString(1450070044)
2021-03-17 12:12:49,702 [main:90] - GETTING String from Char
2021-03-17 12:12:49,720 [main:97] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4593c8cb], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65122db8]]
2021-03-17 12:12:49,720 [main:133] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4593c8cb]
2021-03-17 12:12:49,720 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65122db8]
2021-03-17 12:12:49,839 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:49,840 [main:101] - GENERATED CALL = ((69578300).toChar()).toShort().toString(-297431004)
2021-03-17 12:12:49,840 [main:97] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba2d41f]]
2021-03-17 12:12:49,840 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba2d41f]
2021-03-17 12:12:49,841 [main:101] - GENERATED CALL = ((69578300).toChar()).titlecase()
2021-03-17 12:12:49,841 [main:97] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6069728], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30291238]]
2021-03-17 12:12:49,841 [main:133] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6069728]
2021-03-17 12:12:49,841 [main:133] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30291238]
2021-03-17 12:12:49,926 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:49,928 [main:101] - GENERATED CALL = ((69578300).toChar()).toLong().toString(1426653285)
2021-03-17 12:12:49,928 [main:97] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@b8e4b53], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed2685d]]
2021-03-17 12:12:49,928 [main:133] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@b8e4b53]
2021-03-17 12:12:49,928 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed2685d]
2021-03-17 12:12:50,014 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:50,015 [main:101] - GENERATED CALL = ((69578300).toChar()).toByte().toString(-1910619878)
2021-03-17 12:12:50,015 [main:97] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36517812]]
2021-03-17 12:12:50,015 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36517812]
2021-03-17 12:12:50,016 [main:101] - GENERATED CALL = ((69578300).toChar()).lowercase()
2021-03-17 12:12:50,016 [main:97] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca2c133]]
2021-03-17 12:12:50,016 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca2c133]
2021-03-17 12:12:50,103 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:50,104 [main:101] - GENERATED CALL = ((69578300).toChar()).plus("byotj")
2021-03-17 12:12:50,104 [main:97] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b0694d5]]
2021-03-17 12:12:50,104 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b0694d5]
2021-03-17 12:12:50,104 [main:101] - GENERATED CALL = ((69578300).toChar()).uppercase()
2021-03-17 12:12:50,104 [main:97] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f616537]]
2021-03-17 12:12:50,104 [main:133] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20]
2021-03-17 12:12:50,195 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:12:50,196 [main:133] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f616537]
2021-03-17 12:12:50,284 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:50,285 [main:101] - GENERATED CALL = ((69578300).toChar()).compareTo('넆').toString(464145254)
2021-03-17 12:12:50,285 [main:112] - replacement of "OK" of type String is ((69578300).toChar()).compareTo('넆').toString(464145254)
2021-03-17 12:12:50,373 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:12:50,373 [main:66] - Compilation checking started
2021-03-17 12:12:50,965 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = ((69578300).toChar()).compareTo('넆').toString(464145254)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).padEnd(1300065040, '') }
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:12:50,965 [main:105] - replacing ({ ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).padEnd(1300065040, '') }, Function0<String>)
2021-03-17 12:12:50,966 [main:36] - replacing { ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).padEnd(1300065040, '') } Function0<String>
2021-03-17 12:12:50,966 [main:40] - Getting value of type Function0<String>
2021-03-17 12:12:51,056 [main:298] - generating value of type = Function0<String> false depth = 0
2021-03-17 12:12:51,057 [main:298] - generating value of type = String true depth = 1
2021-03-17 12:12:51,058 [main:44] - GENERATED VALUE OF TYPE Function0<String> = { "uavpp"}
2021-03-17 12:12:51,058 [main:47] - GENERATED IS CALL =false
2021-03-17 12:12:51,061 [main:53] - randomType = Double
2021-03-17 12:12:51,150 [main:298] - generating value of type = Double true depth = 0
2021-03-17 12:12:51,189 [main:90] - GETTING Function0<String> from Int
2021-03-17 12:12:51,221 [main:90] - GETTING Function0<String> from String
2021-03-17 12:12:51,238 [main:90] - GETTING Function0<String> from String
2021-03-17 12:12:51,239 [main:90] - GETTING Function0<String> from String
2021-03-17 12:12:51,240 [main:90] - GETTING Function0<String> from Char
2021-03-17 12:12:51,259 [main:90] - GETTING Function0<String> from String
2021-03-17 12:12:51,260 [main:90] - GETTING Function0<String> from Byte
2021-03-17 12:12:51,291 [main:90] - GETTING Function0<String> from String
2021-03-17 12:12:51,292 [main:90] - GETTING Function0<String> from Int
2021-03-17 12:12:51,293 [main:90] - GETTING Function0<String> from HashMap<Float, Double>
2021-03-17 12:12:51,394 [main:90] - GETTING Function0<String> from String
2021-03-17 12:12:51,395 [main:90] - GETTING Function0<String> from String
2021-03-17 12:12:51,396 [main:90] - GETTING Function0<String> from String
2021-03-17 12:12:51,397 [main:90] - GETTING Function0<String> from Char
2021-03-17 12:12:51,398 [main:90] - GETTING Function0<String> from HashMap<Float, Double>
2021-03-17 12:12:51,398 [main:112] - replacement of { ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).padEnd(1300065040, '') } of type Function0<String> is { "uavpp"}
2021-03-17 12:12:51,485 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-17 12:12:51,485 [main:66] - Compilation checking started
2021-03-17 12:12:52,099 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = ((69578300).toChar()).compareTo('넆').toString(464145254)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:12:52,100 [main:105] - replacing (prope0, String)
2021-03-17 12:12:52,101 [main:36] - replacing prope0 String
2021-03-17 12:12:52,101 [main:40] - Getting value of type String
2021-03-17 12:12:52,193 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:12:52,193 [main:44] - GENERATED VALUE OF TYPE String = "qbihv"
2021-03-17 12:12:52,194 [main:47] - GENERATED IS CALL =false
2021-03-17 12:12:52,285 [main:53] - randomType = Int?
2021-03-17 12:12:52,370 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:52,405 [main:133] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7540d103]
2021-03-17 12:12:52,405 [main:133] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f616537]
2021-03-17 12:12:52,488 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:12:52,489 [main:63] - Generated call from random type = (-961073172)?.toInt().toString(-1702069952)
2021-03-17 12:12:52,489 [main:112] - replacement of prope0 of type String is (-961073172)?.toInt().toString(-1702069952)
2021-03-17 12:12:52,572 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:12:52,573 [main:66] - Compilation checking started
2021-03-17 12:12:53,013 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = ((69578300).toChar()).compareTo('넆').toString(464145254)

    inner class Kla2 : Kla0(
            run {
                val prope1 = (-961073172)?.toInt().toString(-1702069952)
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:12:53,129 [main:139] - TRYING TO REPLACE CONSTANT 464145254
2021-03-17 12:12:53,214 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:12:53,214 [main:66] - Compilation checking started
2021-03-17 12:12:53,806 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = ((69578300).toChar()).compareTo('넆').toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:12:53,806 [main:139] - TRYING TO REPLACE CONSTANT 69578300
2021-03-17 12:12:53,894 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:12:53,895 [main:66] - Compilation checking started
2021-03-17 12:12:54,520 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo('넆').toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:12:54,521 [main:139] - TRYING TO REPLACE CONSTANT '넆'
2021-03-17 12:12:54,607 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:12:54,607 [main:66] - Compilation checking started
2021-03-17 12:12:55,206 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:12:55,206 [main:88] - Final res = val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:12:55,382 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:12:55,383 [main:66] - Compilation checking started
2021-03-17 12:12:55,827 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: (() -> String)?)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:12:55,827 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:12:55,828 [main:66] - Compilation checking started
2021-03-17 12:12:56,270 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<(UShortArray)?>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:12:56,270 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:12:56,270 [main:66] - Compilation checking started
2021-03-17 12:12:56,741 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> (String)?)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:12:56,742 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:12:56,742 [main:66] - Compilation checking started
2021-03-17 12:12:57,338 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:12:57,338 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:12:57,338 [main:66] - Compilation checking started
2021-03-17 12:12:57,908 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:12:57,909 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:12:57,909 [main:66] - Compilation checking started
2021-03-17 12:12:58,484 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:12:58,484 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:12:58,484 [main:66] - Compilation checking started
2021-03-17 12:12:59,101 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:12:59,194 [main:67] - Trying to add BLOCK to FUN
2021-03-17 12:12:59,195 [main:66] - Compilation checking started
2021-03-17 12:12:59,823 [main:74] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:12:59,825 [main:67] - Trying to add BLOCK to FUN
2021-03-17 12:12:59,825 [main:66] - Compilation checking started
2021-03-17 12:13:00,414 [main:74] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:00,415 [main:67] - Trying to add BLOCK to FUN
2021-03-17 12:13:00,416 [main:66] - Compilation checking started
2021-03-17 12:13:01,019 [main:74] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:01,020 [main:67] - Trying to add BLOCK to FUN
2021-03-17 12:13:01,020 [main:66] - Compilation checking started
2021-03-17 12:13:01,613 [main:74] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Pair<Long,Array<Set<Map<Byte,String>>>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:01,614 [main:67] - Trying to add BLOCK to FUN
2021-03-17 12:13:01,614 [main:66] - Compilation checking started
2021-03-17 12:13:02,193 [main:74] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Pair<Long,Array<Set<Map<Byte,String>>>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:02,194 [main:67] - Trying to add BLOCK to FUN
2021-03-17 12:13:02,195 [main:66] - Compilation checking started
2021-03-17 12:13:02,792 [main:74] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Pair<Long,Array<Set<Map<Byte,String>>>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Float>>,Double>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:02,793 [main:67] - Trying to add BLOCK to FUN
2021-03-17 12:13:02,793 [main:66] - Compilation checking started
2021-03-17 12:13:03,374 [main:74] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Pair<Long,Array<Set<Map<Byte,String>>>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Float>>,Double>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:03,375 [main:67] - Trying to add BLOCK to FUN
2021-03-17 12:13:03,375 [main:66] - Compilation checking started
2021-03-17 12:13:03,869 [main:77] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Pair<Long,Array<Set<Map<Byte,String>>>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Float>>,Double>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String = "witcr"
fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:03,962 [main:26] - Trying to change some nodes to nodes from other programs 502 times
2021-03-17 12:13:03,963 [main:28] - Try №0 of 502
2021-03-17 12:13:03,972 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:13:03,973 [main:66] - Compilation checking started
2021-03-17 12:13:04,587 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Pair<Long,Array<Set<Map<Byte,String>>>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:04,587 [main:28] - Try №1 of 502
2021-03-17 12:13:04,591 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:04,592 [main:66] - Compilation checking started
2021-03-17 12:13:05,059 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Pair<Long,Array<Set<Map<Byte,String>>>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).o.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:05,059 [main:28] - Try №2 of 502
2021-03-17 12:13:05,063 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:05,063 [main:66] - Compilation checking started
2021-03-17 12:13:05,519 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Pair<Long,Array<Set<Map<Byte,String>>>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): suspendHere = "slltl"
fun <T : Iterable<*>> test(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:05,519 [main:28] - Try №3 of 502
2021-03-17 12:13:05,531 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:13:05,531 [main:66] - Compilation checking started
2021-03-17 12:13:06,033 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Pair<Long,Array<Set<Map<Byte,String>>>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<String>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:06,033 [main:28] - Try №4 of 502
2021-03-17 12:13:06,038 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-17 12:13:06,038 [main:66] - Compilation checking started
2021-03-17 12:13:06,499 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Pair<Long,Array<Set<Map<Byte,String>>>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

private class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:06,500 [main:28] - Try №5 of 502
2021-03-17 12:13:06,508 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:13:06,508 [main:28] - Try №6 of 502
2021-03-17 12:13:06,517 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:13:06,517 [main:66] - Compilation checking started
2021-03-17 12:13:07,114 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:07,115 [main:28] - Try №7 of 502
2021-03-17 12:13:07,118 [main:33] - Trying to replace Element(TYPE_PARAMETER_LIST) on Element(TYPE_PARAMETER_LIST)
2021-03-17 12:13:07,118 [main:66] - Compilation checking started
2021-03-17 12:13:07,612 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <reified Y : Enum<Y>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:07,612 [main:28] - Try №8 of 502
2021-03-17 12:13:07,620 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-17 12:13:07,620 [main:66] - Compilation checking started
2021-03-17 12:13:08,103 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for (i in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:08,103 [main:28] - Try №9 of 502
2021-03-17 12:13:08,107 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:08,107 [main:66] - Compilation checking started
2021-03-17 12:13:08,577 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).String((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:08,578 [main:28] - Try №10 of 502
2021-03-17 12:13:08,587 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:08,587 [main:66] - Compilation checking started
2021-03-17 12:13:09,039 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): A = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:09,039 [main:28] - Try №11 of 502
2021-03-17 12:13:09,046 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-17 12:13:09,047 [main:28] - Try №12 of 502
2021-03-17 12:13:09,052 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:13:09,053 [main:66] - Compilation checking started
2021-03-17 12:13:09,530 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().test()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:09,530 [main:28] - Try №13 of 502
2021-03-17 12:13:09,538 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:09,539 [main:28] - Try №14 of 502
2021-03-17 12:13:09,544 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:13:09,544 [main:66] - Compilation checking started
2021-03-17 12:13:09,999 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): K = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:09,999 [main:28] - Try №15 of 502
2021-03-17 12:13:10,008 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:13:10,008 [main:28] - Try №16 of 502
2021-03-17 12:13:10,012 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:10,012 [main:66] - Compilation checking started
2021-03-17 12:13:10,500 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: box -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:10,500 [main:28] - Try №17 of 502
2021-03-17 12:13:10,504 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:10,505 [main:66] - Compilation checking started
2021-03-17 12:13:10,959 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, doCall) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:10,959 [main:28] - Try №18 of 502
2021-03-17 12:13:10,968 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:10,968 [main:28] - Try №19 of 502
2021-03-17 12:13:10,979 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:13:10,979 [main:66] - Compilation checking started
2021-03-17 12:13:11,558 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:11,558 [main:28] - Try №20 of 502
2021-03-17 12:13:11,570 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:13:11,571 [main:66] - Compilation checking started
2021-03-17 12:13:12,147 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:12,147 [main:28] - Try №21 of 502
2021-03-17 12:13:12,150 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:12,150 [main:66] - Compilation checking started
2021-03-17 12:13:12,748 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:12,748 [main:28] - Try №22 of 502
2021-03-17 12:13:12,756 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:12,757 [main:66] - Compilation checking started
2021-03-17 12:13:13,217 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().JvmName().callback()


2021-03-17 12:13:13,217 [main:28] - Try №23 of 502
2021-03-17 12:13:13,225 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:13,225 [main:66] - Compilation checking started
2021-03-17 12:13:13,674 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<useArray>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:13,674 [main:28] - Try №24 of 502
2021-03-17 12:13:13,682 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:13,683 [main:66] - Compilation checking started
2021-03-17 12:13:14,133 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$B:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:14,133 [main:28] - Try №25 of 502
2021-03-17 12:13:14,144 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:13:14,145 [main:28] - Try №26 of 502
2021-03-17 12:13:14,153 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:13:14,154 [main:66] - Compilation checking started
2021-03-17 12:13:14,636 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : A> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:14,636 [main:28] - Try №27 of 502
2021-03-17 12:13:14,649 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-17 12:13:14,650 [main:28] - Try №28 of 502
2021-03-17 12:13:14,658 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:14,658 [main:66] - Compilation checking started
2021-03-17 12:13:15,107 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = name()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:15,107 [main:28] - Try №29 of 502
2021-03-17 12:13:15,115 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:15,116 [main:66] - Compilation checking started
2021-03-17 12:13:15,583 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(String(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:15,583 [main:28] - Try №30 of 502
2021-03-17 12:13:15,589 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:13:15,589 [main:66] - Compilation checking started
2021-03-17 12:13:16,046 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = ZImpl2()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:16,046 [main:28] - Try №31 of 502
2021-03-17 12:13:16,059 [main:33] - Trying to replace Element(CONDITION) on Element(CONDITION)
2021-03-17 12:13:16,059 [main:66] - Compilation checking started
2021-03-17 12:13:16,529 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (x != i + j) "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:16,529 [main:28] - Try №32 of 502
2021-03-17 12:13:16,540 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:13:16,541 [main:28] - Try №33 of 502
2021-03-17 12:13:16,547 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:13:16,547 [main:66] - Compilation checking started
2021-03-17 12:13:17,022 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = S("abcdef")::xx.get().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:17,022 [main:28] - Try №34 of 502
2021-03-17 12:13:17,030 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:17,031 [main:66] - Compilation checking started
2021-03-17 12:13:17,480 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$o;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:17,480 [main:28] - Try №35 of 502
2021-03-17 12:13:17,489 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:13:17,490 [main:66] - Compilation checking started
2021-03-17 12:13:17,944 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): T = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:17,944 [main:28] - Try №36 of 502
2021-03-17 12:13:17,949 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:13:17,950 [main:66] - Compilation checking started
2021-03-17 12:13:18,517 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:18,517 [main:28] - Try №37 of 502
2021-03-17 12:13:18,528 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:13:18,528 [main:66] - Compilation checking started
2021-03-17 12:13:19,159 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:19,159 [main:28] - Try №38 of 502
2021-03-17 12:13:19,171 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:13:19,171 [main:28] - Try №39 of 502
2021-03-17 12:13:19,181 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-17 12:13:19,181 [main:66] - Compilation checking started
2021-03-17 12:13:19,637 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val result = processRecords { "B" + it }
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:19,638 [main:28] - Try №40 of 502
2021-03-17 12:13:19,652 [main:33] - Trying to replace Element(DESTRUCTURING_DECLARATION) on Element(DESTRUCTURING_DECLARATION)
2021-03-17 12:13:19,652 [main:66] - Compilation checking started
2021-03-17 12:13:19,654 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:13:19,655 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for (val (index, i) = J.listOfNotNull().withIndex().first() in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:19,655 [main:28] - Try №41 of 502
2021-03-17 12:13:19,667 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:13:19,668 [main:28] - Try №42 of 502
2021-03-17 12:13:19,674 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:13:19,674 [main:66] - Compilation checking started
2021-03-17 12:13:20,132 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<IllegalArgumentException>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:20,132 [main:28] - Try №43 of 502
2021-03-17 12:13:20,141 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:13:20,141 [main:66] - Compilation checking started
2021-03-17 12:13:20,592 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): Long =
        Kla1().Kla2().callback()


2021-03-17 12:13:20,592 [main:28] - Try №44 of 502
2021-03-17 12:13:20,595 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:20,596 [main:66] - Compilation checking started
2021-03-17 12:13:21,064 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): type =
        Kla1().Kla2().callback()


2021-03-17 12:13:21,064 [main:28] - Try №45 of 502
2021-03-17 12:13:21,078 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:13:21,078 [main:66] - Compilation checking started
2021-03-17 12:13:21,533 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : R> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:21,533 [main:28] - Try №46 of 502
2021-03-17 12:13:21,537 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:13:21,537 [main:28] - Try №47 of 502
2021-03-17 12:13:21,546 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:21,546 [main:66] - Compilation checking started
2021-03-17 12:13:21,999 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<String>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<bByte, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:21,999 [main:28] - Try №48 of 502
2021-03-17 12:13:22,019 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:13:22,020 [main:66] - Compilation checking started
2021-03-17 12:13:22,592 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <T : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:22,592 [main:28] - Try №49 of 502
2021-03-17 12:13:22,597 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:22,598 [main:66] - Compilation checking started
2021-03-17 12:13:23,199 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "slltl"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:23,199 [main:28] - Try №50 of 502
2021-03-17 12:13:23,210 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:13:23,211 [main:66] - Compilation checking started
2021-03-17 12:13:23,848 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:23,848 [main:28] - Try №51 of 502
2021-03-17 12:13:23,857 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:23,857 [main:66] - Compilation checking started
2021-03-17 12:13:24,318 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): Unit = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:24,319 [main:28] - Try №52 of 502
2021-03-17 12:13:24,325 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:13:24,326 [main:66] - Compilation checking started
2021-03-17 12:13:24,793 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (Any::class.java).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:24,793 [main:28] - Try №53 of 502
2021-03-17 12:13:24,800 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:13:24,800 [main:28] - Try №54 of 502
2021-03-17 12:13:24,814 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-17 12:13:24,815 [main:66] - Compilation checking started
2021-03-17 12:13:25,284 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: (Int) -> Unit)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:25,284 [main:28] - Try №55 of 502
2021-03-17 12:13:25,296 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:13:25,297 [main:66] - Compilation checking started
2021-03-17 12:13:25,803 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<String>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:25,803 [main:28] - Try №56 of 502
2021-03-17 12:13:25,814 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:13:25,815 [main:28] - Try №57 of 502
2021-03-17 12:13:25,819 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:13:25,819 [main:28] - Try №58 of 502
2021-03-17 12:13:25,822 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:25,822 [main:66] - Compilation checking started
2021-03-17 12:13:26,298 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : r(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:26,298 [main:28] - Try №59 of 502
2021-03-17 12:13:26,302 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:26,302 [main:66] - Compilation checking started
2021-03-17 12:13:26,756 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, ints) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:26,756 [main:28] - Try №60 of 502
2021-03-17 12:13:26,765 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:26,765 [main:66] - Compilation checking started
2021-03-17 12:13:27,220 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$k'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:27,220 [main:28] - Try №61 of 502
2021-03-17 12:13:27,230 [main:33] - Trying to replace Element(TYPE_PARAMETER_LIST) on Element(TYPE_PARAMETER_LIST)
2021-03-17 12:13:27,231 [main:66] - Compilation checking started
2021-03-17 12:13:27,694 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Element> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:27,694 [main:28] - Try №62 of 502
2021-03-17 12:13:27,702 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:27,702 [main:66] - Compilation checking started
2021-03-17 12:13:28,153 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().JvmDefault().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:28,153 [main:28] - Try №63 of 502
2021-03-17 12:13:28,159 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:13:28,160 [main:66] - Compilation checking started
2021-03-17 12:13:28,621 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return l.add(1)
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:28,621 [main:28] - Try №64 of 502
2021-03-17 12:13:28,625 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:13:28,625 [main:28] - Try №65 of 502
2021-03-17 12:13:28,632 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:13:28,632 [main:66] - Compilation checking started
2021-03-17 12:13:29,080 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<*>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = b.g()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:29,080 [main:28] - Try №66 of 502
2021-03-17 12:13:29,092 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:13:29,093 [main:66] - Compilation checking started
2021-03-17 12:13:29,656 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<(Float)?, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:29,656 [main:28] - Try №67 of 502
2021-03-17 12:13:29,668 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:13:29,668 [main:66] - Compilation checking started
2021-03-17 12:13:30,247 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:30,247 [main:28] - Try №68 of 502
2021-03-17 12:13:30,258 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:13:30,258 [main:66] - Compilation checking started
2021-03-17 12:13:30,856 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:30,856 [main:28] - Try №69 of 502
2021-03-17 12:13:30,864 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:30,864 [main:28] - Try №70 of 502
2021-03-17 12:13:30,870 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:13:30,870 [main:66] - Compilation checking started
2021-03-17 12:13:31,321 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.arrayOf("x$it")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:31,321 [main:28] - Try №71 of 502
2021-03-17 12:13:31,324 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-17 12:13:31,325 [main:66] - Compilation checking started
2021-03-17 12:13:31,804 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "slltl"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun box(): String {
    val a = A()
    val ref = a::foo
    return ref(a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a)
}
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:31,804 [main:28] - Try №72 of 502
2021-03-17 12:13:31,814 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:13:31,815 [main:66] - Compilation checking started
2021-03-17 12:13:32,417 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:32,417 [main:28] - Try №73 of 502
2021-03-17 12:13:32,436 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:13:32,437 [main:66] - Compilation checking started
2021-03-17 12:13:33,041 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:33,041 [main:28] - Try №74 of 502
2021-03-17 12:13:33,044 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:33,044 [main:66] - Compilation checking started
2021-03-17 12:13:33,622 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<(Float)?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:33,622 [main:28] - Try №75 of 502
2021-03-17 12:13:33,633 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:13:33,633 [main:28] - Try №76 of 502
2021-03-17 12:13:33,648 [main:33] - Trying to replace Element(NULLABLE_TYPE) on Element(NULLABLE_TYPE)
2021-03-17 12:13:33,648 [main:66] - Compilation checking started
2021-03-17 12:13:34,220 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: Array<HashSet<Long>>): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:34,220 [main:28] - Try №77 of 502
2021-03-17 12:13:34,229 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:13:34,229 [main:66] - Compilation checking started
2021-03-17 12:13:34,809 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:34,810 [main:28] - Try №78 of 502
2021-03-17 12:13:34,822 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:13:34,822 [main:28] - Try №79 of 502
2021-03-17 12:13:34,825 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:34,826 [main:66] - Compilation checking started
2021-03-17 12:13:35,284 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): test = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:35,284 [main:28] - Try №80 of 502
2021-03-17 12:13:35,296 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:13:35,297 [main:28] - Try №81 of 502
2021-03-17 12:13:35,308 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-17 12:13:35,308 [main:66] - Compilation checking started
2021-03-17 12:13:35,759 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<OK>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:35,759 [main:28] - Try №82 of 502
2021-03-17 12:13:35,765 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:13:35,765 [main:66] - Compilation checking started
2021-03-17 12:13:36,279 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : String(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:36,279 [main:28] - Try №83 of 502
2021-03-17 12:13:36,283 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:13:36,283 [main:28] - Try №84 of 502
2021-03-17 12:13:36,286 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:36,286 [main:28] - Try №85 of 502
2021-03-17 12:13:36,298 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:13:36,298 [main:28] - Try №86 of 502
2021-03-17 12:13:36,306 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:36,307 [main:66] - Compilation checking started
2021-03-17 12:13:36,773 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            java {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:36,773 [main:28] - Try №87 of 502
2021-03-17 12:13:36,779 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:13:36,779 [main:66] - Compilation checking started
2021-03-17 12:13:37,232 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Int): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:37,232 [main:28] - Try №88 of 502
2021-03-17 12:13:37,239 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-17 12:13:37,239 [main:66] - Compilation checking started
2021-03-17 12:13:37,703 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> {
        longList += i
    }}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:37,703 [main:28] - Try №89 of 502
2021-03-17 12:13:37,715 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:13:37,715 [main:66] - Compilation checking started
2021-03-17 12:13:38,286 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:38,286 [main:28] - Try №90 of 502
2021-03-17 12:13:38,290 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-17 12:13:38,290 [main:66] - Compilation checking started
2021-03-17 12:13:38,746 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

suspend fun test(): Any {
        val b: IBar = this
        return b.bar().s
    }
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:38,746 [main:28] - Try №91 of 502
2021-03-17 12:13:38,754 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:38,754 [main:28] - Try №92 of 502
2021-03-17 12:13:38,760 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:13:38,760 [main:66] - Compilation checking started
2021-03-17 12:13:39,217 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (protectedFun()).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:39,217 [main:28] - Try №93 of 502
2021-03-17 12:13:39,223 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:13:39,223 [main:66] - Compilation checking started
2021-03-17 12:13:39,675 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().Runnable(getFun())


2021-03-17 12:13:39,675 [main:28] - Try №94 of 502
2021-03-17 12:13:39,683 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:39,683 [main:66] - Compilation checking started
2021-03-17 12:13:40,151 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<Set<Int>>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().name()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:40,151 [main:28] - Try №95 of 502
2021-03-17 12:13:40,156 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:13:40,156 [main:66] - Compilation checking started
2021-03-17 12:13:40,718 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: ArrayList<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:40,718 [main:28] - Try №96 of 502
2021-03-17 12:13:40,723 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:13:40,723 [main:66] - Compilation checking started
2021-03-17 12:13:41,288 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:41,289 [main:28] - Try №97 of 502
2021-03-17 12:13:41,303 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-17 12:13:41,303 [main:66] - Compilation checking started
2021-03-17 12:13:41,751 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (C::class.java.getConstructor(String::class.java).newInstance("O")).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:41,752 [main:28] - Try №98 of 502
2021-03-17 12:13:41,760 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:41,760 [main:66] - Compilation checking started
2021-03-17 12:13:42,201 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(assertEquals(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:42,202 [main:28] - Try №99 of 502
2021-03-17 12:13:42,215 [main:33] - Trying to replace Element(CONSTRUCTOR_CALLEE) on Element(CONSTRUCTOR_CALLEE)
2021-03-17 12:13:42,215 [main:66] - Compilation checking started
2021-03-17 12:13:42,678 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : C(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:42,678 [main:28] - Try №100 of 502
2021-03-17 12:13:42,690 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:13:42,691 [main:66] - Compilation checking started
2021-03-17 12:13:43,152 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<Long>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (Double)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:43,152 [main:28] - Try №101 of 502
2021-03-17 12:13:43,161 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:13:43,161 [main:66] - Compilation checking started
2021-03-17 12:13:43,732 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "slltl"
fun <T : Iterable<*>> test(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:43,732 [main:28] - Try №102 of 502
2021-03-17 12:13:43,743 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:13:43,743 [main:66] - Compilation checking started
2021-03-17 12:13:44,298 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:44,298 [main:28] - Try №103 of 502
2021-03-17 12:13:44,311 [main:28] - Try №104 of 502
2021-03-17 12:13:44,314 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:44,315 [main:66] - Compilation checking started
2021-03-17 12:13:44,760 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: other<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:44,760 [main:28] - Try №105 of 502
2021-03-17 12:13:44,765 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:13:44,765 [main:28] - Try №106 of 502
2021-03-17 12:13:44,768 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:44,769 [main:28] - Try №107 of 502
2021-03-17 12:13:44,777 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:44,777 [main:66] - Compilation checking started
2021-03-17 12:13:45,215 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, B>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:45,215 [main:28] - Try №108 of 502
2021-03-17 12:13:45,223 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:45,224 [main:66] - Compilation checking started
2021-03-17 12:13:45,669 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).assertEquals).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:45,669 [main:28] - Try №109 of 502
2021-03-17 12:13:45,680 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:13:45,680 [main:66] - Compilation checking started
2021-03-17 12:13:46,120 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "Wrong elements for 1 until 5: $list1", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:46,120 [main:28] - Try №110 of 502
2021-03-17 12:13:46,127 [main:33] - Trying to replace Element(TYPE_PARAMETER) on Element(TYPE_PARAMETER)
2021-03-17 12:13:46,127 [main:66] - Compilation checking started
2021-03-17 12:13:46,573 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Any> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:46,573 [main:28] - Try №111 of 502
2021-03-17 12:13:46,576 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:46,576 [main:66] - Compilation checking started
2021-03-17 12:13:47,163 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:47,163 [main:28] - Try №112 of 502
2021-03-17 12:13:47,166 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:47,166 [main:66] - Compilation checking started
2021-03-17 12:13:47,609 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val step = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:47,609 [main:28] - Try №113 of 502
2021-03-17 12:13:47,618 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:13:47,619 [main:66] - Compilation checking started
2021-03-17 12:13:48,069 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Unit -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:48,069 [main:28] - Try №114 of 502
2021-03-17 12:13:48,078 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:13:48,079 [main:66] - Compilation checking started
2021-03-17 12:13:48,538 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2(init = { invokeOrder += "init"; "I" }(),
                       constraints = *arrayOf({ invokeOrder += " constraints";A("C") }())).callback()


2021-03-17 12:13:48,538 [main:28] - Try №115 of 502
2021-03-17 12:13:48,542 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:13:48,542 [main:28] - Try №116 of 502
2021-03-17 12:13:48,552 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:48,552 [main:66] - Compilation checking started
2021-03-17 12:13:49,002 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,String<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:49,003 [main:28] - Try №117 of 502
2021-03-17 12:13:49,006 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:49,006 [main:66] - Compilation checking started
2021-03-17 12:13:49,583 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:49,583 [main:28] - Try №118 of 502
2021-03-17 12:13:49,601 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-17 12:13:49,601 [main:66] - Compilation checking started
2021-03-17 12:13:50,064 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val range3 = M_NAN .. NAN

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:50,064 [main:28] - Try №119 of 502
2021-03-17 12:13:50,071 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-17 12:13:50,071 [main:28] - Try №120 of 502
2021-03-17 12:13:50,077 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-17 12:13:50,078 [main:66] - Compilation checking started
2021-03-17 12:13:50,515 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        ulongList += i
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:50,515 [main:28] - Try №121 of 502
2021-03-17 12:13:50,518 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:50,519 [main:66] - Compilation checking started
2021-03-17 12:13:50,957 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T : Iterable<*>> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(E: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:50,957 [main:28] - Try №122 of 502
2021-03-17 12:13:50,959 [main:33] - Trying to replace Element(TYPE_PARAMETER_LIST) on Element(TYPE_PARAMETER_LIST)
2021-03-17 12:13:50,960 [main:66] - Compilation checking started
2021-03-17 12:13:51,512 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:51,512 [main:28] - Try №123 of 502
2021-03-17 12:13:51,524 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:13:51,525 [main:66] - Compilation checking started
2021-03-17 12:13:51,969 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$indexfail 1$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: (Int)? -> 1.toUShort()}))).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:51,969 [main:28] - Try №124 of 502
2021-03-17 12:13:51,973 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:13:51,973 [main:28] - Try №125 of 502
2021-03-17 12:13:51,983 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:13:51,983 [main:66] - Compilation checking started
2021-03-17 12:13:52,553 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:52,553 [main:28] - Try №126 of 502
2021-03-17 12:13:52,556 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:52,556 [main:66] - Compilation checking started
2021-03-17 12:13:52,991 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: x -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:52,991 [main:28] - Try №127 of 502
2021-03-17 12:13:52,996 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:13:52,997 [main:28] - Try №128 of 502
2021-03-17 12:13:53,007 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:13:53,007 [main:28] - Try №129 of 502
2021-03-17 12:13:53,019 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-17 12:13:53,019 [main:66] - Compilation checking started
2021-03-17 12:13:53,577 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<Int>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:53,577 [main:28] - Try №130 of 502
2021-03-17 12:13:53,583 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:13:53,583 [main:28] - Try №131 of 502
2021-03-17 12:13:53,588 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:53,589 [main:66] - Compilation checking started
2021-03-17 12:13:54,030 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(iterable: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<Int>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.l()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:54,030 [main:28] - Try №132 of 502
2021-03-17 12:13:54,033 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:54,034 [main:66] - Compilation checking started
2021-03-17 12:13:54,589 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<Int>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:54,589 [main:28] - Try №133 of 502
2021-03-17 12:13:54,592 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:54,592 [main:66] - Compilation checking started
2021-03-17 12:13:55,039 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,foo<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<Int>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:55,039 [main:28] - Try №134 of 502
2021-03-17 12:13:55,052 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:13:55,053 [main:28] - Try №135 of 502
2021-03-17 12:13:55,059 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:13:55,059 [main:66] - Compilation checking started
2021-03-17 12:13:55,514 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<Int>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            startsWith(prefix)
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:55,515 [main:28] - Try №136 of 502
2021-03-17 12:13:55,523 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:55,523 [main:66] - Compilation checking started
2021-03-17 12:13:55,958 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<Int>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: x): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:55,958 [main:28] - Try №137 of 502
2021-03-17 12:13:55,966 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:55,967 [main:66] - Compilation checking started
2021-03-17 12:13:56,412 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<Int>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): ULong =
        Kla1().Kla2().callback()


2021-03-17 12:13:56,412 [main:28] - Try №138 of 502
2021-03-17 12:13:56,421 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:56,422 [main:66] - Compilation checking started
2021-03-17 12:13:56,880 [main:49] - Result = false
Text:
val xs = result("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<Int>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:56,881 [main:28] - Try №139 of 502
2021-03-17 12:13:56,887 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-17 12:13:56,887 [main:28] - Try №140 of 502
2021-03-17 12:13:56,891 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:13:56,891 [main:28] - Try №141 of 502
2021-03-17 12:13:56,903 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:13:56,903 [main:28] - Try №142 of 502
2021-03-17 12:13:56,908 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:13:56,908 [main:28] - Try №143 of 502
2021-03-17 12:13:56,916 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-17 12:13:56,916 [main:28] - Try №144 of 502
2021-03-17 12:13:56,928 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:13:56,928 [main:28] - Try №145 of 502
2021-03-17 12:13:56,939 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-17 12:13:56,939 [main:28] - Try №146 of 502
2021-03-17 12:13:56,943 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:56,943 [main:66] - Compilation checking started
2021-03-17 12:13:57,490 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<Int>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:57,490 [main:28] - Try №147 of 502
2021-03-17 12:13:57,498 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:57,498 [main:28] - Try №148 of 502
2021-03-17 12:13:57,501 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:13:57,501 [main:28] - Try №149 of 502
2021-03-17 12:13:57,509 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:57,510 [main:66] - Compilation checking started
2021-03-17 12:13:57,952 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<Int>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(PsiModifierListOwner(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:57,953 [main:28] - Try №150 of 502
2021-03-17 12:13:57,962 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:13:57,962 [main:28] - Try №151 of 502
2021-03-17 12:13:57,970 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:57,971 [main:66] - Compilation checking started
2021-03-17 12:13:58,411 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : Iterable<Int>> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.result()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:58,411 [main:28] - Try №152 of 502
2021-03-17 12:13:58,420 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:13:58,420 [main:66] - Compilation checking started
2021-03-17 12:13:58,974 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:58,974 [main:28] - Try №153 of 502
2021-03-17 12:13:58,983 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:13:58,983 [main:66] - Compilation checking started
2021-03-17 12:13:59,528 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:59,528 [main:28] - Try №154 of 502
2021-03-17 12:13:59,537 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:13:59,537 [main:66] - Compilation checking started
2021-03-17 12:13:59,974 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).java().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:13:59,975 [main:28] - Try №155 of 502
2021-03-17 12:13:59,982 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:13:59,982 [main:28] - Try №156 of 502
2021-03-17 12:13:59,994 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:13:59,995 [main:66] - Compilation checking started
2021-03-17 12:14:00,554 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:00,554 [main:28] - Try №157 of 502
2021-03-17 12:14:00,564 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:14:00,564 [main:66] - Compilation checking started
2021-03-17 12:14:01,134 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "slltl"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:01,134 [main:28] - Try №158 of 502
2021-03-17 12:14:01,144 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:14:01,145 [main:66] - Compilation checking started
2021-03-17 12:14:01,705 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Set<String>,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:01,706 [main:28] - Try №159 of 502
2021-03-17 12:14:01,715 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:14:01,716 [main:66] - Compilation checking started
2021-03-17 12:14:02,159 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Set<String>,Double>): Int = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:02,159 [main:28] - Try №160 of 502
2021-03-17 12:14:02,168 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:14:02,169 [main:66] - Compilation checking started
2021-03-17 12:14:02,713 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:02,713 [main:28] - Try №161 of 502
2021-03-17 12:14:02,718 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:14:02,719 [main:66] - Compilation checking started
2021-03-17 12:14:03,170 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:03,171 [main:28] - Try №162 of 502
2021-03-17 12:14:03,178 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:14:03,179 [main:66] - Compilation checking started
2021-03-17 12:14:03,614 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "OK"
fun <T : test<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:03,615 [main:28] - Try №163 of 502
2021-03-17 12:14:03,623 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:14:03,624 [main:66] - Compilation checking started
2021-03-17 12:14:04,060 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort("OK")}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:04,060 [main:28] - Try №164 of 502
2021-03-17 12:14:04,063 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:04,063 [main:66] - Compilation checking started
2021-03-17 12:14:04,500 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "K"

fun String() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:04,500 [main:28] - Try №165 of 502
2021-03-17 12:14:04,507 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-17 12:14:04,507 [main:28] - Try №166 of 502
2021-03-17 12:14:04,510 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:04,510 [main:66] - Compilation checking started
2021-03-17 12:14:05,050 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:05,050 [main:28] - Try №167 of 502
2021-03-17 12:14:05,056 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:14:05,056 [main:66] - Compilation checking started
2021-03-17 12:14:05,505 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).callBy(mapOf(
            concatParams[0] to "",
            concatParams[1] to "O",
            concatParams[3] to ""
    )).toString()

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:05,505 [main:28] - Try №168 of 502
2021-03-17 12:14:05,513 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:14:05,513 [main:66] - Compilation checking started
2021-03-17 12:14:05,959 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Exception<*>> test(a: List<Short>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <T : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:05,960 [main:28] - Try №169 of 502
2021-03-17 12:14:05,963 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:05,963 [main:66] - Compilation checking started
2021-03-17 12:14:06,507 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:06,507 [main:28] - Try №170 of 502
2021-03-17 12:14:06,519 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-17 12:14:06,519 [main:66] - Compilation checking started
2021-03-17 12:14:06,957 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "slltl"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<*>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:06,957 [main:28] - Try №171 of 502
2021-03-17 12:14:06,970 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:14:06,970 [main:28] - Try №172 of 502
2021-03-17 12:14:06,987 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:14:06,988 [main:66] - Compilation checking started
2021-03-17 12:14:07,547 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:07,547 [main:28] - Try №173 of 502
2021-03-17 12:14:07,558 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:14:07,558 [main:28] - Try №174 of 502
2021-03-17 12:14:07,561 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:07,561 [main:66] - Compilation checking started
2021-03-17 12:14:07,999 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).j("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:07,999 [main:28] - Try №175 of 502
2021-03-17 12:14:08,002 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:08,002 [main:66] - Compilation checking started
2021-03-17 12:14:08,441 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val localObject = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:08,441 [main:28] - Try №176 of 502
2021-03-17 12:14:08,448 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:14:08,448 [main:66] - Compilation checking started
2021-03-17 12:14:08,896 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> M().doTest().toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:08,896 [main:28] - Try №177 of 502
2021-03-17 12:14:08,899 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:08,900 [main:66] - Compilation checking started
2021-03-17 12:14:09,342 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).base()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:09,342 [main:28] - Try №178 of 502
2021-03-17 12:14:09,350 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:14:09,350 [main:28] - Try №179 of 502
2021-03-17 12:14:09,357 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:14:09,357 [main:66] - Compilation checking started
2021-03-17 12:14:09,916 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: List<Short>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:09,916 [main:28] - Try №180 of 502
2021-03-17 12:14:09,919 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:09,920 [main:28] - Try №181 of 502
2021-03-17 12:14:09,925 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:14:09,925 [main:66] - Compilation checking started
2021-03-17 12:14:10,481 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "c", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:10,481 [main:28] - Try №182 of 502
2021-03-17 12:14:10,489 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:14:10,489 [main:28] - Try №183 of 502
2021-03-17 12:14:10,501 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:14:10,501 [main:66] - Compilation checking started
2021-03-17 12:14:11,037 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:11,037 [main:28] - Try №184 of 502
2021-03-17 12:14:11,040 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:11,040 [main:66] - Compilation checking started
2021-03-17 12:14:11,466 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val intProgression = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:11,466 [main:28] - Try №185 of 502
2021-03-17 12:14:11,469 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:11,469 [main:66] - Compilation checking started
2021-03-17 12:14:11,906 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : create<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:11,906 [main:28] - Try №186 of 502
2021-03-17 12:14:11,909 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:11,909 [main:66] - Compilation checking started
2021-03-17 12:14:12,347 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<ulongList>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:12,347 [main:28] - Try №187 of 502
2021-03-17 12:14:12,356 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:14:12,356 [main:28] - Try №188 of 502
2021-03-17 12:14:12,359 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:12,360 [main:66] - Compilation checking started
2021-03-17 12:14:12,790 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((StrS<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:12,790 [main:28] - Try №189 of 502
2021-03-17 12:14:12,801 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-17 12:14:12,802 [main:28] - Try №190 of 502
2021-03-17 12:14:12,813 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:14:12,814 [main:28] - Try №191 of 502
2021-03-17 12:14:12,822 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:14:12,822 [main:66] - Compilation checking started
2021-03-17 12:14:13,257 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().B().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:13,258 [main:28] - Try №192 of 502
2021-03-17 12:14:13,274 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-17 12:14:13,275 [main:28] - Try №193 of 502
2021-03-17 12:14:13,291 [main:33] - Trying to replace Element(FOR) on Element(FOR)
2021-03-17 12:14:13,291 [main:66] - Compilation checking started
2021-03-17 12:14:13,722 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for (color in arr) {
        when (color) {
            Color.RED -> return color
            Color.GREEN -> break@loop
            Color.BLUE -> if (arr.size == 1) return color else continue@loop
        }
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("123", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:13,722 [main:28] - Try №194 of 502
2021-03-17 12:14:13,728 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:14:13,728 [main:28] - Try №195 of 502
2021-03-17 12:14:13,739 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:14:13,739 [main:66] - Compilation checking started
2021-03-17 12:14:14,301 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:14,301 [main:28] - Try №196 of 502
2021-03-17 12:14:14,316 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-17 12:14:14,316 [main:66] - Compilation checking started
2021-03-17 12:14:14,750 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (A::bar).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:14,750 [main:28] - Try №197 of 502
2021-03-17 12:14:14,753 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:14,753 [main:66] - Compilation checking started
2021-03-17 12:14:15,189 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : AssertionError<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:15,189 [main:28] - Try №198 of 502
2021-03-17 12:14:15,197 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:14:15,197 [main:28] - Try №199 of 502
2021-03-17 12:14:15,209 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:14:15,209 [main:66] - Compilation checking started
2021-03-17 12:14:15,642 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<String>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:15,642 [main:28] - Try №200 of 502
2021-03-17 12:14:15,645 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:15,646 [main:66] - Compilation checking started
2021-03-17 12:14:16,091 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", "b", "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.box()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:16,092 [main:28] - Try №201 of 502
2021-03-17 12:14:16,098 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-17 12:14:16,099 [main:28] - Try №202 of 502
2021-03-17 12:14:16,104 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:14:16,104 [main:28] - Try №203 of 502
2021-03-17 12:14:16,114 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:14:16,114 [main:66] - Compilation checking started
2021-03-17 12:14:16,649 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:16,649 [main:28] - Try №204 of 502
2021-03-17 12:14:16,653 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:16,653 [main:66] - Compilation checking started
2021-03-17 12:14:17,083 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.dist()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:17,084 [main:28] - Try №205 of 502
2021-03-17 12:14:17,094 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:14:17,094 [main:28] - Try №206 of 502
2021-03-17 12:14:17,105 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:14:17,106 [main:28] - Try №207 of 502
2021-03-17 12:14:17,115 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:14:17,115 [main:28] - Try №208 of 502
2021-03-17 12:14:17,118 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:17,119 [main:28] - Try №209 of 502
2021-03-17 12:14:17,129 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:14:17,129 [main:28] - Try №210 of 502
2021-03-17 12:14:17,141 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:14:17,141 [main:66] - Compilation checking started
2021-03-17 12:14:17,690 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:17,690 [main:28] - Try №211 of 502
2021-03-17 12:14:17,693 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:17,693 [main:66] - Compilation checking started
2021-03-17 12:14:18,141 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).box()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:18,141 [main:28] - Try №212 of 502
2021-03-17 12:14:18,152 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:14:18,153 [main:28] - Try №213 of 502
2021-03-17 12:14:18,163 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:14:18,164 [main:28] - Try №214 of 502
2021-03-17 12:14:18,169 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:14:18,170 [main:66] - Compilation checking started
2021-03-17 12:14:18,598 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<*>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (toLong()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:18,598 [main:28] - Try №215 of 502
2021-03-17 12:14:18,610 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-17 12:14:18,611 [main:66] - Compilation checking started
2021-03-17 12:14:19,143 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:19,143 [main:28] - Try №216 of 502
2021-03-17 12:14:19,145 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-17 12:14:19,146 [main:66] - Compilation checking started
2021-03-17 12:14:19,682 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:19,682 [main:28] - Try №217 of 502
2021-03-17 12:14:19,691 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:14:19,692 [main:28] - Try №218 of 502
2021-03-17 12:14:19,707 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-17 12:14:19,707 [main:66] - Compilation checking started
2021-03-17 12:14:20,156 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(iterable: Short): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = ('0' == ax).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:20,156 [main:28] - Try №219 of 502
2021-03-17 12:14:20,160 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-17 12:14:20,161 [main:66] - Compilation checking started
2021-03-17 12:14:20,703 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:20,703 [main:28] - Try №220 of 502
2021-03-17 12:14:20,711 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:14:20,711 [main:66] - Compilation checking started
2021-03-17 12:14:21,138 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = String()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:21,138 [main:28] - Try №221 of 502
2021-03-17 12:14:21,146 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-17 12:14:21,146 [main:66] - Compilation checking started
2021-03-17 12:14:21,578 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(x: Int): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(iterable: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:21,578 [main:28] - Try №222 of 502
2021-03-17 12:14:21,583 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:14:21,584 [main:28] - Try №223 of 502
2021-03-17 12:14:21,587 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:21,587 [main:66] - Compilation checking started
2021-03-17 12:14:22,120 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:22,120 [main:28] - Try №224 of 502
2021-03-17 12:14:22,126 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:14:22,127 [main:66] - Compilation checking started
2021-03-17 12:14:22,596 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = Class.forName("_1Kt\$box$1").toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:22,596 [main:28] - Try №225 of 502
2021-03-17 12:14:22,606 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:14:22,606 [main:28] - Try №226 of 502
2021-03-17 12:14:22,609 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:22,610 [main:66] - Compilation checking started
2021-03-17 12:14:23,051 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<foo>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:23,052 [main:28] - Try №227 of 502
2021-03-17 12:14:23,057 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:14:23,057 [main:66] - Compilation checking started
2021-03-17 12:14:23,489 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "Fail", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,A>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:23,489 [main:28] - Try №228 of 502
2021-03-17 12:14:23,500 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:14:23,500 [main:66] - Compilation checking started
2021-03-17 12:14:24,042 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "OK", "d")

fun <EmptyContinuation : Iterable<String>> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:24,042 [main:28] - Try №229 of 502
2021-03-17 12:14:24,050 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:14:24,050 [main:28] - Try №230 of 502
2021-03-17 12:14:24,053 [main:33] - Trying to replace Element(TYPE_PARAMETER_LIST) on Element(TYPE_PARAMETER_LIST)
2021-03-17 12:14:24,053 [main:66] - Compilation checking started
2021-03-17 12:14:24,601 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "OK", "d")

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:24,601 [main:28] - Try №231 of 502
2021-03-17 12:14:24,611 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:14:24,611 [main:28] - Try №232 of 502
2021-03-17 12:14:24,618 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:14:24,618 [main:66] - Compilation checking started
2021-03-17 12:14:25,056 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "OK", "d")

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = c.startCoroutine(CheckStateMachineContinuation)

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:25,056 [main:28] - Try №233 of 502
2021-03-17 12:14:25,066 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:14:25,066 [main:66] - Compilation checking started
2021-03-17 12:14:25,612 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "OK", "OK")

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:25,612 [main:28] - Try №234 of 502
2021-03-17 12:14:25,615 [main:33] - Trying to replace Element(PRIMARY_CONSTRUCTOR) on Element(PRIMARY_CONSTRUCTOR)
2021-03-17 12:14:25,615 [main:66] - Compilation checking started
2021-03-17 12:14:26,041 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "OK", "OK")

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val x: Any)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:26,042 [main:28] - Try №235 of 502
2021-03-17 12:14:26,050 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:14:26,050 [main:28] - Try №236 of 502
2021-03-17 12:14:26,056 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:14:26,056 [main:66] - Compilation checking started
2021-03-17 12:14:26,481 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "OK", "OK")

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).Alias(23).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:26,481 [main:28] - Try №237 of 502
2021-03-17 12:14:26,485 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:26,486 [main:66] - Compilation checking started
2021-03-17 12:14:26,934 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "OK", "OK")

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).predicate.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:26,934 [main:28] - Try №238 of 502
2021-03-17 12:14:26,940 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:14:26,940 [main:66] - Compilation checking started
2021-03-17 12:14:27,371 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "OK", "OK")

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).TODO("Not yet implemented")).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:27,372 [main:28] - Try №239 of 502
2021-03-17 12:14:27,376 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:14:27,376 [main:28] - Try №240 of 502
2021-03-17 12:14:27,384 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:14:27,384 [main:66] - Compilation checking started
2021-03-17 12:14:27,819 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "OK", "OK")

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Any().Kla2().callback()


2021-03-17 12:14:27,819 [main:28] - Try №241 of 502
2021-03-17 12:14:27,829 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-17 12:14:27,829 [main:66] - Compilation checking started
2021-03-17 12:14:28,267 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "OK", "OK")

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val b = B()
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:28,267 [main:28] - Try №242 of 502
2021-03-17 12:14:28,282 [main:33] - Trying to replace Element(FOR) on Element(FOR)
2021-03-17 12:14:28,282 [main:66] - Compilation checking started
2021-03-17 12:14:28,721 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "OK", "OK")

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for (i in 1 until 8 step 7) {
        intList += i
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:28,721 [main:28] - Try №243 of 502
2021-03-17 12:14:28,724 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:28,725 [main:66] - Compilation checking started
2021-03-17 12:14:29,159 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "OK", "OK")

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().String().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:29,159 [main:28] - Try №244 of 502
2021-03-17 12:14:29,172 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:14:29,173 [main:28] - Try №245 of 502
2021-03-17 12:14:29,181 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:14:29,181 [main:66] - Compilation checking started
2021-03-17 12:14:29,636 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "OK", "OK")

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: String): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, String>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:29,636 [main:28] - Try №246 of 502
2021-03-17 12:14:29,647 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:14:29,647 [main:28] - Try №247 of 502
2021-03-17 12:14:29,651 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:29,651 [main:28] - Try №248 of 502
2021-03-17 12:14:29,654 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:29,654 [main:28] - Try №249 of 502
2021-03-17 12:14:29,663 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:14:29,664 [main:28] - Try №250 of 502
2021-03-17 12:14:29,676 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:14:29,676 [main:66] - Compilation checking started
2021-03-17 12:14:30,209 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "OK", "OK")

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:30,209 [main:28] - Try №251 of 502
2021-03-17 12:14:30,219 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:14:30,219 [main:66] - Compilation checking started
2021-03-17 12:14:30,656 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "OK", "OK")

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            x
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:30,656 [main:28] - Try №252 of 502
2021-03-17 12:14:30,659 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:30,660 [main:28] - Try №253 of 502
2021-03-17 12:14:30,673 [main:28] - Try №254 of 502
2021-03-17 12:14:30,677 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:14:30,677 [main:28] - Try №255 of 502
2021-03-17 12:14:30,688 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:14:30,689 [main:28] - Try №256 of 502
2021-03-17 12:14:30,698 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:14:30,699 [main:66] - Compilation checking started
2021-03-17 12:14:31,139 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "OK", "OK")

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,add>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:31,140 [main:28] - Try №257 of 502
2021-03-17 12:14:31,149 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-17 12:14:31,150 [main:66] - Compilation checking started
2021-03-17 12:14:31,574 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "OK", "OK")

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    var a = A("")

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:31,574 [main:28] - Try №258 of 502
2021-03-17 12:14:31,584 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:14:31,584 [main:28] - Try №259 of 502
2021-03-17 12:14:31,597 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:14:31,597 [main:66] - Compilation checking started
2021-03-17 12:14:32,134 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "OK", "OK")

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:32,134 [main:28] - Try №260 of 502
2021-03-17 12:14:32,137 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:32,137 [main:66] - Compilation checking started
2021-03-17 12:14:32,577 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "OK", "OK")

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class materializeInvInv : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:32,577 [main:28] - Try №261 of 502
2021-03-17 12:14:32,583 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:14:32,583 [main:66] - Compilation checking started
2021-03-17 12:14:33,031 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "OK", "OK")

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).runSlowly {
            foo = "OK"
            foo
        }

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:33,031 [main:28] - Try №262 of 502
2021-03-17 12:14:33,036 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:33,036 [main:66] - Compilation checking started
2021-03-17 12:14:33,461 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "OK", "OK")

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).localResult).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:33,462 [main:28] - Try №263 of 502
2021-03-17 12:14:33,469 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-17 12:14:33,469 [main:66] - Compilation checking started
2021-03-17 12:14:33,896 [main:49] - Result = false
Text:
val xs = listOf("a", "OK", "OK", "OK")

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <T : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(ref: () -> Unit)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:33,896 [main:28] - Try №264 of 502
2021-03-17 12:14:33,901 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:33,902 [main:66] - Compilation checking started
2021-03-17 12:14:34,441 [main:53] - Result = true
Text:
val xs = listOf("a", "OK", "OK", "OK")

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:34,441 [main:28] - Try №265 of 502
2021-03-17 12:14:34,447 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:14:34,448 [main:28] - Try №266 of 502
2021-03-17 12:14:34,463 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:14:34,463 [main:66] - Compilation checking started
2021-03-17 12:14:35,017 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:35,018 [main:28] - Try №267 of 502
2021-03-17 12:14:35,027 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:14:35,028 [main:66] - Compilation checking started
2021-03-17 12:14:35,473 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>("123")).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:35,474 [main:28] - Try №268 of 502
2021-03-17 12:14:35,477 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:35,477 [main:66] - Compilation checking started
2021-03-17 12:14:35,910 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val foo = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:35,910 [main:28] - Try №269 of 502
2021-03-17 12:14:35,925 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-17 12:14:35,925 [main:66] - Compilation checking started
2021-03-17 12:14:36,357 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {
            foo = "O"
            foo + bar()
        }))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:36,357 [main:28] - Try №270 of 502
2021-03-17 12:14:36,363 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:14:36,364 [main:66] - Compilation checking started
2021-03-17 12:14:36,796 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toChar()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:36,796 [main:28] - Try №271 of 502
2021-03-17 12:14:36,799 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:36,800 [main:66] - Compilation checking started
2021-03-17 12:14:37,242 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val O = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:37,242 [main:28] - Try №272 of 502
2021-03-17 12:14:37,254 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:14:37,255 [main:66] - Compilation checking started
2021-03-17 12:14:37,694 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,NullableInt>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:37,694 [main:28] - Try №273 of 502
2021-03-17 12:14:37,698 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-17 12:14:37,698 [main:66] - Compilation checking started
2021-03-17 12:14:38,207 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun builder(shouldSuspend: Boolean, expectedCount: Int, c: suspend () -> String): String {
    callback = {}
    var fromSuspension: String? = null
    var counter = 0

    val result = try {
        c.startCoroutineUninterceptedOrReturn(object: ContinuationAdapter<String>() {
            override val context: CoroutineContext
                get() =  ContinuationDispatcher { counter++ }

            override fun resumeWithException(exception: Throwable) {
                fromSuspension = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                fromSuspension = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    callback()

    if (counter != expectedCount) throw RuntimeException("fail 0")

    if (shouldSuspend) {
        if (result !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (fromSuspension == null) throw RuntimeException("fail 2")
        return fromSuspension!!
    }

    if (result === COROUTINE_SUSPENDED) throw RuntimeException("fail 3")
    return result as String
}

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:38,207 [main:28] - Try №274 of 502
2021-03-17 12:14:38,215 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:14:38,215 [main:66] - Compilation checking started
2021-03-17 12:14:38,662 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: String): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:38,662 [main:28] - Try №275 of 502
2021-03-17 12:14:38,666 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:14:38,666 [main:28] - Try №276 of 502
2021-03-17 12:14:38,669 [main:33] - Trying to replace Element(TYPE_PARAMETER_LIST) on Element(TYPE_PARAMETER_LIST)
2021-03-17 12:14:38,669 [main:66] - Compilation checking started
2021-03-17 12:14:39,164 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <reified T> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:39,164 [main:28] - Try №277 of 502
2021-03-17 12:14:39,169 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:39,169 [main:66] - Compilation checking started
2021-03-17 12:14:39,611 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<Long,LightVariable<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:39,612 [main:28] - Try №278 of 502
2021-03-17 12:14:39,623 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-17 12:14:39,624 [main:28] - Try №279 of 502
2021-03-17 12:14:39,627 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:39,627 [main:66] - Compilation checking started
2021-03-17 12:14:40,431 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<value>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:40,432 [main:28] - Try №280 of 502
2021-03-17 12:14:40,437 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:14:40,437 [main:28] - Try №281 of 502
2021-03-17 12:14:40,447 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:14:40,447 [main:28] - Try №282 of 502
2021-03-17 12:14:40,449 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-17 12:14:40,450 [main:66] - Compilation checking started
2021-03-17 12:14:40,912 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun box(): String {
    val uintList = mutableListOf<UInt>()
    val uintProgression = 1.toUByte()..7.toUByte()
    for (i in uintProgression step 2) {
        uintList += i
    }
    assertEquals(listOf(1u, 3u, 5u, 7u), uintList)

    return "OK"
}
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:40,912 [main:28] - Try №283 of 502
2021-03-17 12:14:40,921 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:14:40,921 [main:28] - Try №284 of 502
2021-03-17 12:14:40,927 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:14:40,927 [main:66] - Compilation checking started
2021-03-17 12:14:41,365 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.f(x)

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:41,365 [main:28] - Try №285 of 502
2021-03-17 12:14:41,373 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:14:41,374 [main:66] - Compilation checking started
2021-03-17 12:14:41,964 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:41,964 [main:28] - Try №286 of 502
2021-03-17 12:14:41,973 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:14:41,973 [main:28] - Try №287 of 502
2021-03-17 12:14:41,981 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:14:41,981 [main:28] - Try №288 of 502
2021-03-17 12:14:41,992 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:14:41,992 [main:66] - Compilation checking started
2021-03-17 12:14:42,428 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin(1)

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:42,428 [main:28] - Try №289 of 502
2021-03-17 12:14:42,438 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:42,438 [main:28] - Try №290 of 502
2021-03-17 12:14:42,455 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-17 12:14:42,455 [main:66] - Compilation checking started
2021-03-17 12:14:42,887 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "slltl"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, { enumValues<Y>() }))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:42,887 [main:28] - Try №291 of 502
2021-03-17 12:14:42,898 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:14:42,899 [main:28] - Try №292 of 502
2021-03-17 12:14:42,911 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:14:42,911 [main:66] - Compilation checking started
2021-03-17 12:14:43,460 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:43,460 [main:28] - Try №293 of 502
2021-03-17 12:14:43,474 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-17 12:14:43,475 [main:66] - Compilation checking started
2021-03-17 12:14:44,021 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((::aBcde).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:44,021 [main:28] - Try №294 of 502
2021-03-17 12:14:44,025 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:44,025 [main:66] - Compilation checking started
2021-03-17 12:14:44,486 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("krmnl")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (String<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:44,486 [main:28] - Try №295 of 502
2021-03-17 12:14:44,491 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:44,492 [main:28] - Try №296 of 502
2021-03-17 12:14:44,508 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:14:44,508 [main:66] - Compilation checking started
2021-03-17 12:14:45,086 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:45,086 [main:28] - Try №297 of 502
2021-03-17 12:14:45,094 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:14:45,094 [main:28] - Try №298 of 502
2021-03-17 12:14:45,097 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-17 12:14:45,097 [main:66] - Compilation checking started
2021-03-17 12:14:45,555 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<Long,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun box(): String {
    var map = HashPMap.empty<String, Any>()!!

    map = map.plus("lol", 42)!!

    assertEquals(1, map.size())
    assertTrue(map.containsKey("lol"))
    assertFalse(map.containsKey(""))
    assertEquals(42, map["lol"])
    assertEquals(null, map[""])

    map = map.plus("", 0)!!

    assertEquals(2, map.size())
    assertTrue(map.containsKey("lol"))
    assertTrue(map.containsKey(""))
    assertEquals(42, map["lol"])
    assertEquals(0, map[""])

    return "OK"
}

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:45,555 [main:28] - Try №299 of 502
2021-03-17 12:14:45,564 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:14:45,564 [main:66] - Compilation checking started
2021-03-17 12:14:46,113 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:46,113 [main:28] - Try №300 of 502
2021-03-17 12:14:46,122 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:14:46,122 [main:66] - Compilation checking started
2021-03-17 12:14:46,570 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("OK", 3, "c", Unit)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: test -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:46,570 [main:28] - Try №301 of 502
2021-03-17 12:14:46,580 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:14:46,581 [main:66] - Compilation checking started
2021-03-17 12:14:47,108 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:47,108 [main:28] - Try №302 of 502
2021-03-17 12:14:47,120 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:14:47,120 [main:28] - Try №303 of 502
2021-03-17 12:14:47,135 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-17 12:14:47,136 [main:66] - Compilation checking started
2021-03-17 12:14:47,585 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((intArrayOf() as Any).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:47,585 [main:28] - Try №304 of 502
2021-03-17 12:14:47,592 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-17 12:14:47,592 [main:28] - Try №305 of 502
2021-03-17 12:14:47,601 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:14:47,601 [main:28] - Try №306 of 502
2021-03-17 12:14:47,604 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:47,604 [main:66] - Compilation checking started
2021-03-17 12:14:48,150 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:48,150 [main:28] - Try №307 of 502
2021-03-17 12:14:48,159 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:14:48,160 [main:66] - Compilation checking started
2021-03-17 12:14:48,623 [main:49] - Result = false
Text:
val xs = A(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:48,623 [main:28] - Try №308 of 502
2021-03-17 12:14:48,627 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:48,627 [main:66] - Compilation checking started
2021-03-17 12:14:49,096 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): name = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:49,097 [main:28] - Try №309 of 502
2021-03-17 12:14:49,101 [main:33] - Trying to replace Element(PRIMARY_CONSTRUCTOR) on Element(PRIMARY_CONSTRUCTOR)
2021-03-17 12:14:49,101 [main:66] - Compilation checking started
2021-03-17 12:14:49,536 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> test(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val value : Int)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:49,536 [main:28] - Try №310 of 502
2021-03-17 12:14:49,539 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:49,539 [main:66] - Compilation checking started
2021-03-17 12:14:50,123 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:50,124 [main:28] - Try №311 of 502
2021-03-17 12:14:50,126 [main:33] - Trying to replace Element(CLASS) on Element(CLASS)
2021-03-17 12:14:50,126 [main:66] - Compilation checking started
2021-03-17 12:14:50,560 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

class A

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:50,561 [main:28] - Try №312 of 502
2021-03-17 12:14:50,564 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:50,564 [main:66] - Compilation checking started
2021-03-17 12:14:51,010 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).e.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:51,010 [main:28] - Try №313 of 502
2021-03-17 12:14:51,012 [main:33] - Trying to replace Element(CLASS) on Element(CLASS)
2021-03-17 12:14:51,012 [main:66] - Compilation checking started
2021-03-17 12:14:51,443 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    class Foo {
    fun foo() = "O"
}
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:51,443 [main:28] - Try №314 of 502
2021-03-17 12:14:51,453 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:14:51,454 [main:66] - Compilation checking started
2021-03-17 12:14:51,894 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        kotlin.coroutines.intrinsics.callback()


2021-03-17 12:14:51,894 [main:28] - Try №315 of 502
2021-03-17 12:14:51,902 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:14:51,903 [main:28] - Try №316 of 502
2021-03-17 12:14:51,909 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-17 12:14:51,909 [main:66] - Compilation checking started
2021-03-17 12:14:52,370 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                {
        return TestApp.getValue();
    }
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:52,370 [main:28] - Try №317 of 502
2021-03-17 12:14:52,383 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-17 12:14:52,383 [main:66] - Compilation checking started
2021-03-17 12:14:52,825 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Iterable<*>> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:52,826 [main:28] - Try №318 of 502
2021-03-17 12:14:52,839 [main:28] - Try №319 of 502
2021-03-17 12:14:52,842 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:52,842 [main:28] - Try №320 of 502
2021-03-17 12:14:52,850 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:14:52,850 [main:28] - Try №321 of 502
2021-03-17 12:14:52,864 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:14:52,864 [main:28] - Try №322 of 502
2021-03-17 12:14:52,876 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-17 12:14:52,876 [main:28] - Try №323 of 502
2021-03-17 12:14:52,885 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:14:52,886 [main:28] - Try №324 of 502
2021-03-17 12:14:52,897 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-17 12:14:52,897 [main:28] - Try №325 of 502
2021-03-17 12:14:52,900 [main:33] - Trying to replace Element(TYPE_PARAMETER_LIST) on Element(TYPE_PARAMETER_LIST)
2021-03-17 12:14:52,900 [main:66] - Compilation checking started
2021-03-17 12:14:53,461 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:53,462 [main:28] - Try №326 of 502
2021-03-17 12:14:53,470 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:14:53,471 [main:66] - Compilation checking started
2021-03-17 12:14:53,903 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>(0xff0000)).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:53,903 [main:28] - Try №327 of 502
2021-03-17 12:14:53,912 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:14:53,912 [main:28] - Try №328 of 502
2021-03-17 12:14:53,921 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:14:53,921 [main:66] - Compilation checking started
2021-03-17 12:14:54,384 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): test = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:54,384 [main:28] - Try №329 of 502
2021-03-17 12:14:54,392 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:14:54,393 [main:28] - Try №330 of 502
2021-03-17 12:14:54,405 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:14:54,405 [main:28] - Try №331 of 502
2021-03-17 12:14:54,408 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:54,408 [main:66] - Compilation checking started
2021-03-17 12:14:54,841 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> test(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).bar("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:54,841 [main:28] - Try №332 of 502
2021-03-17 12:14:54,851 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:14:54,852 [main:28] - Try №333 of 502
2021-03-17 12:14:54,855 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:54,855 [main:66] - Compilation checking started
2021-03-17 12:14:55,402 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:55,402 [main:28] - Try №334 of 502
2021-03-17 12:14:55,413 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:14:55,413 [main:28] - Try №335 of 502
2021-03-17 12:14:55,418 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:14:55,418 [main:28] - Try №336 of 502
2021-03-17 12:14:55,426 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:14:55,426 [main:66] - Compilation checking started
2021-03-17 12:14:55,872 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<Int>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:55,872 [main:28] - Try №337 of 502
2021-03-17 12:14:55,882 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:14:55,883 [main:66] - Compilation checking started
2021-03-17 12:14:56,323 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "Elements are equal but their hash codes are not: ${x.hashCode()} != ${y.hashCode()}"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:56,323 [main:28] - Try №338 of 502
2021-03-17 12:14:56,330 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-17 12:14:56,331 [main:28] - Try №339 of 502
2021-03-17 12:14:56,343 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:14:56,343 [main:66] - Compilation checking started
2021-03-17 12:14:56,786 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<Z,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:56,786 [main:28] - Try №340 of 502
2021-03-17 12:14:56,799 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:14:56,799 [main:28] - Try №341 of 502
2021-03-17 12:14:56,809 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:14:56,809 [main:28] - Try №342 of 502
2021-03-17 12:14:56,817 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:14:56,817 [main:28] - Try №343 of 502
2021-03-17 12:14:56,832 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:14:56,832 [main:28] - Try №344 of 502
2021-03-17 12:14:56,835 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:14:56,835 [main:66] - Compilation checking started
2021-03-17 12:14:57,268 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).i("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:57,268 [main:28] - Try №345 of 502
2021-03-17 12:14:57,289 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:14:57,289 [main:66] - Compilation checking started
2021-03-17 12:14:57,730 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<A<String>>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:57,730 [main:28] - Try №346 of 502
2021-03-17 12:14:57,734 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:14:57,734 [main:28] - Try №347 of 502
2021-03-17 12:14:57,742 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:14:57,742 [main:28] - Try №348 of 502
2021-03-17 12:14:57,754 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:14:57,754 [main:28] - Try №349 of 502
2021-03-17 12:14:57,767 [main:28] - Try №350 of 502
2021-03-17 12:14:57,771 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-17 12:14:57,771 [main:28] - Try №351 of 502
2021-03-17 12:14:57,782 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:14:57,783 [main:66] - Compilation checking started
2021-03-17 12:14:58,220 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> Int?)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:58,220 [main:28] - Try №352 of 502
2021-03-17 12:14:58,228 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:14:58,228 [main:66] - Compilation checking started
2021-03-17 12:14:58,651 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <i : Iterable<*>> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, dummy>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:58,651 [main:28] - Try №353 of 502
2021-03-17 12:14:58,655 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:14:58,655 [main:28] - Try №354 of 502
2021-03-17 12:14:58,662 [main:33] - Trying to replace Element(TYPE_PARAMETER) on Element(TYPE_PARAMETER)
2021-03-17 12:14:58,662 [main:66] - Compilation checking started
2021-03-17 12:14:59,199 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:59,199 [main:28] - Try №355 of 502
2021-03-17 12:14:59,212 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:14:59,212 [main:66] - Compilation checking started
2021-03-17 12:14:59,648 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$UnitOK$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:14:59,648 [main:28] - Try №356 of 502
2021-03-17 12:14:59,654 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:14:59,654 [main:66] - Compilation checking started
2021-03-17 12:15:00,093 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        test(Short).Kla2().callback()


2021-03-17 12:15:00,093 [main:28] - Try №357 of 502
2021-03-17 12:15:00,097 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:15:00,097 [main:28] - Try №358 of 502
2021-03-17 12:15:00,102 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:15:00,103 [main:66] - Compilation checking started
2021-03-17 12:15:00,535 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: Int): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:00,535 [main:28] - Try №359 of 502
2021-03-17 12:15:00,540 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:15:00,541 [main:66] - Compilation checking started
2021-03-17 12:15:00,975 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : KProperty1<*, *>> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:00,975 [main:28] - Try №360 of 502
2021-03-17 12:15:00,977 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-17 12:15:00,978 [main:66] - Compilation checking started
2021-03-17 12:15:01,429 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun(): String {
        o = "OK"
        b++; d++; f++; i++; j++; s++; c++
        z = false
        return "$o $b $d $f $i $j $s $c $z"
    }
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:01,429 [main:28] - Try №361 of 502
2021-03-17 12:15:01,437 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:15:01,438 [main:66] - Compilation checking started
2021-03-17 12:15:01,873 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.G("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:01,873 [main:28] - Try №362 of 502
2021-03-17 12:15:01,884 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:15:01,884 [main:28] - Try №363 of 502
2021-03-17 12:15:01,892 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:15:01,893 [main:66] - Compilation checking started
2021-03-17 12:15:02,337 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = x
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:02,337 [main:28] - Try №364 of 502
2021-03-17 12:15:02,345 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:15:02,345 [main:66] - Compilation checking started
2021-03-17 12:15:02,778 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: b<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:02,778 [main:28] - Try №365 of 502
2021-03-17 12:15:02,791 [main:33] - Trying to replace Element(CONDITION) on Element(CONDITION)
2021-03-17 12:15:02,791 [main:66] - Compilation checking started
2021-03-17 12:15:03,232 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (!(a as java.util.List<String>).add("")) "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:03,232 [main:28] - Try №366 of 502
2021-03-17 12:15:03,238 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:15:03,238 [main:66] - Compilation checking started
2021-03-17 12:15:03,672 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,FunInterface>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:03,672 [main:28] - Try №367 of 502
2021-03-17 12:15:03,681 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:15:03,682 [main:28] - Try №368 of 502
2021-03-17 12:15:03,694 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:15:03,694 [main:28] - Try №369 of 502
2021-03-17 12:15:03,707 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:15:03,707 [main:66] - Compilation checking started
2021-03-17 12:15:04,145 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<T, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:04,145 [main:28] - Try №370 of 502
2021-03-17 12:15:04,147 [main:33] - Trying to replace Element(IMPORT_LIST) on Element(IMPORT_LIST)
2021-03-17 12:15:04,147 [main:66] - Compilation checking started
2021-03-17 12:15:04,147 [main:68] - Already checked
2021-03-17 12:15:04,147 [main:28] - Try №371 of 502
2021-03-17 12:15:04,167 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:15:04,167 [main:28] - Try №372 of 502
2021-03-17 12:15:04,176 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:15:04,176 [main:28] - Try №373 of 502
2021-03-17 12:15:04,184 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:15:04,184 [main:28] - Try №374 of 502
2021-03-17 12:15:04,196 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-17 12:15:04,196 [main:28] - Try №375 of 502
2021-03-17 12:15:04,208 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:15:04,208 [main:28] - Try №376 of 502
2021-03-17 12:15:04,212 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:15:04,212 [main:66] - Compilation checking started
2021-03-17 12:15:04,643 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<builder<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:04,643 [main:28] - Try №377 of 502
2021-03-17 12:15:04,645 [main:33] - Trying to replace Element(TYPE_PARAMETER_LIST) on Element(TYPE_PARAMETER_LIST)
2021-03-17 12:15:04,646 [main:66] - Compilation checking started
2021-03-17 12:15:05,084 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <reified T : Any> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:05,084 [main:28] - Try №378 of 502
2021-03-17 12:15:05,090 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:15:05,090 [main:66] - Compilation checking started
2021-03-17 12:15:05,525 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, AssertionError>()).size).toChar()).compareTo((69578300).toChar()).toString((c()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:05,525 [main:28] - Try №379 of 502
2021-03-17 12:15:05,536 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-17 12:15:05,537 [main:28] - Try №380 of 502
2021-03-17 12:15:05,547 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:15:05,547 [main:28] - Try №381 of 502
2021-03-17 12:15:05,550 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:15:05,550 [main:28] - Try №382 of 502
2021-03-17 12:15:05,556 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:15:05,556 [main:28] - Try №383 of 502
2021-03-17 12:15:05,560 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:15:05,560 [main:28] - Try №384 of 502
2021-03-17 12:15:05,576 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-17 12:15:05,577 [main:28] - Try №385 of 502
2021-03-17 12:15:05,582 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:15:05,583 [main:66] - Compilation checking started
2021-03-17 12:15:06,136 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:06,136 [main:28] - Try №386 of 502
2021-03-17 12:15:06,147 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-17 12:15:06,148 [main:28] - Try №387 of 502
2021-03-17 12:15:06,153 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:15:06,153 [main:66] - Compilation checking started
2021-03-17 12:15:06,587 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).test(x + 1)).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:06,587 [main:28] - Try №388 of 502
2021-03-17 12:15:06,594 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-17 12:15:06,595 [main:66] - Compilation checking started
2021-03-17 12:15:07,030 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for (val l: Long in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:07,030 [main:28] - Try №389 of 502
2021-03-17 12:15:07,035 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:15:07,036 [main:28] - Try №390 of 502
2021-03-17 12:15:07,045 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:15:07,045 [main:66] - Compilation checking started
2021-03-17 12:15:07,482 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toString()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString("$rem")

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:07,482 [main:28] - Try №391 of 502
2021-03-17 12:15:07,489 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:15:07,489 [main:66] - Compilation checking started
2021-03-17 12:15:08,026 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:08,026 [main:28] - Try №392 of 502
2021-03-17 12:15:08,035 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:15:08,035 [main:66] - Compilation checking started
2021-03-17 12:15:08,480 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$Unit:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toByte()

fun fu7() = (69578300).injectFnc().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:08,480 [main:28] - Try №393 of 502
2021-03-17 12:15:08,483 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:15:08,484 [main:28] - Try №394 of 502
2021-03-17 12:15:08,496 [main:33] - Trying to replace Element(SHORT_STRING_TEMPLATE_ENTRY) on Element(SHORT_STRING_TEMPLATE_ENTRY)
2021-03-17 12:15:08,497 [main:66] - Compilation checking started
2021-03-17 12:15:09,027 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:09,027 [main:28] - Try №395 of 502
2021-03-17 12:15:09,039 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:15:09,040 [main:66] - Compilation checking started
2021-03-17 12:15:09,486 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$xFail")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "uavpp"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:09,486 [main:28] - Try №396 of 502
2021-03-17 12:15:09,489 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:15:09,490 [main:28] - Try №397 of 502
2021-03-17 12:15:09,500 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:15:09,501 [main:66] - Compilation checking started
2021-03-17 12:15:10,054 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:10,054 [main:28] - Try №398 of 502
2021-03-17 12:15:10,060 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:15:10,061 [main:66] - Compilation checking started
2021-03-17 12:15:10,493 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (FooEnum.values()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:10,494 [main:28] - Try №399 of 502
2021-03-17 12:15:10,510 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:15:10,511 [main:28] - Try №400 of 502
2021-03-17 12:15:10,514 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:15:10,514 [main:28] - Try №401 of 502
2021-03-17 12:15:10,526 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:15:10,526 [main:66] - Compilation checking started
2021-03-17 12:15:10,955 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, R>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:10,955 [main:28] - Try №402 of 502
2021-03-17 12:15:10,958 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-17 12:15:10,958 [main:66] - Compilation checking started
2021-03-17 12:15:11,459 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun box(): String {
    val list1 = ArrayList<UInt>()
    for (i in MaxUI..MinUI step 1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>()) {
        return "Wrong elements for MaxUI..MinUI step 1: $list1"
    }

    val list2 = ArrayList<UInt>()
    for (i in MaxUB..MinUB step 1) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>()) {
        return "Wrong elements for MaxUB..MinUB step 1: $list2"
    }

    val list3 = ArrayList<UInt>()
    for (i in MaxUS..MinUS step 1) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>()) {
        return "Wrong elements for MaxUS..MinUS step 1: $list3"
    }

    val list4 = ArrayList<ULong>()
    for (i in MaxUL..MinUL step 1) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>()) {
        return "Wrong elements for MaxUL..MinUL step 1: $list4"
    }

    return "OK"
}
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:11,459 [main:28] - Try №403 of 502
2021-03-17 12:15:11,470 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:15:11,470 [main:66] - Compilation checking started
2021-03-17 12:15:11,915 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in println.withIndex()) {
        s.append("$x:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:11,916 [main:28] - Try №404 of 502
2021-03-17 12:15:11,926 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:15:11,926 [main:66] - Compilation checking started
2021-03-17 12:15:12,362 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).x("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:12,362 [main:28] - Try №405 of 502
2021-03-17 12:15:12,371 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:15:12,371 [main:28] - Try №406 of 502
2021-03-17 12:15:12,375 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-17 12:15:12,376 [main:28] - Try №407 of 502
2021-03-17 12:15:12,379 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:15:12,379 [main:66] - Compilation checking started
2021-03-17 12:15:12,819 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): Suppress {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:12,819 [main:28] - Try №408 of 502
2021-03-17 12:15:12,832 [main:33] - Trying to replace Element(NULLABLE_TYPE) on Element(NULLABLE_TYPE)
2021-03-17 12:15:12,832 [main:28] - Try №409 of 502
2021-03-17 12:15:12,844 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:15:12,845 [main:28] - Try №410 of 502
2021-03-17 12:15:12,849 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:15:12,850 [main:28] - Try №411 of 502
2021-03-17 12:15:12,859 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:15:12,859 [main:66] - Compilation checking started
2021-03-17 12:15:13,398 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, (CharSequence)?>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:13,398 [main:28] - Try №412 of 502
2021-03-17 12:15:13,410 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:15:13,410 [main:28] - Try №413 of 502
2021-03-17 12:15:13,413 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:15:13,413 [main:28] - Try №414 of 502
2021-03-17 12:15:13,416 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:15:13,416 [main:28] - Try №415 of 502
2021-03-17 12:15:13,424 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:15:13,424 [main:28] - Try №416 of 502
2021-03-17 12:15:13,437 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:15:13,437 [main:66] - Compilation checking started
2021-03-17 12:15:13,967 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, String>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:13,967 [main:28] - Try №417 of 502
2021-03-17 12:15:13,977 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:15:13,977 [main:28] - Try №418 of 502
2021-03-17 12:15:13,989 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:15:13,990 [main:28] - Try №419 of 502
2021-03-17 12:15:14,002 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:15:14,003 [main:66] - Compilation checking started
2021-03-17 12:15:14,549 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:14,549 [main:28] - Try №420 of 502
2021-03-17 12:15:14,557 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:15:14,558 [main:66] - Compilation checking started
2021-03-17 12:15:14,986 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "fail: "
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(testNotNullPrimitive(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:14,986 [main:28] - Try №421 of 502
2021-03-17 12:15:14,996 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:15:14,997 [main:28] - Try №422 of 502
2021-03-17 12:15:15,008 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:15:15,008 [main:66] - Compilation checking started
2021-03-17 12:15:15,549 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:15,549 [main:28] - Try №423 of 502
2021-03-17 12:15:15,558 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:15:15,558 [main:66] - Compilation checking started
2021-03-17 12:15:15,995 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): Exception =
        Kla1().Kla2().callback()


2021-03-17 12:15:15,995 [main:28] - Try №424 of 502
2021-03-17 12:15:16,006 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:15:16,007 [main:66] - Compilation checking started
2021-03-17 12:15:16,442 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$StringOK")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:16,442 [main:28] - Try №425 of 502
2021-03-17 12:15:16,449 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-17 12:15:16,450 [main:28] - Try №426 of 502
2021-03-17 12:15:16,452 [main:33] - Trying to replace Element(TYPE_PARAMETER_LIST) on Element(TYPE_PARAMETER_LIST)
2021-03-17 12:15:16,452 [main:28] - Try №427 of 502
2021-03-17 12:15:16,464 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:15:16,465 [main:28] - Try №428 of 502
2021-03-17 12:15:16,469 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-17 12:15:16,470 [main:28] - Try №429 of 502
2021-03-17 12:15:16,473 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:15:16,473 [main:66] - Compilation checking started
2021-03-17 12:15:16,910 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<OK>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:16,910 [main:28] - Try №430 of 502
2021-03-17 12:15:16,918 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:15:16,919 [main:66] - Compilation checking started
2021-03-17 12:15:17,357 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<String<JvmStatic,Set<Float>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:17,357 [main:28] - Try №431 of 502
2021-03-17 12:15:17,363 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:15:17,363 [main:66] - Compilation checking started
2021-03-17 12:15:17,888 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<String>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:17,888 [main:28] - Try №432 of 502
2021-03-17 12:15:17,898 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:15:17,898 [main:28] - Try №433 of 502
2021-03-17 12:15:17,903 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:15:17,903 [main:28] - Try №434 of 502
2021-03-17 12:15:17,913 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:15:17,914 [main:66] - Compilation checking started
2021-03-17 12:15:18,349 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<String>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo("OK").toString((hashMapOf<Float, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:18,349 [main:28] - Try №435 of 502
2021-03-17 12:15:18,358 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:15:18,359 [main:66] - Compilation checking started
2021-03-17 12:15:18,788 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<String>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder(A())

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:18,788 [main:28] - Try №436 of 502
2021-03-17 12:15:18,797 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:15:18,797 [main:28] - Try №437 of 502
2021-03-17 12:15:18,799 [main:33] - Trying to replace Element(CLASS) on Element(CLASS)
2021-03-17 12:15:18,799 [main:66] - Compilation checking started
2021-03-17 12:15:19,226 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<String>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

// DONT_TARGET_EXACT_BACKEND: WASM
// WASM_MUTE_REASON: EXCEPTIONS_NOT_IMPLEMENTED
class A(var value: String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:19,226 [main:28] - Try №438 of 502
2021-03-17 12:15:19,238 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:15:19,238 [main:28] - Try №439 of 502
2021-03-17 12:15:19,248 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:15:19,248 [main:28] - Try №440 of 502
2021-03-17 12:15:19,254 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:15:19,254 [main:66] - Compilation checking started
2021-03-17 12:15:19,697 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<String>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = assertFailsWith<IllegalArgumentException> {
        val longProgression = 1L until 7L
        for (i in longProgression step zero().toLong()) {
        }
    }

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:19,697 [main:28] - Try №441 of 502
2021-03-17 12:15:19,702 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-17 12:15:19,702 [main:66] - Compilation checking started
2021-03-17 12:15:20,130 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<String>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2(msg: String, value: T) = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:20,130 [main:28] - Try №442 of 502
2021-03-17 12:15:20,142 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:15:20,142 [main:66] - Compilation checking started
2021-03-17 12:15:20,572 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<String>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Y, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:20,573 [main:28] - Try №443 of 502
2021-03-17 12:15:20,580 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:15:20,581 [main:66] - Compilation checking started
2021-03-17 12:15:21,019 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<String>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: Int): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:21,019 [main:28] - Try №444 of 502
2021-03-17 12:15:21,025 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:15:21,025 [main:66] - Compilation checking started
2021-03-17 12:15:21,453 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<String>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(iterable: HashMap<String,Double>): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Long>()).size)

    inner class Kla2 : Kla0(
            ok()
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:21,453 [main:28] - Try №445 of 502
2021-03-17 12:15:21,458 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-17 12:15:21,458 [main:66] - Compilation checking started
2021-03-17 12:15:22,015 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<String>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:22,015 [main:28] - Try №446 of 502
2021-03-17 12:15:22,033 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:15:22,033 [main:28] - Try №447 of 502
2021-03-17 12:15:22,045 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:15:22,046 [main:66] - Compilation checking started
2021-03-17 12:15:22,571 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<String>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:22,571 [main:28] - Try №448 of 502
2021-03-17 12:15:22,578 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:15:22,578 [main:28] - Try №449 of 502
2021-03-17 12:15:22,589 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-17 12:15:22,589 [main:28] - Try №450 of 502
2021-03-17 12:15:22,592 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:15:22,593 [main:66] - Compilation checking started
2021-03-17 12:15:23,021 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<String>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().reflect()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:23,021 [main:28] - Try №451 of 502
2021-03-17 12:15:23,034 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-17 12:15:23,034 [main:28] - Try №452 of 502
2021-03-17 12:15:23,045 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-17 12:15:23,045 [main:28] - Try №453 of 502
2021-03-17 12:15:23,055 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:15:23,055 [main:66] - Compilation checking started
2021-03-17 12:15:23,490 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<String>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback("K;")


2021-03-17 12:15:23,490 [main:28] - Try №454 of 502
2021-03-17 12:15:23,497 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-17 12:15:23,498 [main:28] - Try №455 of 502
2021-03-17 12:15:23,509 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-17 12:15:23,509 [main:28] - Try №456 of 502
2021-03-17 12:15:23,512 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:15:23,513 [main:66] - Compilation checking started
2021-03-17 12:15:23,941 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<String>>,Short>): String = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((p<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:23,941 [main:28] - Try №457 of 502
2021-03-17 12:15:23,949 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:15:23,949 [main:66] - Compilation checking started
2021-03-17 12:15:24,479 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<String>>,Short>): Any = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "Fail " else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:24,479 [main:28] - Try №458 of 502
2021-03-17 12:15:24,489 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:15:24,489 [main:28] - Try №459 of 502
2021-03-17 12:15:24,495 [main:33] - Trying to replace Element(TYPE_PARAMETER) on Element(TYPE_PARAMETER)
2021-03-17 12:15:24,496 [main:28] - Try №460 of 502
2021-03-17 12:15:24,501 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:15:24,501 [main:28] - Try №461 of 502
2021-03-17 12:15:24,511 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:15:24,511 [main:66] - Compilation checking started
2021-03-17 12:15:25,036 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,Set<String>>,Short>): Any = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "OK" else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:25,036 [main:28] - Try №462 of 502
2021-03-17 12:15:25,045 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:15:25,045 [main:66] - Compilation checking started
2021-03-17 12:15:25,570 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,UInt>,Short>): Any = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "OK" else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:25,570 [main:28] - Try №463 of 502
2021-03-17 12:15:25,578 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:15:25,579 [main:66] - Compilation checking started
2021-03-17 12:15:26,014 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,UInt>,Short>): Any = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : floatZero<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "OK" else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:26,014 [main:28] - Try №464 of 502
2021-03-17 12:15:26,022 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:15:26,023 [main:28] - Try №465 of 502
2021-03-17 12:15:26,031 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:15:26,032 [main:66] - Compilation checking started
2021-03-17 12:15:26,460 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,UInt>,Short>): Any = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "OK" else " != $ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().String()


2021-03-17 12:15:26,461 [main:28] - Try №466 of 502
2021-03-17 12:15:26,466 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:15:26,466 [main:28] - Try №467 of 502
2021-03-17 12:15:26,469 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:15:26,470 [main:66] - Compilation checking started
2021-03-17 12:15:26,990 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> test(iterable: Map<Map<JvmStatic,UInt>,Short>): Any = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "OK" else " != $ss'"
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:26,990 [main:28] - Try №468 of 502
2021-03-17 12:15:27,003 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-17 12:15:27,003 [main:28] - Try №469 of 502
2021-03-17 12:15:27,012 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:15:27,012 [main:28] - Try №470 of 502
2021-03-17 12:15:27,016 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-17 12:15:27,016 [main:28] - Try №471 of 502
2021-03-17 12:15:27,036 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:15:27,037 [main:28] - Try №472 of 502
2021-03-17 12:15:27,045 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:15:27,045 [main:28] - Try №473 of 502
2021-03-17 12:15:27,049 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:15:27,049 [main:66] - Compilation checking started
2021-03-17 12:15:27,573 [main:53] - Result = true
Text:
val xs = listOf(null)

fun <Z> sum(iterable: Map<Map<JvmStatic,UInt>,Short>): Any = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "OK" else " != $ss'"
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:27,573 [main:28] - Try №474 of 502
2021-03-17 12:15:27,587 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-17 12:15:27,588 [main:66] - Compilation checking started
2021-03-17 12:15:28,014 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> sum(iterable: Map<Map<JvmStatic,UInt>,Short>): Any = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "OK" else " != $ss'"
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((A::Nested).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:28,015 [main:28] - Try №475 of 502
2021-03-17 12:15:28,023 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:15:28,023 [main:28] - Try №476 of 502
2021-03-17 12:15:28,029 [main:33] - Trying to replace Element(TYPE_PARAMETER) on Element(TYPE_PARAMETER)
2021-03-17 12:15:28,029 [main:28] - Try №477 of 502
2021-03-17 12:15:28,041 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:15:28,042 [main:28] - Try №478 of 502
2021-03-17 12:15:28,044 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:15:28,045 [main:28] - Try №479 of 502
2021-03-17 12:15:28,052 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:15:28,052 [main:28] - Try №480 of 502
2021-03-17 12:15:28,056 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:15:28,056 [main:66] - Compilation checking started
2021-03-17 12:15:28,499 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> sum(iterable: Map<Map<JvmStatic,UInt>,Short>): Any = "failed"
fun <T : Any> bar(a: Collection<Int>): i = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "OK" else " != $ss'"
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:28,500 [main:28] - Try №481 of 502
2021-03-17 12:15:28,526 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-17 12:15:28,526 [main:66] - Compilation checking started
2021-03-17 12:15:28,529 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:15:28,529 [main:49] - Result = false
Text:
val xs = listOf(null)

fun <Z> sum(iterable: Map<Map<JvmStatic,UInt>,Short>): Any = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "OK" else " != $ss'"
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> ().size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:28,529 [main:28] - Try №482 of 502
2021-03-17 12:15:28,535 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:15:28,535 [main:66] - Compilation checking started
2021-03-17 12:15:29,068 [main:53] - Result = true
Text:
val kotlin = listOf(null)

fun <Z> sum(iterable: Map<Map<JvmStatic,UInt>,Short>): Any = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "OK" else " != $ss'"
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:29,068 [main:28] - Try №483 of 502
2021-03-17 12:15:29,073 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:15:29,074 [main:66] - Compilation checking started
2021-03-17 12:15:29,506 [main:49] - Result = false
Text:
val kotlin = listOf(null)

fun <Z> sum(iterable: Map<Map<JvmStatic,UInt>,Short>): Any = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : String<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "OK" else " != $ss'"
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:29,506 [main:28] - Try №484 of 502
2021-03-17 12:15:29,516 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:15:29,516 [main:28] - Try №485 of 502
2021-03-17 12:15:29,525 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:15:29,526 [main:28] - Try №486 of 502
2021-03-17 12:15:29,538 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-17 12:15:29,539 [main:28] - Try №487 of 502
2021-03-17 12:15:29,547 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:15:29,547 [main:28] - Try №488 of 502
2021-03-17 12:15:29,555 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-17 12:15:29,555 [main:66] - Compilation checking started
2021-03-17 12:15:29,982 [main:49] - Result = false
Text:
val kotlin = listOf(null)

fun <Z> sum(iterable: Map<Map<JvmStatic,UInt>,Short>): Any = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "OK" else " != $ss'"
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : A(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:29,982 [main:28] - Try №489 of 502
2021-03-17 12:15:29,988 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:15:29,988 [main:28] - Try №490 of 502
2021-03-17 12:15:29,996 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:15:29,997 [main:66] - Compilation checking started
2021-03-17 12:15:30,427 [main:49] - Result = false
Text:
val kotlin = listOf(null)

fun <Z> sum(iterable: Map<Map<JvmStatic,UInt>,Short>): Any = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): add = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "OK" else " != $ss'"
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:30,427 [main:28] - Try №491 of 502
2021-03-17 12:15:30,435 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-17 12:15:30,435 [main:66] - Compilation checking started
2021-03-17 12:15:30,986 [main:53] - Result = true
Text:
val kotlin = listOf(null)

fun <Z> sum(b: String = "OK"): Any = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "OK" else " != $ss'"
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:30,986 [main:28] - Try №492 of 502
2021-03-17 12:15:30,992 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:15:30,992 [main:66] - Compilation checking started
2021-03-17 12:15:31,419 [main:49] - Result = false
Text:
val kotlin = listOf(null)

fun <Z> sum(b: String = "OK"): Any = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.typeOf<T>()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "OK" else " != $ss'"
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:31,419 [main:28] - Try №493 of 502
2021-03-17 12:15:31,431 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-17 12:15:31,431 [main:28] - Try №494 of 502
2021-03-17 12:15:31,440 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:15:31,440 [main:66] - Compilation checking started
2021-03-17 12:15:31,868 [main:49] - Result = false
Text:
val kotlin = listOf(null)

fun <Z> sum(b: String = "OK"): Any = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(Int: Int): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        JvmStatic.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "OK" else " != $ss'"
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:31,868 [main:28] - Try №495 of 502
2021-03-17 12:15:31,874 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-17 12:15:31,874 [main:66] - Compilation checking started
2021-03-17 12:15:32,418 [main:53] - Result = true
Text:
val kotlin = listOf(null)

fun <Z> sum(b: String = "OK"): Any = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(key: Any, value: Any): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "OK" else " != $ss'"
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:32,418 [main:28] - Try №496 of 502
2021-03-17 12:15:32,431 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-17 12:15:32,431 [main:28] - Try №497 of 502
2021-03-17 12:15:32,440 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:15:32,440 [main:66] - Compilation checking started
2021-03-17 12:15:32,871 [main:49] - Result = false
Text:
val kotlin = listOf(null)

fun <Z> sum(b: String = "OK"): Any = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(key: Any, value: Any): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "OK" else " != $ss'"
}

fun a() = (test<UShortArray>(UShortArray())).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:32,871 [main:28] - Try №498 of 502
2021-03-17 12:15:32,880 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-17 12:15:32,880 [main:28] - Try №499 of 502
2021-03-17 12:15:32,892 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-17 12:15:32,892 [main:28] - Try №500 of 502
2021-03-17 12:15:32,901 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-17 12:15:32,901 [main:28] - Try №501 of 502
2021-03-17 12:15:32,907 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:15:32,907 [main:66] - Compilation checking started
2021-03-17 12:15:33,334 [main:49] - Result = false
Text:
val kotlin = listOf(null)

fun <Z> sum(b: String = "OK"): Any = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(key: Any, value: Any): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "OK" else " != $ss'"
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).run()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:33,334 [main:28] - Try №502 of 502
2021-03-17 12:15:33,339 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:15:33,340 [main:66] - Compilation checking started
2021-03-17 12:15:33,777 [main:49] - Result = false
Text:
val kotlin = listOf(null)

fun <Z> sum(b: String = "OK"): Any = "failed"
fun <T : Any> bar(a: Collection<Int>): String = "OK"
fun <Test : Iterable<String>> t(): String = "OK"
fun <T : String> test(key: Any, value: Any): String = "OK"
fun <T : Iterable<*>> test(A: String): String = "OK"
fun <T> test(): String = "java.lang.String"
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return if (ss == "lol") "OK" else " != $ss'"
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (get()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun fu2() = "K"

fun test(s: String) = s?.length

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:33,944 [main:66] - Compilation checking started
2021-03-17 12:15:34,455 [main:66] - Compilation checking started
2021-03-17 12:15:34,457 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:15:34,540 [main:66] - Compilation checking started
2021-03-17 12:15:34,542 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:15:34,634 [main:66] - Compilation checking started
2021-03-17 12:15:35,259 [main:66] - Compilation checking started
2021-03-17 12:15:35,261 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:15:35,347 [main:66] - Compilation checking started
2021-03-17 12:15:35,963 [main:66] - Compilation checking started
2021-03-17 12:15:36,481 [main:66] - Compilation checking started
2021-03-17 12:15:36,483 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:15:36,563 [main:66] - Compilation checking started
2021-03-17 12:15:37,183 [main:66] - Compilation checking started
2021-03-17 12:15:37,808 [main:66] - Compilation checking started
2021-03-17 12:15:38,425 [main:66] - Compilation checking started
2021-03-17 12:15:38,427 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:15:38,607 [main:33] - Trying to replace Element(IF) on Element(STRING_TEMPLATE)
2021-03-17 12:15:38,608 [main:66] - Compilation checking started
2021-03-17 12:15:39,140 [main:53] - Result = true
Text:
val kotlin = listOf(null)

fun fu7() = (69578300).toChar().toUpperCase().toString()
fun <T : Any> bar(a: Collection<Int>): String = "OK"

fun <T : String> test(key: Any, value: Any): String = "OK"
fun fu2() = "K"
fun test(s: String) = s?.length
fun <T> box(iterable: String): String = "OK"
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return ""
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun <T : Iterable<*>> test(A: String): String = "OK"

fun <T> test(): String = "java.lang.String"

fun fu4() = 1L.toString()
fun <Test : Iterable<String>> t(): String = "OK"
fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun <Z> sum(b: String = "OK"): Any = "failed"

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =

        Kla1().Kla2().callback()

2021-03-17 12:15:39,227 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(POSTFIX_EXPRESSION)
2021-03-17 12:15:39,227 [main:66] - Compilation checking started
2021-03-17 12:15:39,767 [main:53] - Result = true
Text:
val kotlin = listOf(null)

fun fu7() = (69578300).toChar().toUpperCase().toString()
fun <T : Any> bar(a: Collection<Int>): String = "OK"

fun <T : String> test(key: Any, value: Any): String = "OK"
fun fu2() = "K"
fun test(s: String) = s?.length
fun <T> box(iterable: String): String = "OK"!!
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return ""
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun <T : Iterable<*>> test(A: String): String = "OK"

fun <T> test(): String = "java.lang.String"

fun fu4() = 1L.toString()
fun <Test : Iterable<String>> t(): String = "OK"
fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun <Z> sum(b: String = "OK"): Any = "failed"

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =

        Kla1().Kla2().callback()

2021-03-17 12:15:39,767 [main:33] - Trying to replace BLOCK on Element(POSTFIX_EXPRESSION)
2021-03-17 12:15:39,767 [main:66] - Compilation checking started
2021-03-17 12:15:39,769 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:15:39,769 [main:49] - Result = false
Text:
val kotlin = listOf(null)

fun fu7() = (69578300).toChar().toUpperCase().toString()
fun <T : Any> bar(a: Collection<Int>): String = "OK"

fun <T : String> test(key: Any, value: Any): String = "OK"
fun fu2() = "K"
fun test(s: String) = s?.length
fun <T> box(iterable: String): String = "OK"!!
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return ""
}!!

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun <T : Iterable<*>> test(A: String): String = "OK"

fun <T> test(): String = "java.lang.String"

fun fu4() = 1L.toString()
fun <Test : Iterable<String>> t(): String = "OK"
fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun <Z> sum(b: String = "OK"): Any = "failed"

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =

        Kla1().Kla2().callback()

2021-03-17 12:15:39,769 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(POSTFIX_EXPRESSION)
2021-03-17 12:15:39,769 [main:66] - Compilation checking started
2021-03-17 12:15:40,301 [main:53] - Result = true
Text:
val kotlin = listOf(null)

fun fu7() = (69578300).toChar().toUpperCase().toString()
fun <T : Any> bar(a: Collection<Int>): String = "OK"

fun <T : String> test(key: Any, value: Any): String = "OK"
fun fu2() = "K"
fun test(s: String) = s?.length
fun <T> box(iterable: String): String = "OK"!!
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return ""
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun <T : Iterable<*>> test(A: String): String = "OK"

fun <T> test(): String = "java.lang.String"

fun fu4() = 1L.toString()
fun <Test : Iterable<String>> t(): String = "OK"!!
fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun <Z> sum(b: String = "OK"): Any = "failed"

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =

        Kla1().Kla2().callback()

2021-03-17 12:15:40,301 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-17 12:15:40,301 [main:66] - Compilation checking started
2021-03-17 12:15:40,833 [main:53] - Result = true
Text:
val kotlin = listOf(null)

fun fu7() = (69578300).toChar().toUpperCase().toString()
fun <T : Any> bar(a: Collection<Int>): String = "OK"

fun <T : String> test(key: Any, value: Any): String = "OK"
fun fu2() = "K"
fun test(s: String) = s?.length
fun <T> box(iterable: String): String = "OK"!!
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return ""
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun <T : Iterable<*>> test(A: String): String = "OK"

fun <T> test(): String = "java.lang.String"

fun fu4() = 1L.toString()
fun <Test : Iterable<String>> t(): String = "OK"!!
fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun <Z> sum(b: String = "OK"): Any = "failed"

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =

        Kla1().Kla2().callback()!!

2021-03-17 12:15:40,833 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-17 12:15:40,833 [main:66] - Compilation checking started
2021-03-17 12:15:40,835 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:15:40,835 [main:49] - Result = false
Text:
val kotlin = listOf(null)

fun fu7() = (69578300).toChar().toUpperCase().toString()
fun <T : Any> bar(a: Collection<Int>): String = "OK"

fun <T : String> test(key: Any, value: Any): String!! = "OK"
fun fu2() = "K"
fun test(s: String) = s?.length
fun <T> box(iterable: String): String = "OK"!!
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return ""
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun <T : Iterable<*>> test(A: String): String = "OK"

fun <T> test(): String = "java.lang.String"

fun fu4() = 1L.toString()
fun <Test : Iterable<String>> t(): String = "OK"!!
fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun <Z> sum(b: String = "OK"): Any = "failed"

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =

        Kla1().Kla2().callback()!!

2021-03-17 12:15:40,835 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-17 12:15:40,835 [main:66] - Compilation checking started
2021-03-17 12:15:40,837 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:15:40,837 [main:49] - Result = false
Text:
val kotlin = listOf(null)

fun fu7() = (69578300).toChar().toUpperCase().toString()
fun <T : Any> bar(a: Collection<Int>): String = "OK"

fun <T : String> test(key: Any, value: Any): String = "OK"
fun fu2() = "K"
fun test(s: String) = s?.length
fun <T> box(iterable: String): String = "OK"!!
fun <T : Iterable<*>> test(iterable: T): String!! {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return ""
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun <T : Iterable<*>> test(A: String): String = "OK"

fun <T> test(): String = "java.lang.String"

fun fu4() = 1L.toString()
fun <Test : Iterable<String>> t(): String = "OK"!!
fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun <Z> sum(b: String = "OK"): Any = "failed"

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =

        Kla1().Kla2().callback()!!

2021-03-17 12:15:40,837 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-17 12:15:40,838 [main:66] - Compilation checking started
2021-03-17 12:15:40,840 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:15:40,840 [main:49] - Result = false
Text:
val kotlin = listOf(null)

fun fu7() = (69578300).toChar().toUpperCase().toString()
fun <T : Any> bar(a: Collection<Int>): String = "OK"

fun <T : String> test(key: Any, value: Any): String = "OK"
fun fu2() = "K"
fun test(s: String) = s?.length
fun <T> box(iterable: String): String = "OK"!!
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return ""
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun <T : Iterable<*>> test(A: String): String = "OK"

fun <T> test(): String = "java.lang.String"

fun fu4() = 1L.toString()
fun <Test : Iterable<String>> t(): String!! = "OK"!!
fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun <Z> sum(b: String = "OK"): Any = "failed"

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =

        Kla1().Kla2().callback()!!

2021-03-17 12:15:40,840 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-17 12:15:40,840 [main:66] - Compilation checking started
2021-03-17 12:15:41,376 [main:53] - Result = true
Text:
val kotlin = listOf(null)

fun fu7() = (69578300).toChar().toUpperCase().toString()
fun <T : Any> bar(a: Collection<Int>): String = "OK"

fun <T : String> test(key: Any, value: Any): String = "OK"
fun fu2() = "K"
fun test(s: String) = s?.length
fun <T> box(iterable: String): String = "OK"!!
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return ""
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun <T : Iterable<*>> test(A: String): String = "OK"

fun <T> test(): String = "java.lang.String"

fun fu4() = 1L.toString()
fun <Test : Iterable<String>> t(): String = "OK"!!
fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun <Z> sum(b: String = "OK"): Any = "failed"

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =

        Kla1()!!.Kla2().callback()!!

2021-03-17 12:15:41,376 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-17 12:15:41,377 [main:66] - Compilation checking started
2021-03-17 12:15:41,910 [main:53] - Result = true
Text:
val kotlin = listOf(null)

fun fu7() = (69578300).toChar().toUpperCase().toString()
fun <T : Any> bar(a: Collection<Int>): String = "OK"

fun <T : String> test(key: Any, value: Any): String = "OK"
fun fu2() = "K"
fun test(s: String) = s?.length
fun <T> box(iterable: String): String = "OK"!!
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s!!.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return ""
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun <T : Iterable<*>> test(A: String): String = "OK"

fun <T> test(): String = "java.lang.String"

fun fu4() = 1L.toString()
fun <Test : Iterable<String>> t(): String = "OK"!!
fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun <Z> sum(b: String = "OK"): Any = "failed"

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =

        Kla1()!!.Kla2().callback()!!

2021-03-17 12:15:41,910 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-17 12:15:41,911 [main:66] - Compilation checking started
2021-03-17 12:15:41,912 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:15:41,913 [main:49] - Result = false
Text:
val kotlin = listOf(null)

fun fu7() = (69578300).toChar().toUpperCase().toString()
fun <T : Any> bar(a: Collection<Int>): String = "OK"

fun <T : String> test(key: Any, value: Any): String = "OK"
fun fu2() = "K"
fun test(s: String) = s?.length
fun <T> box(iterable: String): String = "OK"!!
fun <T : Iterable!!<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s!!.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return ""
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun <T : Iterable<*>> test(A: String): String = "OK"

fun <T> test(): String = "java.lang.String"

fun fu4() = 1L.toString()
fun <Test : Iterable<String>> t(): String = "OK"!!
fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun <Z> sum(b: String = "OK"): Any = "failed"

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =

        Kla1()!!.Kla2().callback()!!

2021-03-17 12:15:41,913 [main:33] - Trying to replace Element(DESTRUCTURING_DECLARATION_ENTRY) on Element(POSTFIX_EXPRESSION)
2021-03-17 12:15:41,913 [main:66] - Compilation checking started
2021-03-17 12:15:41,915 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:15:41,915 [main:49] - Result = false
Text:
val kotlin = listOf(null)

fun fu7() = (69578300).toChar().toUpperCase().toString()
fun <T : Any> bar(a: Collection<Int>): String = "OK"

fun <T : String> test(key: Any, value: Any): String = "OK"
fun fu2() = "K"
fun test(s: String) = s?.length
fun <T> box(iterable: String): String = "OK"!!
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index!!, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s!!.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return ""
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun <T : Iterable<*>> test(A: String): String = "OK"

fun <T> test(): String = "java.lang.String"

fun fu4() = 1L.toString()
fun <Test : Iterable<String>> t(): String = "OK"!!
fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun <Z> sum(b: String = "OK"): Any = "failed"

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =

        Kla1()!!.Kla2().callback()!!

2021-03-17 12:15:41,915 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-17 12:15:41,915 [main:66] - Compilation checking started
2021-03-17 12:15:41,917 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:15:41,917 [main:49] - Result = false
Text:
val kotlin = listOf(null)

fun fu7() = (69578300).toChar().toUpperCase().toString()
fun <T : Any> bar(a: Collection<Int>): String = "OK"

fun <T : String> test(key: Any, value: Any): String = "OK"
fun fu2() = "K"
fun test(s: String) = s?.length
fun <T> box(iterable: String): String = "OK"!!
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s!!.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return ""
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun <T : Iterable<*>> test(A: String): String = "OK"

fun <T> test(): String = "java.lang.String"

fun fu4() = 1L.toString()
fun <Test : Iterable!!<String>> t(): String = "OK"!!
fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun <Z> sum(b: String = "OK"): Any = "failed"

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =

        Kla1()!!.Kla2().callback()!!

2021-03-17 12:15:41,917 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-17 12:15:41,917 [main:66] - Compilation checking started
2021-03-17 12:15:42,349 [main:49] - Result = false
Text:
val kotlin = listOf(null)

fun fu7() = (69578300).toChar().toUpperCase().toString()
fun <T : Any> bar(a: Collection<Int>): String = "OK"

fun <T : String> test(key: Any, value: Any): String = "OK"
fun fu2() = "K"
fun test(s: String) = s?.length
fun <T> box(iterable: String): String = "OK"!!
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s!!.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return ""
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun <T : Iterable<*>> test(A: String): String = "OK"

fun <T> test(): String = "java.lang.String"

fun fu4() = 1L.toString()
fun <Test : Iterable<String>> t(): String = "OK"!!
fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun <Z> sum(b: String = "OK"): Any = "failed"

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo!!((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }
    )
}

fun String(): String =

        Kla1()!!.Kla2().callback()!!

2021-03-17 12:15:42,349 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-17 12:15:42,350 [main:66] - Compilation checking started
2021-03-17 12:15:42,897 [main:53] - Result = true
Text:
val kotlin = listOf(null)

fun fu7() = (69578300).toChar().toUpperCase().toString()
fun <T : Any> bar(a: Collection<Int>): String = "OK"

fun <T : String> test(key: Any, value: Any): String = "OK"
fun fu2() = "K"
fun test(s: String) = s?.length
fun <T> box(iterable: String): String = "OK"!!
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s!!.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return ""
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun <T : Iterable<*>> test(A: String): String = "OK"

fun <T> test(): String = "java.lang.String"

fun fu4() = 1L.toString()
fun <Test : Iterable<String>> t(): String = "OK"!!
fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun <Z> sum(b: String = "OK"): Any = "failed"

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>()).size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }!!
    )
}

fun String(): String =

        Kla1()!!.Kla2().callback()!!

2021-03-17 12:15:42,897 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(POSTFIX_EXPRESSION)
2021-03-17 12:15:42,897 [main:66] - Compilation checking started
2021-03-17 12:15:43,447 [main:53] - Result = true
Text:
val kotlin = listOf(null)

fun fu7() = (69578300).toChar().toUpperCase().toString()
fun <T : Any> bar(a: Collection<Int>): String = "OK"

fun <T : String> test(key: Any, value: Any): String = "OK"
fun fu2() = "K"
fun test(s: String) = s?.length
fun <T> box(iterable: String): String = "OK"!!
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String;")
    }

    return s!!.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return ""
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun <T : Iterable<*>> test(A: String): String = "OK"

fun <T> test(): String = "java.lang.String"

fun fu4() = 1L.toString()
fun <Test : Iterable<String>> t(): String = "OK"!!
fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun <Z> sum(b: String = "OK"): Any = "failed"

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>())!!.size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }!!
    )
}

fun String(): String =

        Kla1()!!.Kla2().callback()!!

2021-03-17 12:15:43,448 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-17 12:15:43,448 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-17 12:15:43,448 [main:66] - Compilation checking started
2021-03-17 12:15:44,003 [main:53] - Result = true
Text:
val kotlin = listOf(null)

fun fu7() = (69578300).toChar().toUpperCase().toString()
fun <T : Any> bar(a: Collection<Int>): String = "OK"

fun <T : String> test(key: Any, value: Any): String = "OK"
fun fu2() = "K"
fun test(s: String) = s?.length
fun <T> box(iterable: String): String = "OK"!!
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String!!;")
    }

    return s!!.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return ""
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>()).size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun <T : Iterable<*>> test(A: String): String = "OK"

fun <T> test(): String = "java.lang.String"

fun fu4() = 1L.toString()
fun <Test : Iterable<String>> t(): String = "OK"!!
fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun <Z> sum(b: String = "OK"): Any = "failed"

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>())!!.size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }!!
    )
}

fun String(): String =

        Kla1()!!.Kla2().callback()!!

2021-03-17 12:15:44,003 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(POSTFIX_EXPRESSION)
2021-03-17 12:15:44,003 [main:66] - Compilation checking started
2021-03-17 12:15:44,574 [main:53] - Result = true
Text:
val kotlin = listOf(null)

fun fu7() = (69578300).toChar().toUpperCase().toString()
fun <T : Any> bar(a: Collection<Int>): String = "OK"

fun <T : String> test(key: Any, value: Any): String = "OK"
fun fu2() = "K"
fun test(s: String) = s?.length
fun <T> box(iterable: String): String = "OK"!!
fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$x:$String!!;")
    }

    return s!!.toString()
}

fun box(): String {
    val xs = listOf(null)
val ss = test(xs)
    return ""
}

fun a() = (test<UShortArray>(UShortArray(43, {a: Int -> (hashMapOf<ULong, ULong>())!!.size.toUShort()}))).replaceIndent("")

fun kotlin() = Long.MAX_VALUE

fun <T : Iterable<*>> test(A: String): String = "OK"

fun <T> test(): String = "java.lang.String"

fun fu4() = 1L.toString()
fun <Test : Iterable<String>> t(): String = "OK"!!
fun fu5() = (test<UShortArray>("OK")).replaceIndentByMargin("", "onlyk")

fun fu6() = (hashMapOf<Any?, Int>()).size.toByte()

fun <Z> sum(b: String = "OK"): Any = "failed"

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Int>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Int, Long>())!!.size)

    inner class Kla2 : Kla0(
            run {
                val reversed = prope0
                { "Not yet implemented"}
            }!!
    )
}

fun String(): String =

        Kla1()!!.Kla2().callback()!!

2021-03-17 12:15:44,661 [main:43] - AFTER TRY 0 res = val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:44,831 [main:114] - generating klass Kla0 text = open class Kla0(val callback: () -> String)
2021-03-17 12:15:44,831 [main:114] - generating klass Kla1 text = class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}
2021-03-17 12:15:44,831 [main:114] - generating klass Kla2 text = inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
2021-03-17 12:15:44,998 [main:45] - GENERATING CALL OF fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}
2021-03-17 12:15:45,001 [main:63] - WITHOUT TYPE PARAMS = fun <T : Iterable<*>> test(iterable: Iterable<*>): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}
2021-03-17 12:15:45,084 [main:298] - generating value of type = Iterable<*> false depth = 1
2021-03-17 12:15:45,173 [main:45] - GENERATING CALL OF fun UIntRange(start: kotlin.UInt, endInclusive: kotlin.UInt): Iterable<*> = TODO()
2021-03-17 12:15:45,175 [main:63] - WITHOUT TYPE PARAMS = fun UIntRange(start: kotlin.UInt, endInclusive: kotlin.UInt): Iterable<*> = TODO()
2021-03-17 12:15:45,459 [main:298] - generating value of type = UInt true depth = 4
2021-03-17 12:15:45,460 [main:298] - generating value of type = UInt true depth = 4
2021-03-17 12:15:45,461 [main:97] - GENERATED = UIntRange(1767487630.toUInt(), 1502722286.toUInt())
2021-03-17 12:15:45,461 [main:97] - GENERATED = test<Iterable<*>>(UIntRange(1767487630.toUInt(), 1502722286.toUInt()))
2021-03-17 12:15:45,556 [main:58] - Try №0
2021-03-17 12:15:45,705 [main:43] - AFTER TRY 1 res = val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:45,885 [main:114] - generating klass Kla0 text = open class Kla0(val callback: () -> String)
2021-03-17 12:15:45,885 [main:114] - generating klass Kla1 text = class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}
2021-03-17 12:15:45,885 [main:114] - generating klass Kla2 text = inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
2021-03-17 12:15:46,084 [main:45] - GENERATING CALL OF fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}
2021-03-17 12:15:46,087 [main:63] - WITHOUT TYPE PARAMS = fun <T : Iterable<*>> test(iterable: Iterable<*>): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}
2021-03-17 12:15:46,180 [main:298] - generating value of type = Iterable<*> false depth = 1
2021-03-17 12:15:46,506 [main:45] - GENERATING CALL OF fun <T> listOf(): Iterable<*> = TODO()
2021-03-17 12:15:46,508 [main:63] - WITHOUT TYPE PARAMS = fun <T> listOf(): Iterable<*> = TODO()
2021-03-17 12:15:46,597 [main:97] - GENERATED = listOf<Any?>()
2021-03-17 12:15:46,597 [main:97] - GENERATED = test<Iterable<*>>(listOf<Any?>())
2021-03-17 12:15:46,689 [main:58] - Try №1
2021-03-17 12:15:46,963 [main:43] - AFTER TRY 2 res = val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()


2021-03-17 12:15:47,165 [main:114] - generating klass Kla0 text = open class Kla0(val callback: () -> String)
2021-03-17 12:15:47,166 [main:114] - generating klass Kla1 text = class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}
2021-03-17 12:15:47,166 [main:114] - generating klass Kla2 text = inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
2021-03-17 12:15:47,403 [main:45] - GENERATING CALL OF fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}
2021-03-17 12:15:47,406 [main:63] - WITHOUT TYPE PARAMS = fun <T : Iterable<*>> test(iterable: Iterable<*>): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}
2021-03-17 12:15:47,550 [main:298] - generating value of type = Iterable<*> false depth = 1
2021-03-17 12:15:47,655 [main:45] - GENERATING CALL OF fun <T> emptyList(): Iterable<*> = TODO()
2021-03-17 12:15:47,657 [main:63] - WITHOUT TYPE PARAMS = fun <T> emptyList(): Iterable<*> = TODO()
2021-03-17 12:15:47,744 [main:97] - GENERATED = emptyList<Any?>()
2021-03-17 12:15:47,744 [main:97] - GENERATED = test<Iterable<*>>(emptyList<Any?>())
2021-03-17 12:15:47,838 [main:58] - Try №2
2021-03-17 12:15:48,775 [main:76] - Trying to insert fun box197(): String {
    val prope2 = listOf(1u, 2u, 3u)
    var prope3 = 0
    prope2.forEachIndexed { index, uInt ->
        prope3 = prope3 * 10 + (index + 1) * uInt.toInt()
    }
    if (prope3 != 149) throw AssertionError()
    return "OK"
}
2021-03-17 12:15:48,871 [main:66] - Compilation checking started
2021-03-17 12:15:49,612 [main:101] - Trying to change 25 nodes
2021-03-17 12:15:49,612 [main:105] - replacing (AssertionError(), AssertionError)
2021-03-17 12:15:49,614 [main:36] - replacing AssertionError() AssertionError
2021-03-17 12:15:49,614 [main:40] - Getting value of type AssertionError
2021-03-17 12:15:49,710 [main:298] - generating value of type = AssertionError false depth = 0
2021-03-17 12:15:49,714 [main:44] - GENERATED VALUE OF TYPE AssertionError = AssertionError()
2021-03-17 12:15:49,715 [main:47] - GENERATED IS CALL =true
2021-03-17 12:15:50,031 [main:53] - randomType = HashMap<Short, ULong>
2021-03-17 12:15:50,131 [main:298] - generating value of type = HashMap<Short, ULong> false depth = 0
2021-03-17 12:15:50,232 [main:45] - GENERATING CALL OF fun <K, V> HashMap(original: kotlin.collections.Map<Short, ULong>): HashMap<Short, ULong> = TODO()
2021-03-17 12:15:50,234 [main:63] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(original: kotlin.collections.Map<Short, ULong>): HashMap<Short, ULong> = TODO()
2021-03-17 12:15:50,491 [main:298] - generating value of type = Map<Short, ULong> false depth = 3
2021-03-17 12:15:50,604 [main:45] - GENERATING CALL OF fun <K, V> LinkedHashMap(): Map<Short, ULong> = TODO()
2021-03-17 12:15:50,606 [main:63] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(): Map<Short, ULong> = TODO()
2021-03-17 12:15:50,733 [main:97] - GENERATED = LinkedHashMap<Short, ULong>()
2021-03-17 12:15:50,733 [main:97] - GENERATED = HashMap<Short, ULong>(LinkedHashMap<Short, ULong>())
2021-03-17 12:15:50,917 [main:90] - GETTING AssertionError from String
2021-03-17 12:15:50,940 [main:90] - GETTING AssertionError from Int
2021-03-17 12:15:50,971 [main:90] - GETTING AssertionError from Char
2021-03-17 12:15:51,000 [main:90] - GETTING AssertionError from String
2021-03-17 12:15:51,001 [main:90] - GETTING AssertionError from Kla2
2021-03-17 12:15:51,018 [main:90] - GETTING AssertionError from Char
2021-03-17 12:15:51,019 [main:90] - GETTING AssertionError from HashMap<Float, Double>
2021-03-17 12:15:51,140 [main:90] - GETTING AssertionError from String
2021-03-17 12:15:51,141 [main:90] - GETTING AssertionError from Int
2021-03-17 12:15:51,142 [main:90] - GETTING AssertionError from String
2021-03-17 12:15:51,143 [main:90] - GETTING AssertionError from Int
2021-03-17 12:15:51,144 [main:90] - GETTING AssertionError from Int
2021-03-17 12:15:51,145 [main:90] - GETTING AssertionError from Char
2021-03-17 12:15:51,146 [main:90] - GETTING AssertionError from Char
2021-03-17 12:15:51,147 [main:90] - GETTING AssertionError from String
2021-03-17 12:15:51,148 [main:90] - GETTING AssertionError from String
2021-03-17 12:15:51,149 [main:90] - GETTING AssertionError from Kla1
2021-03-17 12:15:51,158 [main:90] - GETTING AssertionError from String
2021-03-17 12:15:51,159 [main:90] - GETTING AssertionError from String
2021-03-17 12:15:51,160 [main:90] - GETTING AssertionError from Function0<String>
2021-03-17 12:15:51,175 [main:90] - GETTING AssertionError from Byte
2021-03-17 12:15:51,227 [main:90] - GETTING AssertionError from HashMap<Float, Double>
2021-03-17 12:15:51,227 [main:112] - replacement of AssertionError() of type AssertionError is AssertionError()
2021-03-17 12:15:51,328 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:15:51,329 [main:105] - replacing (uInt, UInt)
2021-03-17 12:15:51,329 [main:36] - replacing uInt UInt
2021-03-17 12:15:51,329 [main:40] - Getting value of type UInt
2021-03-17 12:15:51,431 [main:298] - generating value of type = UInt true depth = 0
2021-03-17 12:15:51,432 [main:44] - GENERATED VALUE OF TYPE UInt = 179377810.toUInt()
2021-03-17 12:15:51,432 [main:47] - GENERATED IS CALL =false
2021-03-17 12:15:51,435 [main:53] - randomType = Long
2021-03-17 12:15:51,531 [main:298] - generating value of type = Long true depth = 0
2021-03-17 12:15:51,577 [main:133] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@15254f5a]
2021-03-17 12:15:51,675 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:15:51,676 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2228e00]
2021-03-17 12:15:51,676 [main:63] - Generated call from random type = (-765170142925808405).compareTo(1).toUInt()
2021-03-17 12:15:51,678 [main:90] - GETTING UInt from String
2021-03-17 12:15:51,709 [main:97] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.UInt): kotlin.UInt defined in kotlin.text[DeserializedSimpleFunctionDescriptor@584bbed1]]
2021-03-17 12:15:51,709 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.UInt): kotlin.UInt defined in kotlin.text[DeserializedSimpleFunctionDescriptor@584bbed1]
2021-03-17 12:15:51,810 [main:298] - generating value of type = Function1<Char, UInt> false depth = 0
2021-03-17 12:15:51,812 [main:298] - generating value of type = UInt true depth = 1
2021-03-17 12:15:51,813 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()})))).sumOf({a: Char -> 90944810.toUInt()})
2021-03-17 12:15:51,813 [main:97] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.String.toUInt(): kotlin.UInt defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cc666ba]]
2021-03-17 12:15:51,813 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.String.toUInt(): kotlin.UInt defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cc666ba]
2021-03-17 12:15:51,813 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()})))).toUInt()
2021-03-17 12:15:51,813 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.UInt): kotlin.UInt defined in kotlin.text[DeserializedSimpleFunctionDescriptor@584bbed1]]
2021-03-17 12:15:51,813 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:15:51,932 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:15:52,025 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:15:52,027 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.UInt): kotlin.UInt defined in kotlin.text[DeserializedSimpleFunctionDescriptor@584bbed1]
2021-03-17 12:15:52,118 [main:298] - generating value of type = Function1<Char, UInt> false depth = 0
2021-03-17 12:15:52,119 [main:298] - generating value of type = UInt true depth = 1
2021-03-17 12:15:52,121 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()})))).subSequence(-1567318821, -10685455).sumOf({a: Char -> 932517660.toUInt()})
2021-03-17 12:15:52,121 [main:97] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2228e00]]
2021-03-17 12:15:52,121 [main:133] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6]
2021-03-17 12:15:52,214 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:15:52,215 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2228e00]
2021-03-17 12:15:52,215 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()})))).compareTo("hqlnj").toUInt()
2021-03-17 12:15:52,215 [main:97] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4ec47168], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2228e00]]
2021-03-17 12:15:52,215 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2228e00]
2021-03-17 12:15:52,215 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()})))).length.toUInt()
2021-03-17 12:15:52,215 [main:112] - replacement of uInt of type UInt is (-765170142925808405).compareTo(1).toUInt()
2021-03-17 12:15:52,309 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:15:52,309 [main:66] - Compilation checking started
2021-03-17 12:15:52,904 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = listOf(1u, 2u, 3u)
    var prope3 = 0
    prope2.forEachIndexed { index, uInt ->
        prope3 = prope3 * 10 + (index + 1) * (-765170142925808405).compareTo(1).toUInt().toInt()
    }
    if (prope3 != 149) throw AssertionError()
    return "OK"
}


2021-03-17 12:15:52,905 [main:105] - replacing (index + 1, Int)
2021-03-17 12:15:52,905 [main:36] - replacing index + 1 Int
2021-03-17 12:15:52,905 [main:40] - Getting value of type Int
2021-03-17 12:15:53,007 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:15:53,008 [main:44] - GENERATED VALUE OF TYPE Int = 2040820976
2021-03-17 12:15:53,008 [main:47] - GENERATED IS CALL =false
2021-03-17 12:15:53,115 [main:53] - randomType = LinkedHashMap<UShort, Double>
2021-03-17 12:15:53,208 [main:298] - generating value of type = LinkedHashMap<UShort, Double> false depth = 0
2021-03-17 12:15:53,323 [main:45] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<UShort, Double>): LkedHashMap<UShort, Double> = TODO()
2021-03-17 12:15:53,325 [main:63] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<UShort, Double>): LkedHashMap<UShort, Double> = TODO()
2021-03-17 12:15:53,423 [main:298] - generating value of type = Pair<UShort, Double> false depth = 3
2021-03-17 12:15:53,527 [main:45] - GENERATING CALL OF fun <A, B> Pair(first: UShort, second: Double): Pair<UShort, Double> = TODO()
2021-03-17 12:15:53,528 [main:63] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UShort, second: Double): Pair<UShort, Double> = TODO()
2021-03-17 12:15:53,622 [main:298] - generating value of type = UShort true depth = 6
2021-03-17 12:15:53,623 [main:298] - generating value of type = Double true depth = 6
2021-03-17 12:15:53,624 [main:97] - GENERATED = Pair<UShort, Double>(6336.toUShort(), 0.10337375032150165)
2021-03-17 12:15:53,624 [main:97] - GENERATED = linkedMapOf<UShort, Double>(Pair<UShort, Double>(6336.toUShort(), 0.10337375032150165))
2021-03-17 12:15:53,750 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@27e378d3]
2021-03-17 12:15:53,750 [main:63] - Generated call from random type = (linkedMapOf<UShort, Double>(Pair<UShort, Double>(6336.toUShort(), 0.10337375032150165))).size.countLeadingZeroBits()
2021-03-17 12:15:53,751 [main:90] - GETTING Int from Char
2021-03-17 12:15:53,775 [main:97] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a2c8472]]
2021-03-17 12:15:53,776 [main:133] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20]
2021-03-17 12:15:53,871 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:15:53,873 [main:133] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a2c8472]
2021-03-17 12:15:53,971 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:15:53,972 [main:101] - GENERATED CALL = ((69578300).toChar()).compareTo('薌').xor(-351870617)
2021-03-17 12:15:53,972 [main:97] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Int.mod(other: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@532f4545]]
2021-03-17 12:15:53,972 [main:133] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20]
2021-03-17 12:15:54,066 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:15:54,068 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Int.mod(other: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@532f4545]
2021-03-17 12:15:54,160 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:15:54,161 [main:101] - GENERATED CALL = ((69578300).toChar()).compareTo('漿').mod(257937002)
2021-03-17 12:15:54,162 [main:97] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4593c8cb], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@541a1a5d]]
2021-03-17 12:15:54,162 [main:133] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4593c8cb]
2021-03-17 12:15:54,162 [main:133] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@541a1a5d]
2021-03-17 12:15:54,255 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:15:54,256 [main:101] - GENERATED CALL = ((69578300).toChar()).toShort().div(-2)
2021-03-17 12:15:54,257 [main:97] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f385895]]
2021-03-17 12:15:54,257 [main:133] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20]
2021-03-17 12:15:54,375 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:15:54,377 [main:133] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f385895]
2021-03-17 12:15:54,483 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:15:54,484 [main:101] - GENERATED CALL = ((69578300).toChar()).compareTo('㡔').and(-1613506761)
2021-03-17 12:15:54,485 [main:97] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6cd123b9]]
2021-03-17 12:15:54,485 [main:133] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20]
2021-03-17 12:15:54,642 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:15:54,644 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6cd123b9]
2021-03-17 12:15:54,644 [main:101] - GENERATED CALL = ((69578300).toChar()).compareTo('沋').takeHighestOneBit()
2021-03-17 12:15:54,644 [main:97] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@15ce83a3]]
2021-03-17 12:15:54,644 [main:133] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20]
2021-03-17 12:15:54,740 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:15:54,742 [main:133] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@15ce83a3]
2021-03-17 12:15:54,838 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:15:54,839 [main:101] - GENERATED CALL = ((69578300).toChar()).compareTo('緊').coerceAtMost(1199584837)
2021-03-17 12:15:54,839 [main:97] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6069728], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@13ce296b]]
2021-03-17 12:15:54,839 [main:133] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6069728]
2021-03-17 12:15:54,839 [main:133] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@13ce296b]
2021-03-17 12:15:54,839 [main:101] - GENERATED CALL = ((69578300).toChar()).toLong().toInt()
2021-03-17 12:15:54,839 [main:97] - Case = [public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@199b49ba], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@24bb021c]]
2021-03-17 12:15:54,840 [main:133] - GENERATING call of type public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@199b49ba]
2021-03-17 12:15:54,840 [main:133] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@24bb021c]
2021-03-17 12:15:54,840 [main:101] - GENERATED CALL = ((69578300).toChar()).toDouble().toInt()
2021-03-17 12:15:54,840 [main:97] - Case = [public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@470fa9de], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7c7fb02c]]
2021-03-17 12:15:54,840 [main:133] - GENERATING call of type public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@470fa9de]
2021-03-17 12:15:54,840 [main:133] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7c7fb02c]
2021-03-17 12:15:54,936 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:15:54,938 [main:101] - GENERATED CALL = ((69578300).toChar()).toFloat().compareTo(23)
2021-03-17 12:15:54,938 [main:97] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5180984e]]
2021-03-17 12:15:54,938 [main:133] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20]
2021-03-17 12:15:55,031 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:15:55,032 [main:133] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5180984e]
2021-03-17 12:15:55,126 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:15:55,127 [main:101] - GENERATED CALL = ((69578300).toChar()).compareTo('곜').times(-10)
2021-03-17 12:15:55,127 [main:112] - replacement of index + 1 of type Int is ((69578300).toChar()).toDouble().toInt()
2021-03-17 12:15:55,220 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:15:55,220 [main:66] - Compilation checking started
2021-03-17 12:15:55,851 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = listOf(1u, 2u, 3u)
    var prope3 = 0
    prope2.forEachIndexed { index, uInt ->
        prope3 = prope3 * 10 + (((69578300).toChar()).toDouble().toInt()) * (-765170142925808405).compareTo(1).toUInt().toInt()
    }
    if (prope3 != 149) throw AssertionError()
    return "OK"
}


2021-03-17 12:15:55,852 [main:105] - replacing ((((69578300).toChar()).toDouble().toInt()) * (-765170142925808405).compareTo(1).toUInt().toInt(), Int)
2021-03-17 12:15:55,852 [main:36] - replacing (((69578300).toChar()).toDouble().toInt()) * (-765170142925808405).compareTo(1).toUInt().toInt() Int
2021-03-17 12:15:55,852 [main:40] - Getting value of type Int
2021-03-17 12:15:55,949 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:15:55,950 [main:44] - GENERATED VALUE OF TYPE Int = -897326379
2021-03-17 12:15:55,950 [main:47] - GENERATED IS CALL =false
2021-03-17 12:15:56,053 [main:53] - randomType = ArrayDeque<String>
2021-03-17 12:15:56,147 [main:298] - generating value of type = ArrayDeque<String> false depth = 0
2021-03-17 12:15:56,248 [main:45] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<String>): ArrayDeque<String> = TODO()
2021-03-17 12:15:56,250 [main:63] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<String>): ArrayDeque<String> = TODO()
2021-03-17 12:15:56,449 [main:298] - generating value of type = Collection<String> false depth = 3
2021-03-17 12:15:56,547 [main:45] - GENERATING CALL OF fun UIntArray(size: kotlin.Int): Collection<String> = TODO()
2021-03-17 12:15:56,549 [main:63] - WITHOUT TYPE PARAMS = fun UIntArray(size: kotlin.Int): Collection<String> = TODO()
2021-03-17 12:15:56,744 [main:298] - generating value of type = Int true depth = 6
2021-03-17 12:15:56,746 [main:97] - GENERATED = UIntArray(-378228955)
2021-03-17 12:15:56,746 [main:97] - GENERATED = ArrayDeque<String>(UIntArray(-378228955))
2021-03-17 12:15:56,876 [main:133] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12e1b6f5]
2021-03-17 12:15:56,970 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:15:56,971 [main:63] - Generated call from random type = (ArrayDeque<String>(UIntArray(-378228955))).size.ushr(1546250024)
2021-03-17 12:15:56,972 [main:90] - GETTING Int from Byte
2021-03-17 12:15:57,009 [main:97] - Case = [public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3fd822bc], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3035a6e]]
2021-03-17 12:15:57,009 [main:133] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3fd822bc]
2021-03-17 12:15:57,130 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:15:57,131 [main:133] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3035a6e]
2021-03-17 12:15:57,230 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:15:57,232 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).compareTo(74).plus(79)
2021-03-17 12:15:57,232 [main:97] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e7a913f], public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@47920f36]]
2021-03-17 12:15:57,232 [main:133] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e7a913f]
2021-03-17 12:15:57,232 [main:133] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@47920f36]
2021-03-17 12:15:57,232 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).toFloat().toInt()
2021-03-17 12:15:57,232 [main:97] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7540d103], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@515d351e]]
2021-03-17 12:15:57,232 [main:133] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7540d103]
2021-03-17 12:15:57,232 [main:133] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@515d351e]
2021-03-17 12:15:57,233 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).toInt().toInt()
2021-03-17 12:15:57,233 [main:97] - Case = [public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3fd822bc], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@15ce83a3]]
2021-03-17 12:15:57,233 [main:133] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3fd822bc]
2021-03-17 12:15:57,341 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:15:57,342 [main:133] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@15ce83a3]
2021-03-17 12:15:57,438 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:15:57,439 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).compareTo(-78).coerceAtMost(-944282042)
2021-03-17 12:15:57,439 [main:97] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4e248c8b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3a7104da]]
2021-03-17 12:15:57,439 [main:133] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4e248c8b]
2021-03-17 12:15:57,439 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3a7104da]
2021-03-17 12:15:57,439 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).toLong().countTrailingZeroBits()
2021-03-17 12:15:57,439 [main:97] - Case = [public abstract fun toByte(): kotlin.Byte defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@28260c6a], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@62d55b0b]]
2021-03-17 12:15:57,439 [main:133] - GENERATING call of type public abstract fun toByte(): kotlin.Byte defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@28260c6a]
2021-03-17 12:15:57,440 [main:133] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@62d55b0b]
2021-03-17 12:15:57,440 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).toByte().unaryPlus()
2021-03-17 12:15:57,440 [main:97] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7540d103], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a2c8472]]
2021-03-17 12:15:57,440 [main:133] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7540d103]
2021-03-17 12:15:57,440 [main:133] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a2c8472]
2021-03-17 12:15:57,533 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:15:57,534 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).toInt().xor(704464528)
2021-03-17 12:15:57,534 [main:97] - Case = [public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3fd822bc], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@41ae825e]]
2021-03-17 12:15:57,535 [main:133] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3fd822bc]
2021-03-17 12:15:57,628 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:15:57,629 [main:133] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@41ae825e]
2021-03-17 12:15:57,721 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:15:57,723 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).compareTo(106).compareTo(-15)
2021-03-17 12:15:57,723 [main:97] - Case = [public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5c5890bc]]
2021-03-17 12:15:57,723 [main:133] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5c5890bc]
2021-03-17 12:15:57,817 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:15:57,818 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).times(-98)
2021-03-17 12:15:57,818 [main:97] - Case = [public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3fd822bc], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@27e378d3]]
2021-03-17 12:15:57,818 [main:133] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3fd822bc]
2021-03-17 12:15:57,911 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:15:57,913 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@27e378d3]
2021-03-17 12:15:57,913 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).compareTo(-19).countLeadingZeroBits()
2021-03-17 12:15:57,913 [main:112] - replacement of (((69578300).toChar()).toDouble().toInt()) * (-765170142925808405).compareTo(1).toUInt().toInt() of type Int is ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).compareTo(106).compareTo(-15)
2021-03-17 12:15:58,008 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:15:58,009 [main:66] - Compilation checking started
2021-03-17 12:15:58,621 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = listOf(1u, 2u, 3u)
    var prope3 = 0
    prope2.forEachIndexed { index, uInt ->
        prope3 = prope3 * 10 + ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).compareTo(106).compareTo(-15)
    }
    if (prope3 != 149) throw AssertionError()
    return "OK"
}


2021-03-17 12:15:58,622 [main:105] - replacing (0, Int)
2021-03-17 12:15:58,622 [main:36] - replacing 0 Int
2021-03-17 12:15:58,622 [main:40] - Getting value of type Int
2021-03-17 12:15:58,716 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:15:58,717 [main:44] - GENERATED VALUE OF TYPE Int = -734496860
2021-03-17 12:15:58,717 [main:47] - GENERATED IS CALL =false
2021-03-17 12:15:58,720 [main:53] - randomType = Double
2021-03-17 12:15:58,819 [main:298] - generating value of type = Double true depth = 0
2021-03-17 12:15:58,863 [main:133] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7540d103]
2021-03-17 12:15:58,863 [main:133] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@175e2cb2]
2021-03-17 12:15:58,956 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:15:58,957 [main:63] - Generated call from random type = (0.06298694602373145).toInt().or(1559047804)
2021-03-17 12:15:58,957 [main:112] - replacement of 0 of type Int is (0.06298694602373145).toInt().or(1559047804)
2021-03-17 12:15:59,049 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:15:59,050 [main:66] - Compilation checking started
2021-03-17 12:15:59,631 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = listOf(1u, 2u, 3u)
    var prope3 = (0.06298694602373145).toInt().or(1559047804)
    prope2.forEachIndexed { index, uInt ->
        prope3 = prope3 * 10 + ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).compareTo(106).compareTo(-15)
    }
    if (prope3 != 149) throw AssertionError()
    return "OK"
}


2021-03-17 12:15:59,632 [main:105] - replacing (prope3, Int)
2021-03-17 12:15:59,632 [main:36] - replacing prope3 Int
2021-03-17 12:15:59,632 [main:40] - Getting value of type Int
2021-03-17 12:15:59,728 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:15:59,729 [main:44] - GENERATED VALUE OF TYPE Int = 1978108336
2021-03-17 12:15:59,730 [main:47] - GENERATED IS CALL =false
2021-03-17 12:15:59,732 [main:53] - randomType = Int
2021-03-17 12:15:59,825 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:15:59,874 [main:133] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7540d103]
2021-03-17 12:15:59,874 [main:63] - Generated call from random type = (996043795).toInt().absoluteValue
2021-03-17 12:15:59,875 [main:90] - GETTING Int from HashMap<Float, Double>
2021-03-17 12:15:59,962 [main:97] - Case = [public open val values: kotlin.collections.MutableCollection<kotlin.Double> defined in kotlin.collections.HashMap[DeserializedPropertyDescriptor@12728472], public abstract val size: kotlin.Int defined in kotlin.collections.MutableCollection[DeserializedPropertyDescriptor@12a19c0e]]
2021-03-17 12:15:59,962 [main:101] - GENERATED CALL = ((hashMapOf<Float, Double>())).values.size
2021-03-17 12:15:59,962 [main:97] - Case = [public open val size: kotlin.Int defined in kotlin.collections.HashMap[DeserializedPropertyDescriptor@30cdf148], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@295790db]]
2021-03-17 12:15:59,963 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@295790db]
2021-03-17 12:15:59,963 [main:101] - GENERATED CALL = ((hashMapOf<Float, Double>())).size.takeLowestOneBit()
2021-03-17 12:15:59,963 [main:97] - Case = [public open val size: kotlin.Int defined in kotlin.collections.HashMap[DeserializedPropertyDescriptor@30cdf148], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@15ce83a3]]
2021-03-17 12:15:59,963 [main:133] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@15ce83a3]
2021-03-17 12:16:00,072 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:00,074 [main:101] - GENERATED CALL = ((hashMapOf<Float, Double>())).size.coerceAtMost(-29737670)
2021-03-17 12:16:00,074 [main:97] - Case = [public open val size: kotlin.Int defined in kotlin.collections.HashMap[DeserializedPropertyDescriptor@30cdf148], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6cd123b9]]
2021-03-17 12:16:00,074 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6cd123b9]
2021-03-17 12:16:00,074 [main:101] - GENERATED CALL = ((hashMapOf<Float, Double>())).size.takeHighestOneBit()
2021-03-17 12:16:00,074 [main:97] - Case = [public open val size: kotlin.Int defined in kotlin.collections.HashMap[DeserializedPropertyDescriptor@30cdf148], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@79d0d204]]
2021-03-17 12:16:00,074 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@79d0d204]
2021-03-17 12:16:00,167 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:00,168 [main:101] - GENERATED CALL = ((hashMapOf<Float, Double>())).size.rotateRight(-549890765)
2021-03-17 12:16:00,168 [main:97] - Case = [public open val size: kotlin.Int defined in kotlin.collections.HashMap[DeserializedPropertyDescriptor@30cdf148], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@977c3ce]]
2021-03-17 12:16:00,168 [main:133] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@977c3ce]
2021-03-17 12:16:00,262 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:00,264 [main:101] - GENERATED CALL = ((hashMapOf<Float, Double>())).size.shr(409961490)
2021-03-17 12:16:00,264 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun <K, V> kotlin.collections.Map<out K, V>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3f72126c]]
2021-03-17 12:16:00,264 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <K, V> kotlin.collections.Map<out K, V>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3f72126c]
2021-03-17 12:16:00,264 [main:101] - GENERATED CALL = ((hashMapOf<Float, Double>())).count()
2021-03-17 12:16:00,264 [main:97] - Case = [public open val size: kotlin.Int defined in kotlin.collections.HashMap[DeserializedPropertyDescriptor@30cdf148], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@302b89d6]]
2021-03-17 12:16:00,264 [main:133] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@302b89d6]
2021-03-17 12:16:00,356 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:16:00,358 [main:101] - GENERATED CALL = ((hashMapOf<Float, Double>())).size.rem(17)
2021-03-17 12:16:00,358 [main:97] - Case = [public open val size: kotlin.Int defined in kotlin.collections.HashMap[DeserializedPropertyDescriptor@30cdf148], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3035a6e]]
2021-03-17 12:16:00,358 [main:133] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3035a6e]
2021-03-17 12:16:00,451 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:16:00,452 [main:101] - GENERATED CALL = ((hashMapOf<Float, Double>())).size.plus(-81)
2021-03-17 12:16:00,452 [main:97] - Case = [public open val size: kotlin.Int defined in kotlin.collections.HashMap[DeserializedPropertyDescriptor@30cdf148], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Int.mod(other: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@532f4545]]
2021-03-17 12:16:00,453 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Int.mod(other: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@532f4545]
2021-03-17 12:16:00,547 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:00,549 [main:101] - GENERATED CALL = ((hashMapOf<Float, Double>())).size.mod(426603395)
2021-03-17 12:16:00,549 [main:112] - replacement of prope3 of type Int is ((hashMapOf<Float, Double>())).size.plus(-81)
2021-03-17 12:16:00,644 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:16:00,645 [main:66] - Compilation checking started
2021-03-17 12:16:01,241 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = listOf(1u, 2u, 3u)
    var prope3 = (0.06298694602373145).toInt().or(1559047804)
    prope2.forEachIndexed { index, uInt ->
        prope3 = prope3 * 10 + ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).compareTo(106).compareTo(-15)
    }
    if (((hashMapOf<Float, Double>())).size.plus(-81) != 149) throw AssertionError()
    return "OK"
}


2021-03-17 12:16:01,241 [main:105] - replacing (((hashMapOf<Float, Double>())).size.plus(-81) != 149, Boolean)
2021-03-17 12:16:01,242 [main:36] - replacing ((hashMapOf<Float, Double>())).size.plus(-81) != 149 Boolean
2021-03-17 12:16:01,242 [main:40] - Getting value of type Boolean
2021-03-17 12:16:01,339 [main:298] - generating value of type = Boolean true depth = 0
2021-03-17 12:16:01,340 [main:44] - GENERATED VALUE OF TYPE Boolean = false
2021-03-17 12:16:01,341 [main:47] - GENERATED IS CALL =false
2021-03-17 12:16:01,345 [main:53] - randomType = Double
2021-03-17 12:16:01,442 [main:298] - generating value of type = Double true depth = 0
2021-03-17 12:16:01,488 [main:133] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7540d103]
2021-03-17 12:16:01,489 [main:133] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d1c5046]
2021-03-17 12:16:01,585 [main:298] - generating value of type = Any false depth = 0
2021-03-17 12:16:01,585 [main:63] - Generated call from random type = (0.8769771472611939).toInt().equals("fsjun")
2021-03-17 12:16:01,586 [main:90] - GETTING Boolean from String
2021-03-17 12:16:01,629 [main:97] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319b50be]]
2021-03-17 12:16:01,630 [main:133] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319b50be]
2021-03-17 12:16:01,630 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).any()
2021-03-17 12:16:01,630 [main:97] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48ba674e]]
2021-03-17 12:16:01,630 [main:133] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48ba674e]
2021-03-17 12:16:01,723 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:16:01,816 [main:298] - generating value of type = Boolean true depth = 0
2021-03-17 12:16:01,818 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).startsWith("fdros", false)
2021-03-17 12:16:01,818 [main:97] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a68c8a7]]
2021-03-17 12:16:01,818 [main:133] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a68c8a7]
2021-03-17 12:16:01,818 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).toBoolean()
2021-03-17 12:16:01,818 [main:97] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6a0cbc6f], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@48f2458c]]
2021-03-17 12:16:01,818 [main:133] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6a0cbc6f]
2021-03-17 12:16:01,911 [main:298] - generating value of type = Any false depth = 0
2021-03-17 12:16:01,911 [main:133] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@48f2458c]
2021-03-17 12:16:02,003 [main:298] - generating value of type = Boolean true depth = 0
2021-03-17 12:16:02,005 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).equals("jzoyy").or(false)
2021-03-17 12:16:02,005 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@743b850a]]
2021-03-17 12:16:02,005 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:16:02,098 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:02,191 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:02,193 [main:133] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@743b850a]
2021-03-17 12:16:02,285 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:02,287 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).subSequence(-1588718821, -1418478790).hasSurrogatePairAt(2092056432)
2021-03-17 12:16:02,287 [main:97] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6a0cbc6f], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5de7550d]]
2021-03-17 12:16:02,287 [main:133] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6a0cbc6f]
2021-03-17 12:16:02,380 [main:298] - generating value of type = Any false depth = 0
2021-03-17 12:16:02,380 [main:133] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5de7550d]
2021-03-17 12:16:02,473 [main:298] - generating value of type = Boolean true depth = 0
2021-03-17 12:16:02,475 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).equals("zmnuy").xor(false)
2021-03-17 12:16:02,475 [main:97] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65b0797a]]
2021-03-17 12:16:02,475 [main:133] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8]
2021-03-17 12:16:02,566 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:02,568 [main:133] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65b0797a]
2021-03-17 12:16:02,571 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).get(431033620).isHighSurrogate()
2021-03-17 12:16:02,571 [main:97] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@386d5e1c]]
2021-03-17 12:16:02,571 [main:133] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8]
2021-03-17 12:16:02,664 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:02,665 [main:133] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@386d5e1c]
2021-03-17 12:16:02,816 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:16:02,920 [main:298] - generating value of type = Boolean true depth = 0
2021-03-17 12:16:02,922 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).get(-1904957706).equals('莭', false)
2021-03-17 12:16:02,922 [main:97] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32549be]]
2021-03-17 12:16:02,922 [main:133] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8]
2021-03-17 12:16:03,045 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:03,047 [main:133] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32549be]
2021-03-17 12:16:03,047 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).get(-1670112421).isTitleCase()
2021-03-17 12:16:03,047 [main:97] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cf1ee11]]
2021-03-17 12:16:03,047 [main:133] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cf1ee11]
2021-03-17 12:16:03,047 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).none()
2021-03-17 12:16:03,047 [main:112] - replacement of ((hashMapOf<Float, Double>())).size.plus(-81) != 149 of type Boolean is false
2021-03-17 12:16:03,143 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-17 12:16:03,144 [main:66] - Compilation checking started
2021-03-17 12:16:03,725 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = listOf(1u, 2u, 3u)
    var prope3 = (0.06298694602373145).toInt().or(1559047804)
    prope2.forEachIndexed { index, uInt ->
        prope3 = prope3 * 10 + ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).compareTo(106).compareTo(-15)
    }
    if (false) throw AssertionError()
    return "OK"
}


2021-03-17 12:16:03,726 [main:105] - replacing (prope3, Int)
2021-03-17 12:16:03,726 [main:36] - replacing prope3 Int
2021-03-17 12:16:03,726 [main:40] - Getting value of type Int
2021-03-17 12:16:03,822 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:03,823 [main:44] - GENERATED VALUE OF TYPE Int = -467399060
2021-03-17 12:16:03,823 [main:47] - GENERATED IS CALL =false
2021-03-17 12:16:03,827 [main:53] - randomType = Int
2021-03-17 12:16:03,920 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:03,966 [main:133] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7540d103]
2021-03-17 12:16:03,966 [main:63] - Generated call from random type = (-573435006).toInt().sign
2021-03-17 12:16:03,967 [main:90] - GETTING Int from String
2021-03-17 12:16:03,987 [main:97] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@977c3ce]]
2021-03-17 12:16:03,987 [main:133] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6]
2021-03-17 12:16:04,078 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:16:04,080 [main:133] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@977c3ce]
2021-03-17 12:16:04,171 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:04,173 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).compareTo("pfdpa").shr(839226521)
2021-03-17 12:16:04,173 [main:97] - Case = [public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b52f9d2]]
2021-03-17 12:16:04,173 [main:133] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b52f9d2]
2021-03-17 12:16:04,173 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).toInt()
2021-03-17 12:16:04,173 [main:97] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Int.floorDiv(other: kotlin.Byte): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@26bd1e9f]]
2021-03-17 12:16:04,173 [main:133] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6]
2021-03-17 12:16:04,266 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:16:04,268 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Int.floorDiv(other: kotlin.Byte): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@26bd1e9f]
2021-03-17 12:16:04,385 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:16:04,387 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).compareTo("bivmc").floorDiv(-86)
2021-03-17 12:16:04,387 [main:97] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6a0cbc6f], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@632712f]]
2021-03-17 12:16:04,387 [main:133] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6a0cbc6f]
2021-03-17 12:16:04,479 [main:298] - generating value of type = Any false depth = 0
2021-03-17 12:16:04,479 [main:133] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@632712f]
2021-03-17 12:16:04,570 [main:298] - generating value of type = Boolean true depth = 0
2021-03-17 12:16:04,572 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).equals("gcusq").compareTo(false)
2021-03-17 12:16:04,572 [main:97] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a2c8472]]
2021-03-17 12:16:04,572 [main:133] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6]
2021-03-17 12:16:04,663 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:16:04,665 [main:133] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a2c8472]
2021-03-17 12:16:04,756 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:04,758 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).compareTo("trhrv").xor(1041645486)
2021-03-17 12:16:04,758 [main:97] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@15ce83a3]]
2021-03-17 12:16:04,758 [main:133] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6]
2021-03-17 12:16:04,848 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:16:04,850 [main:133] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@15ce83a3]
2021-03-17 12:16:04,940 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:04,941 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).compareTo("ksbhr").coerceAtMost(-1505833611)
2021-03-17 12:16:04,941 [main:97] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4ec47168], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@cf94dd0]]
2021-03-17 12:16:04,941 [main:133] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@cf94dd0]
2021-03-17 12:16:05,033 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:16:05,035 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).length.minus(-76)
2021-03-17 12:16:05,035 [main:97] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5180984e]]
2021-03-17 12:16:05,035 [main:133] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6]
2021-03-17 12:16:05,129 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:16:05,131 [main:133] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5180984e]
2021-03-17 12:16:05,221 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:16:05,223 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).compareTo("yhxmy").times(18)
2021-03-17 12:16:05,223 [main:97] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4ec47168], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a2c8472]]
2021-03-17 12:16:05,223 [main:133] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a2c8472]
2021-03-17 12:16:05,314 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:05,316 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).length.xor(-346333606)
2021-03-17 12:16:05,316 [main:97] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f385895]]
2021-03-17 12:16:05,316 [main:133] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6]
2021-03-17 12:16:05,407 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:16:05,409 [main:133] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f385895]
2021-03-17 12:16:05,502 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:05,503 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).compareTo("qcvcp").and(-1670977742)
2021-03-17 12:16:05,503 [main:112] - replacement of prope3 of type Int is ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).compareTo("yhxmy").times(18)
2021-03-17 12:16:05,639 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:16:05,639 [main:66] - Compilation checking started
2021-03-17 12:16:06,130 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = listOf(1u, 2u, 3u)
    var prope3 = (0.06298694602373145).toInt().or(1559047804)
    prope2.forEachIndexed { index, uInt ->
        ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).compareTo("yhxmy").times(18) = prope3 * 10 + ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).compareTo(106).compareTo(-15)
    }
    if (false) throw AssertionError()
    return "OK"
}


2021-03-17 12:16:06,131 [main:105] - replacing (prope3 * 10, Int)
2021-03-17 12:16:06,131 [main:36] - replacing prope3 * 10 Int
2021-03-17 12:16:06,131 [main:40] - Getting value of type Int
2021-03-17 12:16:06,222 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:06,224 [main:44] - GENERATED VALUE OF TYPE Int = 1508843575
2021-03-17 12:16:06,224 [main:47] - GENERATED IS CALL =false
2021-03-17 12:16:06,532 [main:53] - randomType = Triple<Int, UByte?, Double>
2021-03-17 12:16:06,624 [main:298] - generating value of type = Triple<Int, UByte?, Double> false depth = 0
2021-03-17 12:16:06,722 [main:45] - GENERATING CALL OF fun <A, B, C> Triple(first: Int, second: UByte?, third: Double): Triple<Int, UByte?, Double> = TODO()
2021-03-17 12:16:06,724 [main:63] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Int, second: UByte?, third: Double): Triple<Int, UByte?, Double> = TODO()
2021-03-17 12:16:06,820 [main:298] - generating value of type = Int true depth = 3
2021-03-17 12:16:06,821 [main:298] - generating value of type = UByte true depth = 3
2021-03-17 12:16:06,823 [main:298] - generating value of type = Double true depth = 3
2021-03-17 12:16:06,824 [main:97] - GENERATED = Triple<Int, UByte?, Double>(-45254605, 45.toUByte(), 0.8552569943139793)
2021-03-17 12:16:06,843 [main:133] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5180984e]
2021-03-17 12:16:06,939 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:16:06,941 [main:63] - Generated call from random type = (Triple<Int, UByte?, Double>(-45254605, 45.toUByte(), 0.8552569943139793)).first.times(-116)
2021-03-17 12:16:06,942 [main:90] - GETTING Int from Char
2021-03-17 12:16:06,965 [main:97] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@22268e34]]
2021-03-17 12:16:06,966 [main:133] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20]
2021-03-17 12:16:07,058 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:16:07,059 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@22268e34]
2021-03-17 12:16:07,059 [main:101] - GENERATED CALL = (((hashMapOf<Float, Double>()).size).toChar()).compareTo('쥷').countOneBits()
2021-03-17 12:16:07,059 [main:97] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@b8e4b53], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@115104b3]]
2021-03-17 12:16:07,059 [main:133] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@b8e4b53]
2021-03-17 12:16:07,059 [main:133] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@115104b3]
2021-03-17 12:16:07,060 [main:101] - GENERATED CALL = (((hashMapOf<Float, Double>()).size).toChar()).toByte().unaryMinus()
2021-03-17 12:16:07,060 [main:97] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3035a6e]]
2021-03-17 12:16:07,060 [main:133] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20]
2021-03-17 12:16:07,177 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:16:07,179 [main:133] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3035a6e]
2021-03-17 12:16:07,270 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:16:07,271 [main:101] - GENERATED CALL = (((hashMapOf<Float, Double>()).size).toChar()).compareTo('᎑').plus(59)
2021-03-17 12:16:07,271 [main:97] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@d60fd7c]]
2021-03-17 12:16:07,271 [main:133] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20]
2021-03-17 12:16:07,377 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:16:07,379 [main:133] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@d60fd7c]
2021-03-17 12:16:07,379 [main:101] - GENERATED CALL = (((hashMapOf<Float, Double>()).size).toChar()).compareTo('蓠').dec()
2021-03-17 12:16:07,379 [main:97] - Case = [public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@470fa9de], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7c7fb02c]]
2021-03-17 12:16:07,379 [main:133] - GENERATING call of type public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@470fa9de]
2021-03-17 12:16:07,379 [main:133] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7c7fb02c]
2021-03-17 12:16:07,471 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:16:07,473 [main:101] - GENERATED CALL = (((hashMapOf<Float, Double>()).size).toChar()).toFloat().compareTo(-109)
2021-03-17 12:16:07,473 [main:97] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@b8e4b53], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@62d55b0b]]
2021-03-17 12:16:07,473 [main:133] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@b8e4b53]
2021-03-17 12:16:07,473 [main:133] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@62d55b0b]
2021-03-17 12:16:07,473 [main:101] - GENERATED CALL = (((hashMapOf<Float, Double>()).size).toChar()).toByte().unaryPlus()
2021-03-17 12:16:07,473 [main:97] - Case = [public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3e22b6bf]]
2021-03-17 12:16:07,473 [main:133] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3e22b6bf]
2021-03-17 12:16:07,473 [main:101] - GENERATED CALL = (((hashMapOf<Float, Double>()).size).toChar()).toInt()
2021-03-17 12:16:07,473 [main:97] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@79d0d204]]
2021-03-17 12:16:07,473 [main:133] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20]
2021-03-17 12:16:07,565 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:16:07,567 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@79d0d204]
2021-03-17 12:16:07,660 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:07,661 [main:101] - GENERATED CALL = (((hashMapOf<Float, Double>()).size).toChar()).compareTo('ཫ').rotateRight(635635751)
2021-03-17 12:16:07,662 [main:97] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@15ce83a3]]
2021-03-17 12:16:07,662 [main:133] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20]
2021-03-17 12:16:07,751 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:16:07,753 [main:133] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@15ce83a3]
2021-03-17 12:16:07,843 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:07,845 [main:101] - GENERATED CALL = (((hashMapOf<Float, Double>()).size).toChar()).compareTo('䅃').coerceAtMost(-609360441)
2021-03-17 12:16:07,845 [main:97] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6069728], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@15254f5a]]
2021-03-17 12:16:07,845 [main:133] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6069728]
2021-03-17 12:16:07,845 [main:133] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@15254f5a]
2021-03-17 12:16:07,935 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:16:07,936 [main:101] - GENERATED CALL = (((hashMapOf<Float, Double>()).size).toChar()).toLong().compareTo(123)
2021-03-17 12:16:07,936 [main:112] - replacement of prope3 * 10 of type Int is (((hashMapOf<Float, Double>()).size).toChar()).compareTo('᎑').plus(59)
2021-03-17 12:16:08,027 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:16:08,027 [main:66] - Compilation checking started
2021-03-17 12:16:08,613 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = listOf(1u, 2u, 3u)
    var prope3 = (0.06298694602373145).toInt().or(1559047804)
    prope2.forEachIndexed { index, uInt ->
        prope3 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo('᎑').plus(59) + ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).compareTo(106).compareTo(-15)
    }
    if (false) throw AssertionError()
    return "OK"
}


2021-03-17 12:16:08,613 [main:105] - replacing ("OK", String)
2021-03-17 12:16:08,614 [main:36] - replacing "OK" String
2021-03-17 12:16:08,614 [main:40] - Getting value of type String
2021-03-17 12:16:08,706 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:16:08,707 [main:44] - GENERATED VALUE OF TYPE String = "dighw"
2021-03-17 12:16:08,707 [main:47] - GENERATED IS CALL =false
2021-03-17 12:16:08,711 [main:53] - randomType = Byte
2021-03-17 12:16:08,806 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:16:08,868 [main:133] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5f75ec98]
2021-03-17 12:16:08,959 [main:298] - generating value of type = Long true depth = 0
2021-03-17 12:16:08,961 [main:133] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30291238]
2021-03-17 12:16:09,054 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:09,055 [main:63] - Generated call from random type = (86).div(2578164984397254024).toString(-544327065)
2021-03-17 12:16:09,056 [main:90] - GETTING String from String
2021-03-17 12:16:09,073 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e90d312]]
2021-03-17 12:16:09,073 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e90d312]
2021-03-17 12:16:09,165 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:09,258 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:09,351 [main:298] - generating value of type = CharSequence false depth = 0
2021-03-17 12:16:09,356 [main:101] - GENERATED CALL = (ss).replaceRange(251969881, 1566868846, "zzejk")
2021-03-17 12:16:09,356 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a908161]]
2021-03-17 12:16:09,356 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a908161]
2021-03-17 12:16:09,447 [main:298] - generating value of type = Iterable<Int> false depth = 0
2021-03-17 12:16:09,545 [main:45] - GENERATING CALL OF fun <T> setOf(elements: Int): Iterable<Int> = TODO()
2021-03-17 12:16:09,547 [main:63] - WITHOUT TYPE PARAMS = fun <T> setOf(elements: Int): Iterable<Int> = TODO()
2021-03-17 12:16:09,640 [main:298] - generating value of type = Int true depth = 3
2021-03-17 12:16:09,642 [main:97] - GENERATED = setOf<Int>(1043459648)
2021-03-17 12:16:09,642 [main:101] - GENERATED CALL = (ss).slice(setOf<Int>(1043459648))
2021-03-17 12:16:09,642 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b3459af]]
2021-03-17 12:16:09,642 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b3459af]
2021-03-17 12:16:09,734 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:09,735 [main:101] - GENERATED CALL = (ss).substring(-447955899)
2021-03-17 12:16:09,736 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72f91e3a]]
2021-03-17 12:16:09,736 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:16:09,827 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:09,919 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:09,921 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72f91e3a]
2021-03-17 12:16:10,013 [main:298] - generating value of type = Regex false depth = 0
2021-03-17 12:16:10,108 [main:45] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-17 12:16:10,110 [main:63] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-17 12:16:10,347 [main:298] - generating value of type = String true depth = 3
2021-03-17 12:16:10,349 [main:97] - GENERATED = Regex("soggd")
2021-03-17 12:16:10,456 [main:298] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-17 12:16:10,458 [main:298] - generating value of type = CharSequence false depth = 1
2021-03-17 12:16:10,463 [main:101] - GENERATED CALL = (ss).subSequence(1425428093, -1655946168).replace(Regex("soggd"), {a: MatchResult -> "ojfmn"})
2021-03-17 12:16:10,463 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@82daf5c]]
2021-03-17 12:16:10,463 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@82daf5c]
2021-03-17 12:16:10,463 [main:101] - GENERATED CALL = (ss).trimStart()
2021-03-17 12:16:10,463 [main:97] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@636eedcd]]
2021-03-17 12:16:10,463 [main:133] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@636eedcd]
2021-03-17 12:16:10,463 [main:101] - GENERATED CALL = (ss).decapitalize()
2021-03-17 12:16:10,463 [main:97] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9089de5]]
2021-03-17 12:16:10,463 [main:133] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9089de5]
2021-03-17 12:16:10,556 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:16:10,648 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:16:10,650 [main:101] - GENERATED CALL = (ss).substringBefore('贯', "sagcb")
2021-03-17 12:16:10,650 [main:97] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21b5c26c]]
2021-03-17 12:16:10,650 [main:133] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21b5c26c]
2021-03-17 12:16:10,741 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:16:10,833 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:16:10,927 [main:298] - generating value of type = Boolean true depth = 0
2021-03-17 12:16:10,928 [main:101] - GENERATED CALL = (ss).replace('韘', '?', false)
2021-03-17 12:16:10,928 [main:97] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@703ebc43]]
2021-03-17 12:16:10,928 [main:133] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@703ebc43]
2021-03-17 12:16:11,023 [main:298] - generating value of type = CharSequence false depth = 0
2021-03-17 12:16:11,120 [main:45] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-17 12:16:11,122 [main:63] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-17 12:16:11,315 [main:298] - generating value of type = Int true depth = 3
2021-03-17 12:16:11,317 [main:97] - GENERATED = StringBuilder(1419847861)
2021-03-17 12:16:11,317 [main:101] - GENERATED CALL = (ss).removeSuffix(StringBuilder(1419847861))
2021-03-17 12:16:11,317 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@722db6bf]]
2021-03-17 12:16:11,317 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@722db6bf]
2021-03-17 12:16:11,317 [main:101] - GENERATED CALL = (ss).reversed()
2021-03-17 12:16:11,317 [main:112] - replacement of "OK" of type String is (ss).replace('韘', '?', false)
2021-03-17 12:16:11,408 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:16:11,408 [main:66] - Compilation checking started
2021-03-17 12:16:12,058 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = listOf(1u, 2u, 3u)
    var prope3 = (0.06298694602373145).toInt().or(1559047804)
    prope2.forEachIndexed { index, uInt ->
        prope3 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo('᎑').plus(59) + ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).compareTo(106).compareTo(-15)
    }
    if (false) throw AssertionError()
    return (ss).replace('韘', '?', false)
}


2021-03-17 12:16:12,059 [main:105] - replacing (1u, UInt)
2021-03-17 12:16:12,059 [main:36] - replacing 1u UInt
2021-03-17 12:16:12,059 [main:40] - Getting value of type UInt
2021-03-17 12:16:12,157 [main:298] - generating value of type = UInt true depth = 0
2021-03-17 12:16:12,158 [main:44] - GENERATED VALUE OF TYPE UInt = 1687953186.toUInt()
2021-03-17 12:16:12,159 [main:47] - GENERATED IS CALL =false
2021-03-17 12:16:12,265 [main:53] - randomType = String?
2021-03-17 12:16:12,359 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:16:12,380 [main:133] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6]
2021-03-17 12:16:12,472 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:16:12,474 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2228e00]
2021-03-17 12:16:12,474 [main:63] - Generated call from random type = ("wgssj")?.compareTo("arjur").toUInt()
2021-03-17 12:16:12,475 [main:90] - GETTING UInt from String
2021-03-17 12:16:12,492 [main:97] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.String.toUInt(): kotlin.UInt defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cc666ba]]
2021-03-17 12:16:12,492 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.String.toUInt(): kotlin.UInt defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cc666ba]
2021-03-17 12:16:12,493 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).toUInt()
2021-03-17 12:16:12,493 [main:97] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.UInt): kotlin.UInt defined in kotlin.text[DeserializedSimpleFunctionDescriptor@584bbed1]]
2021-03-17 12:16:12,493 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.UInt): kotlin.UInt defined in kotlin.text[DeserializedSimpleFunctionDescriptor@584bbed1]
2021-03-17 12:16:12,584 [main:298] - generating value of type = Function1<Char, UInt> false depth = 0
2021-03-17 12:16:12,586 [main:298] - generating value of type = UInt true depth = 1
2021-03-17 12:16:12,587 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).sumOf({a: Char -> 622611416.toUInt()})
2021-03-17 12:16:12,587 [main:97] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2228e00]]
2021-03-17 12:16:12,587 [main:133] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6]
2021-03-17 12:16:12,678 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:16:12,680 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2228e00]
2021-03-17 12:16:12,680 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).compareTo("zneiw").toUInt()
2021-03-17 12:16:12,680 [main:97] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4ec47168], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2228e00]]
2021-03-17 12:16:12,680 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2228e00]
2021-03-17 12:16:12,681 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).length.toUInt()
2021-03-17 12:16:12,681 [main:97] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.UInt): kotlin.UInt defined in kotlin.text[DeserializedSimpleFunctionDescriptor@584bbed1]]
2021-03-17 12:16:12,681 [main:133] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3043a41a]
2021-03-17 12:16:12,772 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:12,865 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:12,867 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.UInt): kotlin.UInt defined in kotlin.text[DeserializedSimpleFunctionDescriptor@584bbed1]
2021-03-17 12:16:12,957 [main:298] - generating value of type = Function1<Char, UInt> false depth = 0
2021-03-17 12:16:12,959 [main:298] - generating value of type = UInt true depth = 1
2021-03-17 12:16:12,960 [main:101] - GENERATED CALL = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).subSequence(1994957503, -573194860).sumOf({a: Char -> 398759087.toUInt()})
2021-03-17 12:16:12,960 [main:112] - replacement of 1u of type UInt is (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).subSequence(1994957503, -573194860).sumOf({a: Char -> 398759087.toUInt()})
2021-03-17 12:16:13,053 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:16:13,054 [main:66] - Compilation checking started
2021-03-17 12:16:13,718 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = listOf((test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).subSequence(1994957503, -573194860).sumOf({a: Char -> 398759087.toUInt()}), 2u, 3u)
    var prope3 = (0.06298694602373145).toInt().or(1559047804)
    prope2.forEachIndexed { index, uInt ->
        prope3 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo('᎑').plus(59) + ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).compareTo(106).compareTo(-15)
    }
    if (false) throw AssertionError()
    return (ss).replace('韘', '?', false)
}


2021-03-17 12:16:13,719 [main:105] - replacing (prope3, Int)
2021-03-17 12:16:13,719 [main:36] - replacing prope3 Int
2021-03-17 12:16:13,720 [main:40] - Getting value of type Int
2021-03-17 12:16:13,819 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:13,821 [main:44] - GENERATED VALUE OF TYPE Int = 1360091008
2021-03-17 12:16:13,821 [main:47] - GENERATED IS CALL =false
2021-03-17 12:16:13,824 [main:53] - randomType = Byte
2021-03-17 12:16:13,925 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:16:13,961 [main:133] - GENERATING call of type public abstract fun toByte(): kotlin.Byte defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@28260c6a]
2021-03-17 12:16:13,961 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.mod(other: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@379dbb97]
2021-03-17 12:16:14,062 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:14,064 [main:63] - Generated call from random type = (-33).toByte().mod(-2111428526)
2021-03-17 12:16:14,065 [main:90] - GETTING Int from String
2021-03-17 12:16:14,087 [main:97] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4ec47168], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@d60fd7c]]
2021-03-17 12:16:14,087 [main:133] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@d60fd7c]
2021-03-17 12:16:14,087 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).length.dec()
2021-03-17 12:16:14,087 [main:97] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@22268e34]]
2021-03-17 12:16:14,087 [main:133] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6]
2021-03-17 12:16:14,191 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:16:14,193 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@22268e34]
2021-03-17 12:16:14,193 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).compareTo("avyrh").countOneBits()
2021-03-17 12:16:14,193 [main:97] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17ed4161]]
2021-03-17 12:16:14,193 [main:133] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12d6eff8]
2021-03-17 12:16:14,295 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:14,297 [main:133] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17ed4161]
2021-03-17 12:16:14,297 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).get(-538138236).digitToInt()
2021-03-17 12:16:14,297 [main:97] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@746d3fa8]]
2021-03-17 12:16:14,297 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@746d3fa8]
2021-03-17 12:16:14,297 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).count()
2021-03-17 12:16:14,298 [main:97] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4ec47168], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@22268e34]]
2021-03-17 12:16:14,298 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@22268e34]
2021-03-17 12:16:14,298 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).length.countOneBits()
2021-03-17 12:16:14,298 [main:97] - Case = [public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c1a9aa7]]
2021-03-17 12:16:14,298 [main:133] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c1a9aa7]
2021-03-17 12:16:14,398 [main:298] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-17 12:16:14,399 [main:298] - generating value of type = Boolean true depth = 1
2021-03-17 12:16:14,401 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).indexOfLast({a: Char -> false})
2021-03-17 12:16:14,401 [main:97] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f385895]]
2021-03-17 12:16:14,401 [main:133] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6]
2021-03-17 12:16:14,500 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:16:14,501 [main:133] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f385895]
2021-03-17 12:16:14,600 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:14,602 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).compareTo("aidsw").and(255577952)
2021-03-17 12:16:14,602 [main:97] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@295790db]]
2021-03-17 12:16:14,602 [main:133] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c1d68c6]
2021-03-17 12:16:14,701 [main:298] - generating value of type = String true depth = 0
2021-03-17 12:16:14,703 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@295790db]
2021-03-17 12:16:14,703 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).compareTo("vaduy").takeLowestOneBit()
2021-03-17 12:16:14,703 [main:97] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4ec47168], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1d10739a]]
2021-03-17 12:16:14,703 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1d10739a]
2021-03-17 12:16:14,703 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).length.countTrailingZeroBits()
2021-03-17 12:16:14,703 [main:97] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4ec47168], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Int.mod(other: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@532f4545]]
2021-03-17 12:16:14,703 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Int.mod(other: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@532f4545]
2021-03-17 12:16:14,802 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:14,804 [main:101] - GENERATED CALL = ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).length.mod(-1655820828)
2021-03-17 12:16:14,804 [main:112] - replacement of prope3 of type Int is ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).compareTo("vaduy").takeLowestOneBit()
2021-03-17 12:16:14,904 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:16:14,904 [main:66] - Compilation checking started
2021-03-17 12:16:15,416 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = listOf((test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).subSequence(1994957503, -573194860).sumOf({a: Char -> 398759087.toUInt()}), 2u, 3u)
    var prope3 = (0.06298694602373145).toInt().or(1559047804)
    prope2.forEachIndexed { index, uInt ->
        ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()})))).compareTo("vaduy").takeLowestOneBit() = (((hashMapOf<Float, Double>()).size).toChar()).compareTo('᎑').plus(59) + ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).compareTo(106).compareTo(-15)
    }
    if (false) throw AssertionError()
    return (ss).replace('韘', '?', false)
}


2021-03-17 12:16:15,416 [main:105] - replacing (prope2, List<UInt>)
2021-03-17 12:16:15,417 [main:36] - replacing prope2 List<UInt>
2021-03-17 12:16:15,417 [main:40] - Getting value of type List<UInt>
2021-03-17 12:16:15,536 [main:298] - generating value of type = List<UInt> false depth = 0
2021-03-17 12:16:15,647 [main:45] - GENERATING CALL OF fun <T> List(size: kotlin.Int, init: (index: kotlin.Int)->UInt): List<UInt> = TODO()
2021-03-17 12:16:15,650 [main:63] - WITHOUT TYPE PARAMS = fun <T> List(size: kotlin.Int, init: (index: kotlin.Int)->UInt): List<UInt> = TODO()
2021-03-17 12:16:15,975 [main:298] - generating value of type = Int true depth = 3
2021-03-17 12:16:15,977 [main:298] - generating value of type = Function1<[@kotlin.ParameterName] Int, UInt> false depth = 3
2021-03-17 12:16:15,979 [main:298] - generating value of type = UInt true depth = 4
2021-03-17 12:16:15,980 [main:97] - GENERATED = List<UInt>(-1394291455, {a: Int -> 1719858042.toUInt()})
2021-03-17 12:16:15,980 [main:44] - GENERATED VALUE OF TYPE List<UInt> = List<UInt>(-1394291455, {a: Int -> 1719858042.toUInt()})
2021-03-17 12:16:15,980 [main:47] - GENERATED IS CALL =true
2021-03-17 12:16:15,985 [main:53] - randomType = Int
2021-03-17 12:16:16,088 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:16,192 [main:90] - GETTING List<UInt> from HashMap<Float, Double>
2021-03-17 12:16:16,284 [main:90] - GETTING List<UInt> from String
2021-03-17 12:16:16,303 [main:90] - GETTING List<UInt> from Function0<String>
2021-03-17 12:16:16,315 [main:90] - GETTING List<UInt> from Byte
2021-03-17 12:16:16,349 [main:90] - GETTING List<UInt> from Int
2021-03-17 12:16:16,382 [main:90] - GETTING List<UInt> from Char
2021-03-17 12:16:16,402 [main:90] - GETTING List<UInt> from String
2021-03-17 12:16:16,406 [main:90] - GETTING List<UInt> from Int
2021-03-17 12:16:16,409 [main:90] - GETTING List<UInt> from Char
2021-03-17 12:16:16,411 [main:90] - GETTING List<UInt> from Char
2021-03-17 12:16:16,414 [main:90] - GETTING List<UInt> from String
2021-03-17 12:16:16,417 [main:90] - GETTING List<UInt> from String
2021-03-17 12:16:16,420 [main:90] - GETTING List<UInt> from Kla1
2021-03-17 12:16:16,429 [main:90] - GETTING List<UInt> from String
2021-03-17 12:16:16,432 [main:90] - GETTING List<UInt> from Int
2021-03-17 12:16:16,434 [main:90] - GETTING List<UInt> from String
2021-03-17 12:16:16,437 [main:90] - GETTING List<UInt> from String
2021-03-17 12:16:16,441 [main:90] - GETTING List<UInt> from Char
2021-03-17 12:16:16,445 [main:90] - GETTING List<UInt> from Kla2
2021-03-17 12:16:16,459 [main:90] - GETTING List<UInt> from String
2021-03-17 12:16:16,461 [main:90] - GETTING List<UInt> from Int
2021-03-17 12:16:16,464 [main:90] - GETTING List<UInt> from HashMap<Float, Double>
2021-03-17 12:16:16,464 [main:112] - replacement of prope2 of type List<UInt> is List<UInt>(-1394291455, {a: Int -> 1719858042.toUInt()})
2021-03-17 12:16:16,564 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:16:16,564 [main:66] - Compilation checking started
2021-03-17 12:16:17,214 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = listOf((test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).subSequence(1994957503, -573194860).sumOf({a: Char -> 398759087.toUInt()}), 2u, 3u)
    var prope3 = (0.06298694602373145).toInt().or(1559047804)
    List<UInt>(-1394291455, {a: Int -> 1719858042.toUInt()}).forEachIndexed { index, uInt ->
        prope3 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo('᎑').plus(59) + ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).compareTo(106).compareTo(-15)
    }
    if (false) throw AssertionError()
    return (ss).replace('韘', '?', false)
}


2021-03-17 12:16:17,214 [main:105] - replacing (3u, UInt)
2021-03-17 12:16:17,215 [main:36] - replacing 3u UInt
2021-03-17 12:16:17,215 [main:40] - Getting value of type UInt
2021-03-17 12:16:17,358 [main:298] - generating value of type = UInt true depth = 0
2021-03-17 12:16:17,359 [main:44] - GENERATED VALUE OF TYPE UInt = 1254268896.toUInt()
2021-03-17 12:16:17,359 [main:47] - GENERATED IS CALL =false
2021-03-17 12:16:17,468 [main:53] - randomType = UByte
2021-03-17 12:16:17,571 [main:298] - generating value of type = UByte true depth = 0
2021-03-17 12:16:17,600 [main:133] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@61cfc376]
2021-03-17 12:16:17,701 [main:298] - generating value of type = UByte true depth = 0
2021-03-17 12:16:17,703 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.coerceAtMost(maximumValue: kotlin.UInt): kotlin.UInt defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7319b772]
2021-03-17 12:16:17,803 [main:298] - generating value of type = UInt true depth = 0
2021-03-17 12:16:17,805 [main:63] - Generated call from random type = (125.toUByte()).div(45.toUByte()).coerceAtMost(1861117904.toUInt())
2021-03-17 12:16:17,806 [main:90] - GETTING UInt from Char
2021-03-17 12:16:17,830 [main:97] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6069728], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@41c1ee01]]
2021-03-17 12:16:17,830 [main:133] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6069728]
2021-03-17 12:16:17,830 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@41c1ee01]
2021-03-17 12:16:17,830 [main:101] - GENERATED CALL = ((69578300).toChar().toUpperCase()).toLong().toUInt()
2021-03-17 12:16:17,830 [main:97] - Case = [public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@470fa9de], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@495612a8]]
2021-03-17 12:16:17,831 [main:133] - GENERATING call of type public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@470fa9de]
2021-03-17 12:16:17,831 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@495612a8]
2021-03-17 12:16:17,831 [main:101] - GENERATED CALL = ((69578300).toChar().toUpperCase()).toFloat().toUInt()
2021-03-17 12:16:17,831 [main:97] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4593c8cb], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@6e6cba95]]
2021-03-17 12:16:17,831 [main:133] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4593c8cb]
2021-03-17 12:16:17,831 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@6e6cba95]
2021-03-17 12:16:17,831 [main:101] - GENERATED CALL = ((69578300).toChar().toUpperCase()).toShort().toUInt()
2021-03-17 12:16:17,831 [main:97] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2228e00]]
2021-03-17 12:16:17,831 [main:133] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2967ea20]
2021-03-17 12:16:17,938 [main:298] - generating value of type = Char true depth = 0
2021-03-17 12:16:17,940 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2228e00]
2021-03-17 12:16:17,940 [main:101] - GENERATED CALL = ((69578300).toChar().toUpperCase()).compareTo('').toUInt()
2021-03-17 12:16:17,940 [main:97] - Case = [public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@199b49ba], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@175cef2]]
2021-03-17 12:16:17,940 [main:133] - GENERATING call of type public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@199b49ba]
2021-03-17 12:16:17,940 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@175cef2]
2021-03-17 12:16:17,940 [main:101] - GENERATED CALL = ((69578300).toChar().toUpperCase()).toDouble().toUInt()
2021-03-17 12:16:17,940 [main:97] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@b8e4b53], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@64e4e885]]
2021-03-17 12:16:17,940 [main:133] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@b8e4b53]
2021-03-17 12:16:17,940 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@64e4e885]
2021-03-17 12:16:17,941 [main:101] - GENERATED CALL = ((69578300).toChar().toUpperCase()).toByte().toUInt()
2021-03-17 12:16:17,941 [main:112] - replacement of 3u of type UInt is ((69578300).toChar().toUpperCase()).compareTo('').toUInt()
2021-03-17 12:16:18,046 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:16:18,046 [main:66] - Compilation checking started
2021-03-17 12:16:18,697 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = listOf((test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).subSequence(1994957503, -573194860).sumOf({a: Char -> 398759087.toUInt()}), 2u, ((69578300).toChar().toUpperCase()).compareTo('').toUInt())
    var prope3 = (0.06298694602373145).toInt().or(1559047804)
    List<UInt>(-1394291455, {a: Int -> 1719858042.toUInt()}).forEachIndexed { index, uInt ->
        prope3 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo('᎑').plus(59) + ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).compareTo(106).compareTo(-15)
    }
    if (false) throw AssertionError()
    return (ss).replace('韘', '?', false)
}


2021-03-17 12:16:18,698 [main:105] - replacing (2u, UInt)
2021-03-17 12:16:18,698 [main:36] - replacing 2u UInt
2021-03-17 12:16:18,698 [main:40] - Getting value of type UInt
2021-03-17 12:16:18,799 [main:298] - generating value of type = UInt true depth = 0
2021-03-17 12:16:18,801 [main:44] - GENERATED VALUE OF TYPE UInt = 1713755508.toUInt()
2021-03-17 12:16:18,801 [main:47] - GENERATED IS CALL =false
2021-03-17 12:16:18,806 [main:53] - randomType = Double
2021-03-17 12:16:18,906 [main:298] - generating value of type = Double true depth = 0
2021-03-17 12:16:18,936 [main:133] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7540d103]
2021-03-17 12:16:18,936 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2228e00]
2021-03-17 12:16:18,937 [main:63] - Generated call from random type = (0.2520819708497618).toInt().toUInt()
2021-03-17 12:16:18,938 [main:90] - GETTING UInt from Int
2021-03-17 12:16:18,968 [main:97] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6f0ac9], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2228e00]]
2021-03-17 12:16:18,968 [main:133] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6f0ac9]
2021-03-17 12:16:19,068 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:19,070 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2228e00]
2021-03-17 12:16:19,070 [main:101] - GENERATED CALL = (((hashMapOf<Float, Double>()).size)).compareTo(1146379779).toUInt()
2021-03-17 12:16:19,070 [main:97] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d77cf0], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@6e6cba95]]
2021-03-17 12:16:19,070 [main:133] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d77cf0]
2021-03-17 12:16:19,070 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@6e6cba95]
2021-03-17 12:16:19,070 [main:101] - GENERATED CALL = (((hashMapOf<Float, Double>()).size)).toShort().toUInt()
2021-03-17 12:16:19,070 [main:97] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e7a913f], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@495612a8]]
2021-03-17 12:16:19,070 [main:133] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e7a913f]
2021-03-17 12:16:19,070 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@495612a8]
2021-03-17 12:16:19,071 [main:101] - GENERATED CALL = (((hashMapOf<Float, Double>()).size)).toFloat().toUInt()
2021-03-17 12:16:19,071 [main:97] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7540d103], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2228e00]]
2021-03-17 12:16:19,071 [main:133] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7540d103]
2021-03-17 12:16:19,071 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2228e00]
2021-03-17 12:16:19,071 [main:101] - GENERATED CALL = (((hashMapOf<Float, Double>()).size)).toInt().toUInt()
2021-03-17 12:16:19,071 [main:97] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2228e00]]
2021-03-17 12:16:19,071 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2228e00]
2021-03-17 12:16:19,071 [main:101] - GENERATED CALL = (((hashMapOf<Float, Double>()).size)).toUInt()
2021-03-17 12:16:19,071 [main:97] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4e248c8b], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@41c1ee01]]
2021-03-17 12:16:19,071 [main:133] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4e248c8b]
2021-03-17 12:16:19,071 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@41c1ee01]
2021-03-17 12:16:19,071 [main:101] - GENERATED CALL = (((hashMapOf<Float, Double>()).size)).toLong().toUInt()
2021-03-17 12:16:19,071 [main:97] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5065963c], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@64e4e885]]
2021-03-17 12:16:19,071 [main:133] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5065963c]
2021-03-17 12:16:19,071 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@64e4e885]
2021-03-17 12:16:19,072 [main:101] - GENERATED CALL = (((hashMapOf<Float, Double>()).size)).toByte().toUInt()
2021-03-17 12:16:19,072 [main:97] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3d649b2e], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@175cef2]]
2021-03-17 12:16:19,072 [main:133] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3d649b2e]
2021-03-17 12:16:19,072 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@175cef2]
2021-03-17 12:16:19,072 [main:101] - GENERATED CALL = (((hashMapOf<Float, Double>()).size)).toDouble().toUInt()
2021-03-17 12:16:19,072 [main:97] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@76a821f4], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@175cef2]]
2021-03-17 12:16:19,072 [main:133] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@76a821f4]
2021-03-17 12:16:19,172 [main:298] - generating value of type = Double true depth = 0
2021-03-17 12:16:19,173 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@175cef2]
2021-03-17 12:16:19,174 [main:101] - GENERATED CALL = (((hashMapOf<Float, Double>()).size)).div(0.3150028700030928).toUInt()
2021-03-17 12:16:19,174 [main:112] - replacement of 2u of type UInt is (0.2520819708497618).toInt().toUInt()
2021-03-17 12:16:19,300 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:16:19,300 [main:66] - Compilation checking started
2021-03-17 12:16:19,944 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = listOf((test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).subSequence(1994957503, -573194860).sumOf({a: Char -> 398759087.toUInt()}), (0.2520819708497618).toInt().toUInt(), ((69578300).toChar().toUpperCase()).compareTo('').toUInt())
    var prope3 = (0.06298694602373145).toInt().or(1559047804)
    List<UInt>(-1394291455, {a: Int -> 1719858042.toUInt()}).forEachIndexed { index, uInt ->
        prope3 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo('᎑').plus(59) + ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).compareTo(106).compareTo(-15)
    }
    if (false) throw AssertionError()
    return (ss).replace('韘', '?', false)
}


2021-03-17 12:16:19,944 [main:105] - replacing (prope3, Int)
2021-03-17 12:16:19,945 [main:36] - replacing prope3 Int
2021-03-17 12:16:19,945 [main:40] - Getting value of type Int
2021-03-17 12:16:20,051 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:20,052 [main:44] - GENERATED VALUE OF TYPE Int = 1371269231
2021-03-17 12:16:20,052 [main:47] - GENERATED IS CALL =false
2021-03-17 12:16:20,055 [main:53] - randomType = Double
2021-03-17 12:16:20,156 [main:298] - generating value of type = Double true depth = 0
2021-03-17 12:16:20,186 [main:133] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@16cec136]
2021-03-17 12:16:20,286 [main:298] - generating value of type = Byte true depth = 0
2021-03-17 12:16:20,288 [main:133] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@79d0d204]
2021-03-17 12:16:20,389 [main:298] - generating value of type = Int true depth = 0
2021-03-17 12:16:20,391 [main:63] - Generated call from random type = (0.7699889845775443).compareTo(76).rotateRight(-2086036731)
2021-03-17 12:16:20,391 [main:112] - replacement of prope3 of type Int is (0.7699889845775443).compareTo(76).rotateRight(-2086036731)
2021-03-17 12:16:20,492 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:16:20,493 [main:66] - Compilation checking started
2021-03-17 12:16:21,003 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = listOf((test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).subSequence(1994957503, -573194860).sumOf({a: Char -> 398759087.toUInt()}), (0.2520819708497618).toInt().toUInt(), ((69578300).toChar().toUpperCase()).compareTo('').toUInt())
    var prope3 = (0.06298694602373145).toInt().or(1559047804)
    List<UInt>(-1394291455, {a: Int -> 1719858042.toUInt()}).forEachIndexed { index, uInt ->
        (0.7699889845775443).compareTo(76).rotateRight(-2086036731) = (((hashMapOf<Float, Double>()).size).toChar()).compareTo('᎑').plus(59) + ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).compareTo(106).compareTo(-15)
    }
    if (false) throw AssertionError()
    return (ss).replace('韘', '?', false)
}


2021-03-17 12:16:21,004 [main:105] - replacing ({ index, uInt ->
        prope3 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo('᎑').plus(59) + ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).compareTo(106).compareTo(-15)
    }, Function2<[@kotlin.ParameterName] Int, UInt, Unit>)
2021-03-17 12:16:21,005 [main:36] - replacing { index, uInt ->
        prope3 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo('᎑').plus(59) + ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).compareTo(106).compareTo(-15)
    } Function2<[@kotlin.ParameterName] Int, UInt, Unit>
2021-03-17 12:16:21,005 [main:40] - Getting value of type Function2<[@kotlin.ParameterName] Int, UInt, Unit>
2021-03-17 12:16:21,109 [main:298] - generating value of type = Function2<[@kotlin.ParameterName] Int, UInt, Unit> false depth = 0
2021-03-17 12:16:21,110 [main:298] - generating value of type = Unit false depth = 1
2021-03-17 12:16:21,237 [main:45] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-17 12:16:21,240 [main:63] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-17 12:16:21,454 [main:298] - generating value of type = Boolean true depth = 4
2021-03-17 12:16:21,455 [main:97] - GENERATED = check(true)
2021-03-17 12:16:21,455 [main:44] - GENERATED VALUE OF TYPE Function2<[@kotlin.ParameterName] Int, UInt, Unit> = {a: Int, b: UInt -> check(true)}
2021-03-17 12:16:21,456 [main:47] - GENERATED IS CALL =false
2021-03-17 12:16:21,564 [main:53] - randomType = ULong
2021-03-17 12:16:21,664 [main:298] - generating value of type = ULong true depth = 0
2021-03-17 12:16:21,697 [main:90] - GETTING Function2<[@kotlin.ParameterName] Int, UInt, Unit> from Char
2021-03-17 12:16:21,719 [main:90] - GETTING Function2<[@kotlin.ParameterName] Int, UInt, Unit> from Function0<String>
2021-03-17 12:16:21,733 [main:90] - GETTING Function2<[@kotlin.ParameterName] Int, UInt, Unit> from Char
2021-03-17 12:16:21,737 [main:90] - GETTING Function2<[@kotlin.ParameterName] Int, UInt, Unit> from String
2021-03-17 12:16:21,758 [main:90] - GETTING Function2<[@kotlin.ParameterName] Int, UInt, Unit> from Kla1
2021-03-17 12:16:21,767 [main:90] - GETTING Function2<[@kotlin.ParameterName] Int, UInt, Unit> from Char
2021-03-17 12:16:21,771 [main:90] - GETTING Function2<[@kotlin.ParameterName] Int, UInt, Unit> from String
2021-03-17 12:16:21,775 [main:90] - GETTING Function2<[@kotlin.ParameterName] Int, UInt, Unit> from String
2021-03-17 12:16:21,779 [main:90] - GETTING Function2<[@kotlin.ParameterName] Int, UInt, Unit> from Int
2021-03-17 12:16:21,814 [main:90] - GETTING Function2<[@kotlin.ParameterName] Int, UInt, Unit> from String
2021-03-17 12:16:21,818 [main:90] - GETTING Function2<[@kotlin.ParameterName] Int, UInt, Unit> from Char
2021-03-17 12:16:21,823 [main:90] - GETTING Function2<[@kotlin.ParameterName] Int, UInt, Unit> from Kla2
2021-03-17 12:16:21,838 [main:90] - GETTING Function2<[@kotlin.ParameterName] Int, UInt, Unit> from Byte
2021-03-17 12:16:21,872 [main:90] - GETTING Function2<[@kotlin.ParameterName] Int, UInt, Unit> from Int
2021-03-17 12:16:21,876 [main:90] - GETTING Function2<[@kotlin.ParameterName] Int, UInt, Unit> from String
2021-03-17 12:16:21,880 [main:90] - GETTING Function2<[@kotlin.ParameterName] Int, UInt, Unit> from Int
2021-03-17 12:16:21,884 [main:90] - GETTING Function2<[@kotlin.ParameterName] Int, UInt, Unit> from Int
2021-03-17 12:16:21,889 [main:90] - GETTING Function2<[@kotlin.ParameterName] Int, UInt, Unit> from String
2021-03-17 12:16:21,893 [main:90] - GETTING Function2<[@kotlin.ParameterName] Int, UInt, Unit> from HashMap<Float, Double>
2021-03-17 12:16:21,982 [main:90] - GETTING Function2<[@kotlin.ParameterName] Int, UInt, Unit> from String
2021-03-17 12:16:21,986 [main:90] - GETTING Function2<[@kotlin.ParameterName] Int, UInt, Unit> from String
2021-03-17 12:16:21,990 [main:90] - GETTING Function2<[@kotlin.ParameterName] Int, UInt, Unit> from HashMap<Float, Double>
2021-03-17 12:16:21,990 [main:112] - replacement of { index, uInt ->
        prope3 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo('᎑').plus(59) + ((test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte()).compareTo(106).compareTo(-15)
    } of type Function2<[@kotlin.ParameterName] Int, UInt, Unit> is {a: Int, b: UInt -> check(true)}
2021-03-17 12:16:22,092 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-17 12:16:22,092 [main:66] - Compilation checking started
2021-03-17 12:16:22,731 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = listOf((test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).subSequence(1994957503, -573194860).sumOf({a: Char -> 398759087.toUInt()}), (0.2520819708497618).toInt().toUInt(), ((69578300).toChar().toUpperCase()).compareTo('').toUInt())
    var prope3 = (0.06298694602373145).toInt().or(1559047804)
    List<UInt>(-1394291455, {a: Int -> 1719858042.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(true)}
    if (false) throw AssertionError()
    return (ss).replace('韘', '?', false)
}


2021-03-17 12:16:22,732 [main:105] - replacing (listOf((test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).subSequence(1994957503, -573194860).sumOf({a: Char -> 398759087.toUInt()}), (0.2520819708497618).toInt().toUInt(), ((69578300).toChar().toUpperCase()).compareTo('').toUInt()), List<UInt>)
2021-03-17 12:16:22,732 [main:36] - replacing listOf((test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).subSequence(1994957503, -573194860).sumOf({a: Char -> 398759087.toUInt()}), (0.2520819708497618).toInt().toUInt(), ((69578300).toChar().toUpperCase()).compareTo('').toUInt()) List<UInt>
2021-03-17 12:16:22,732 [main:40] - Getting value of type List<UInt>
2021-03-17 12:16:22,833 [main:298] - generating value of type = List<UInt> false depth = 0
2021-03-17 12:16:22,942 [main:45] - GENERATING CALL OF fun <E> buildList(capacity: kotlin.Int, builderAction: kotlin.collections.MutableList<UInt>.()->kotlin.Unit): List<UInt> = TODO()
2021-03-17 12:16:22,944 [main:63] - WITHOUT TYPE PARAMS = fun <E> buildList(capacity: kotlin.Int, builderAction: kotlin.collections.MutableList<UInt>.()->kotlin.Unit): List<UInt> = TODO()
2021-03-17 12:16:23,282 [main:298] - generating value of type = Int true depth = 3
2021-03-17 12:16:23,283 [main:298] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableList<UInt>, Unit> false depth = 3
2021-03-17 12:16:23,284 [main:298] - generating value of type = Unit false depth = 4
2021-03-17 12:16:23,386 [main:45] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-17 12:16:23,388 [main:63] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-17 12:16:23,703 [main:298] - generating value of type = Int true depth = 7
2021-03-17 12:16:23,705 [main:298] - generating value of type = Function1<Int, Unit> false depth = 7
2021-03-17 12:16:23,706 [main:298] - generating value of type = Unit false depth = 8
2021-03-17 12:16:23,807 [main:45] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-17 12:16:23,809 [main:63] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-17 12:16:24,012 [main:298] - generating value of type = Boolean true depth = 11
2021-03-17 12:16:24,014 [main:97] - GENERATED = check(true)
2021-03-17 12:16:24,014 [main:97] - GENERATED = repeat(1385490276, {a: Int -> check(true)})
2021-03-17 12:16:24,014 [main:97] - GENERATED = buildList<UInt>(1807713956, { repeat(1385490276, {a: Int -> check(true)})})
2021-03-17 12:16:24,014 [main:44] - GENERATED VALUE OF TYPE List<UInt> = buildList<UInt>(1807713956, { repeat(1385490276, {a: Int -> check(true)})})
2021-03-17 12:16:24,014 [main:47] - GENERATED IS CALL =true
2021-03-17 12:16:24,016 [main:53] - randomType = UShort
2021-03-17 12:16:24,114 [main:298] - generating value of type = UShort true depth = 0
2021-03-17 12:16:24,145 [main:90] - GETTING List<UInt> from Int
2021-03-17 12:16:24,178 [main:90] - GETTING List<UInt> from Char
2021-03-17 12:16:24,198 [main:90] - GETTING List<UInt> from String
2021-03-17 12:16:24,218 [main:90] - GETTING List<UInt> from HashMap<Float, Double>
2021-03-17 12:16:24,305 [main:90] - GETTING List<UInt> from Byte
2021-03-17 12:16:24,338 [main:90] - GETTING List<UInt> from String
2021-03-17 12:16:24,340 [main:90] - GETTING List<UInt> from String
2021-03-17 12:16:24,343 [main:90] - GETTING List<UInt> from Char
2021-03-17 12:16:24,346 [main:90] - GETTING List<UInt> from String
2021-03-17 12:16:24,349 [main:90] - GETTING List<UInt> from Int
2021-03-17 12:16:24,352 [main:90] - GETTING List<UInt> from Kla1
2021-03-17 12:16:24,360 [main:90] - GETTING List<UInt> from String
2021-03-17 12:16:24,363 [main:90] - GETTING List<UInt> from Int
2021-03-17 12:16:24,366 [main:90] - GETTING List<UInt> from String
2021-03-17 12:16:24,369 [main:90] - GETTING List<UInt> from HashMap<Float, Double>
2021-03-17 12:16:24,372 [main:90] - GETTING List<UInt> from Char
2021-03-17 12:16:24,374 [main:90] - GETTING List<UInt> from String
2021-03-17 12:16:24,377 [main:90] - GETTING List<UInt> from String
2021-03-17 12:16:24,380 [main:90] - GETTING List<UInt> from Function0<String>
2021-03-17 12:16:24,393 [main:90] - GETTING List<UInt> from Kla2
2021-03-17 12:16:24,409 [main:90] - GETTING List<UInt> from Int
2021-03-17 12:16:24,412 [main:90] - GETTING List<UInt> from Char
2021-03-17 12:16:24,412 [main:112] - replacement of listOf((test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).subSequence(1994957503, -573194860).sumOf({a: Char -> 398759087.toUInt()}), (0.2520819708497618).toInt().toUInt(), ((69578300).toChar().toUpperCase()).compareTo('').toUInt()) of type List<UInt> is buildList<UInt>(1807713956, { repeat(1385490276, {a: Int -> check(true)})})
2021-03-17 12:16:24,511 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-17 12:16:24,511 [main:66] - Compilation checking started
2021-03-17 12:16:25,121 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>(1807713956, { repeat(1385490276, {a: Int -> check(true)})})
    var prope3 = (0.06298694602373145).toInt().or(1559047804)
    List<UInt>(-1394291455, {a: Int -> 1719858042.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(true)}
    if (false) throw AssertionError()
    return (ss).replace('韘', '?', false)
}


2021-03-17 12:16:25,215 [main:139] - TRYING TO REPLACE CONSTANT 0.06298694602373145
2021-03-17 12:16:25,306 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-17 12:16:25,306 [main:66] - Compilation checking started
2021-03-17 12:16:25,911 [main:139] - TRYING TO REPLACE CONSTANT 1559047804
2021-03-17 12:16:26,005 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-17 12:16:26,006 [main:66] - Compilation checking started
2021-03-17 12:16:26,584 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>(1807713956, { repeat(1385490276, {a: Int -> check(true)})})
    var prope3 = (0.06298694602373145).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-1394291455, {a: Int -> 1719858042.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(true)}
    if (false) throw AssertionError()
    return (ss).replace('韘', '?', false)
}


2021-03-17 12:16:26,585 [main:139] - TRYING TO REPLACE CONSTANT '韘'
2021-03-17 12:16:26,679 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:16:26,679 [main:66] - Compilation checking started
2021-03-17 12:16:27,317 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>(1807713956, { repeat(1385490276, {a: Int -> check(true)})})
    var prope3 = (0.06298694602373145).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-1394291455, {a: Int -> 1719858042.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(true)}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', false)
}


2021-03-17 12:16:27,318 [main:139] - TRYING TO REPLACE CONSTANT '?'
2021-03-17 12:16:27,410 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-17 12:16:27,410 [main:66] - Compilation checking started
2021-03-17 12:16:28,017 [main:139] - TRYING TO REPLACE CONSTANT false
2021-03-17 12:16:28,110 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-17 12:16:28,110 [main:66] - Compilation checking started
2021-03-17 12:16:28,691 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>(1807713956, { repeat(1385490276, {a: Int -> check(true)})})
    var prope3 = (0.06298694602373145).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-1394291455, {a: Int -> 1719858042.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(true)}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:28,691 [main:139] - TRYING TO REPLACE CONSTANT 1394291455
2021-03-17 12:16:28,792 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:28,793 [main:66] - Compilation checking started
2021-03-17 12:16:29,400 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>(1807713956, { repeat(1385490276, {a: Int -> check(true)})})
    var prope3 = (0.06298694602373145).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1719858042.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(true)}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:29,401 [main:139] - TRYING TO REPLACE CONSTANT 1719858042
2021-03-17 12:16:29,507 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-17 12:16:29,508 [main:66] - Compilation checking started
2021-03-17 12:16:29,967 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>(1807713956, { repeat(1385490276, {a: Int -> check(true)})})
    var prope3 = (0.06298694602373145).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> compareTo((69578300).toChar()).toUInt()}).forEachIndexed {a: Int, b: UInt -> check(true)}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:29,967 [main:139] - TRYING TO REPLACE CONSTANT true
2021-03-17 12:16:30,060 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-17 12:16:30,060 [main:66] - Compilation checking started
2021-03-17 12:16:30,633 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>(1807713956, { repeat(1385490276, {a: Int -> check(true)})})
    var prope3 = (0.06298694602373145).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1719858042.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:30,633 [main:139] - TRYING TO REPLACE CONSTANT 1807713956
2021-03-17 12:16:30,729 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-17 12:16:30,729 [main:66] - Compilation checking started
2021-03-17 12:16:31,348 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(1385490276, {a: Int -> check(true)})})
    var prope3 = (0.06298694602373145).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1719858042.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:31,348 [main:139] - TRYING TO REPLACE CONSTANT 1385490276
2021-03-17 12:16:31,443 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-17 12:16:31,443 [main:66] - Compilation checking started
2021-03-17 12:16:32,028 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(1394291455, {a: Int -> check(true)})})
    var prope3 = (0.06298694602373145).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1719858042.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:32,028 [main:139] - TRYING TO REPLACE CONSTANT true
2021-03-17 12:16:32,122 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-17 12:16:32,123 [main:66] - Compilation checking started
2021-03-17 12:16:32,710 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(1394291455, {a: Int -> check(false)})})
    var prope3 = (0.06298694602373145).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1719858042.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:32,710 [main:88] - Final res = val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 1.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(1394291455, {a: Int -> check(false)})})
    var prope3 = (0.06298694602373145).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1719858042.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:32,901 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-17 12:16:32,902 [main:66] - Compilation checking started
2021-03-17 12:16:33,513 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(1394291455, {a: Int -> check(false)})})
    var prope3 = (0.06298694602373145).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1719858042.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:33,513 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-17 12:16:33,513 [main:66] - Compilation checking started
2021-03-17 12:16:34,092 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(1394291455, {a: Int -> check(false)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1719858042.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:34,092 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-17 12:16:34,092 [main:66] - Compilation checking started
2021-03-17 12:16:34,556 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(993761412, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(1394291455, {a: Int -> check(false)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1719858042.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), 1583379214, true)
}


2021-03-17 12:16:34,556 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:34,556 [main:66] - Compilation checking started
2021-03-17 12:16:35,159 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(1394291455, {a: Int -> check(false)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1719858042.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:35,160 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-17 12:16:35,160 [main:66] - Compilation checking started
2021-03-17 12:16:35,763 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(993761412, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(1394291455, {a: Int -> check(false)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1719858042.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:35,763 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-17 12:16:35,763 [main:66] - Compilation checking started
2021-03-17 12:16:36,340 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(1394291455, {a: Int -> check(false)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1719858042.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:36,340 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-17 12:16:36,340 [main:66] - Compilation checking started
2021-03-17 12:16:36,953 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(1394291455, {a: Int -> check(false)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1719858042.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:36,953 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-17 12:16:36,953 [main:66] - Compilation checking started
2021-03-17 12:16:37,564 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(1394291455, {a: Int -> check(false)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:37,564 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-17 12:16:37,564 [main:66] - Compilation checking started
2021-03-17 12:16:38,140 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(false)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:38,140 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:38,140 [main:66] - Compilation checking started
2021-03-17 12:16:38,614 [main:49] - Result = false
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 26151.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> -992448983.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(false)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:38,614 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-17 12:16:38,614 [main:66] - Compilation checking started
2021-03-17 12:16:39,211 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(false)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:39,212 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-17 12:16:39,212 [main:66] - Compilation checking started
2021-03-17 12:16:39,817 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "hbkhb"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:39,817 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:16:39,817 [main:66] - Compilation checking started
2021-03-17 12:16:40,403 [main:53] - Result = true
Text:
val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:40,404 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:16:40,404 [main:66] - Compilation checking started
2021-03-17 12:16:41,011 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:41,011 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:16:41,011 [main:66] - Compilation checking started
2021-03-17 12:16:41,610 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:41,611 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:16:41,611 [main:66] - Compilation checking started
2021-03-17 12:16:42,075 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$sstxmiu"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "onlyk")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:42,075 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:16:42,075 [main:66] - Compilation checking started
2021-03-17 12:16:42,650 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "b", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:42,650 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:16:42,650 [main:66] - Compilation checking started
2021-03-17 12:16:43,234 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "c", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:43,234 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:16:43,234 [main:66] - Compilation checking started
2021-03-17 12:16:43,846 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("a", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:43,846 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:16:43,847 [main:66] - Compilation checking started
2021-03-17 12:16:44,427 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("qdhvi", "b", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:44,427 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:16:44,427 [main:66] - Compilation checking started
2021-03-17 12:16:44,998 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:44,998 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:16:44,998 [main:66] - Compilation checking started
2021-03-17 12:16:45,479 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$xxpaft")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "0:a;1:b;2:c;3:d;")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:45,480 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:16:45,480 [main:66] - Compilation checking started
2021-03-17 12:16:46,071 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "uavpp"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "wtgqc")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:46,072 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(REFERENCE_EXPRESSION)
2021-03-17 12:16:46,072 [main:66] - Compilation checking started
2021-03-17 12:16:46,645 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "wtgqc")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:46,740 [main:33] - Trying to replace PsiElement(DOT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:46,741 [main:66] - Compilation checking started
2021-03-17 12:16:47,322 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "wtgqc")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:47,322 [main:33] - Trying to replace PsiElement(DOT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:47,322 [main:66] - Compilation checking started
2021-03-17 12:16:47,929 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()}))).replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "wtgqc")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:47,929 [main:33] - Trying to replace PsiElement(DOT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:47,929 [main:66] - Compilation checking started
2021-03-17 12:16:48,520 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase().toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "wtgqc")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:48,521 [main:33] - Trying to replace PsiElement(DOT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:48,521 [main:66] - Compilation checking started
2021-03-17 12:16:49,104 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2().callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "wtgqc")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:49,104 [main:33] - Trying to replace PsiElement(DOT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:49,104 [main:66] - Compilation checking started
2021-03-17 12:16:49,685 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>()).size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "wtgqc")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:49,685 [main:33] - Trying to replace PsiElement(DOT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:49,686 [main:66] - Compilation checking started
2021-03-17 12:16:50,277 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar().toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "wtgqc")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:50,278 [main:33] - Trying to replace PsiElement(DOT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:50,278 [main:66] - Compilation checking started
2021-03-17 12:16:50,866 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()}).forEachIndexed {a: Int, b: UInt -> check(ss == "wtgqc")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:50,867 [main:33] - Trying to replace PsiElement(DOT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:50,867 [main:66] - Compilation checking started
2021-03-17 12:16:51,461 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar()).toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss == "wtgqc")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:51,461 [main:33] - Trying to replace PsiElement(DOT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:51,462 [main:66] - Compilation checking started
2021-03-17 12:16:52,054 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss == "wtgqc")}
    if (false) throw AssertionError()
    return (ss).replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:52,055 [main:33] - Trying to replace PsiElement(DOT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:52,055 [main:66] - Compilation checking started
2021-03-17 12:16:52,636 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss == "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:52,637 [main:33] - Trying to replace PsiElement(DOT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:52,637 [main:66] - Compilation checking started
2021-03-17 12:16:53,220 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss == "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:53,220 [main:33] - Trying to replace PsiElement(DOT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:53,221 [main:66] - Compilation checking started
2021-03-17 12:16:53,828 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543).toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss == "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:53,828 [main:33] - Trying to replace PsiElement(DOT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:53,828 [main:66] - Compilation checking started
2021-03-17 12:16:54,442 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size).toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss == "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:54,443 [main:33] - Trying to replace PsiElement(DOT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:54,443 [main:66] - Compilation checking started
2021-03-17 12:16:55,027 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size).toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss == "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:55,028 [main:33] - Trying to replace PsiElement(DOT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:55,028 [main:66] - Compilation checking started
2021-03-17 12:16:55,615 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>()).size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss == "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:55,615 [main:33] - Trying to replace PsiElement(DOT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:55,616 [main:66] - Compilation checking started
2021-03-17 12:16:56,218 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size).toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss == "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:56,218 [main:33] - Trying to replace PsiElement(DOT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:56,219 [main:66] - Compilation checking started
2021-03-17 12:16:56,804 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss == "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:56,804 [main:33] - Trying to replace PsiElement(DOT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:56,804 [main:66] - Compilation checking started
2021-03-17 12:16:57,392 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss == "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:57,392 [main:33] - Trying to replace PsiElement(DOT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:57,392 [main:66] - Compilation checking started
2021-03-17 12:16:57,979 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss == "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:57,980 [main:33] - Trying to replace PsiElement(DOT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:57,980 [main:66] - Compilation checking started
2021-03-17 12:16:58,584 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss == "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:58,584 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-17 12:16:58,584 [main:66] - Compilation checking started
2021-03-17 12:16:59,187 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>()).size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:59,187 [main:33] - Trying to replace PsiElement(DOT) on Element(PREFIX_EXPRESSION)
2021-03-17 12:16:59,187 [main:66] - Compilation checking started
2021-03-17 12:16:59,776 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:16:59,895 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:16:59,896 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:16:59,896 [main:66] - Compilation checking started
2021-03-17 12:17:00,381 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: Float)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Double>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:00,382 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:00,382 [main:66] - Compilation checking started
2021-03-17 12:17:01,002 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:01,002 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:01,002 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:01,002 [main:66] - Compilation checking started
2021-03-17 12:17:01,490 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Double>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Float -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:01,491 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:01,491 [main:66] - Compilation checking started
2021-03-17 12:17:02,083 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:02,083 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:02,084 [main:66] - Compilation checking started
2021-03-17 12:17:02,569 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Kla0 -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:02,570 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:02,570 [main:66] - Compilation checking started
2021-03-17 12:17:03,162 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Double>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, Double>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:03,162 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:03,162 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:03,162 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:03,162 [main:66] - Compilation checking started
2021-03-17 12:17:03,754 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Double>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:03,754 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:03,755 [main:66] - Compilation checking started
2021-03-17 12:17:04,234 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Float -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Double>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:04,235 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:04,235 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:04,235 [main:66] - Compilation checking started
2021-03-17 12:17:04,844 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:04,844 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:04,844 [main:66] - Compilation checking started
2021-03-17 12:17:05,323 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> Float)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Float, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:05,323 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:05,324 [main:66] - Compilation checking started
2021-03-17 12:17:05,922 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Double>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:05,923 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:05,925 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:05,925 [main:66] - Compilation checking started
2021-03-17 12:17:06,668 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:06,668 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:06,668 [main:66] - Compilation checking started
2021-03-17 12:17:07,210 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Float -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Double>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:07,210 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:07,211 [main:66] - Compilation checking started
2021-03-17 12:17:07,949 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:07,949 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:07,949 [main:66] - Compilation checking started
2021-03-17 12:17:07,949 [main:68] - Already checked
2021-03-17 12:17:07,949 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:07,950 [main:66] - Compilation checking started
2021-03-17 12:17:08,462 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): ArrayList<HashSet<Collection<List<HashMap<ArrayDeque<UShort>, List<Float>>>>>> {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<Float, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:08,463 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:08,463 [main:66] - Compilation checking started
2021-03-17 12:17:09,219 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:09,219 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:09,220 [main:66] - Compilation checking started
2021-03-17 12:17:09,727 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: Float)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:09,727 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:09,727 [main:66] - Compilation checking started
2021-03-17 12:17:10,228 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): UByte =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Float, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:10,228 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:10,228 [main:66] - Compilation checking started
2021-03-17 12:17:10,970 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:10,970 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:10,971 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:10,971 [main:66] - Compilation checking started
2021-03-17 12:17:11,482 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<String>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:11,483 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:11,483 [main:66] - Compilation checking started
2021-03-17 12:17:11,987 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<Set<Map<Long, Map<ULong, LinkedHashSet<Triple<Double, Boolean, Float>>>>>>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:11,987 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:11,988 [main:66] - Compilation checking started
2021-03-17 12:17:12,494 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<LinkedHashSet<String>>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:12,494 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:12,495 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:12,495 [main:66] - Compilation checking started
2021-03-17 12:17:12,996 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: UInt -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:12,997 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:12,997 [main:66] - Compilation checking started
2021-03-17 12:17:13,511 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: LinkedHashMap<Boolean, MutableMap<Byte, Char>> -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:13,512 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:13,512 [main:66] - Compilation checking started
2021-03-17 12:17:14,030 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, UShortArray>()).size)

    inner class Kla2 : Triple<String, Map<Collection<Char>, Boolean>, HashMap<Short, UByte>>(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:14,030 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:14,031 [main:66] - Compilation checking started
2021-03-17 12:17:14,540 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<Float, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: Map<ArrayDeque<Long>, Short> -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:14,541 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:14,541 [main:66] - Compilation checking started
2021-03-17 12:17:15,285 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Float, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:15,285 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:15,285 [main:66] - Compilation checking started
2021-03-17 12:17:16,045 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:16,045 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:16,045 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:16,045 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:16,045 [main:66] - Compilation checking started
2021-03-17 12:17:16,555 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<Float>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:16,555 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:16,556 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:16,556 [main:66] - Compilation checking started
2021-03-17 12:17:17,072 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Boolean(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:17,073 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:17,073 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:17,073 [main:66] - Compilation checking started
2021-03-17 12:17:17,073 [main:68] - Already checked
2021-03-17 12:17:17,074 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:17,074 [main:66] - Compilation checking started
2021-03-17 12:17:17,581 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<ArrayList<Map<Collection<Long>, LinkedHashSet<LinkedHashSet<Sequence<String>>>>>>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:17,581 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:17,581 [main:66] - Compilation checking started
2021-03-17 12:17:18,095 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : String> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Float, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:18,096 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:18,096 [main:66] - Compilation checking started
2021-03-17 12:17:18,834 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:18,834 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:18,834 [main:66] - Compilation checking started
2021-03-17 12:17:19,336 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: Float -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:19,336 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:19,336 [main:66] - Compilation checking started
2021-03-17 12:17:19,842 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : ULong> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:19,842 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:19,842 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:19,842 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:19,842 [main:66] - Compilation checking started
2021-03-17 12:17:20,363 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<Double>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:20,363 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:20,363 [main:66] - Compilation checking started
2021-03-17 12:17:20,865 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Double -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:20,865 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:20,865 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:20,865 [main:66] - Compilation checking started
2021-03-17 12:17:21,365 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<Double>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:21,366 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:21,366 [main:66] - Compilation checking started
2021-03-17 12:17:21,866 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<LinkedHashSet<Char>>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:21,867 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:21,867 [main:66] - Compilation checking started
2021-03-17 12:17:22,378 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: Pair<Byte, Set<ArrayDeque<String>>>)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:22,378 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:22,379 [main:66] - Compilation checking started
2021-03-17 12:17:22,881 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: String, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:22,881 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:22,881 [main:66] - Compilation checking started
2021-03-17 12:17:23,447 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Set<Map<Double, ArrayList<Collection<ArrayList<Char>>>>>(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:23,447 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:23,448 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:23,448 [main:66] - Compilation checking started
2021-03-17 12:17:23,958 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): Float =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:23,960 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:23,960 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:23,961 [main:66] - Compilation checking started
2021-03-17 12:17:24,491 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Byte(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:24,491 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:24,492 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:24,493 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:24,493 [main:66] - Compilation checking started
2021-03-17 12:17:25,002 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Triple<Set<Collection<ULong>>, List<LinkedHashMap<Collection<ULong>, ArrayList<Triple<Int, Triple<Double, UInt, LinkedHashMap<Short, Triple<Boolean, Array<UInt>, Boolean>>>, HashSet<MutableMap<ULong, Float>>>>>>, Float>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:25,003 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:25,003 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:25,003 [main:66] - Compilation checking started
2021-03-17 12:17:25,516 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<Boolean>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:25,516 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:25,516 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:25,516 [main:66] - Compilation checking started
2021-03-17 12:17:26,021 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Float -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:26,022 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:26,022 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:26,022 [main:66] - Compilation checking started
2021-03-17 12:17:26,533 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<Float>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:26,533 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:26,533 [main:66] - Compilation checking started
2021-03-17 12:17:27,037 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: UByte, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:27,037 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:27,037 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:27,037 [main:66] - Compilation checking started
2021-03-17 12:17:27,037 [main:68] - Already checked
2021-03-17 12:17:27,037 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<Float>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:27,037 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:27,037 [main:66] - Compilation checking started
2021-03-17 12:17:27,540 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Double -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:27,540 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:27,540 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:27,541 [main:66] - Compilation checking started
2021-03-17 12:17:28,042 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: MutableMap<Double, Set<Set<List<Collection<Boolean>>>>>): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:28,044 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:28,044 [main:66] - Compilation checking started
2021-03-17 12:17:28,559 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: ArrayDeque<Set<Map<Float, Map<ArrayList<Pair<ArrayList<LinkedHashSet<Byte>>, Pair<Sequence<UInt>, HashMap<Long, String>>>>, Array<Triple<Int, Sequence<Char>, ArrayList<HashMap<Float, Char>>>>>>>> -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:28,559 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:28,560 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:28,560 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:28,560 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:28,560 [main:66] - Compilation checking started
2021-03-17 12:17:29,062 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: UByte -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:29,063 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:29,063 [main:66] - Compilation checking started
2021-03-17 12:17:29,575 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> Double)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:29,575 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:29,575 [main:66] - Compilation checking started
2021-03-17 12:17:30,073 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: () -> String -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:30,073 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:30,074 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:30,074 [main:66] - Compilation checking started
2021-03-17 12:17:30,588 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Float> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:30,588 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:30,588 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:30,588 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:30,588 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:30,588 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:30,588 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:30,588 [main:66] - Compilation checking started
2021-03-17 12:17:31,091 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<Float>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:31,091 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:31,092 [main:66] - Compilation checking started
2021-03-17 12:17:31,592 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Short -> (hashMapOf<Float, Double>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:31,592 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:31,592 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:31,593 [main:66] - Compilation checking started
2021-03-17 12:17:32,331 [main:53] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, String>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:32,331 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:32,332 [main:66] - Compilation checking started
2021-03-17 12:17:32,850 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: String): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, String>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:32,850 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:32,850 [main:66] - Compilation checking started
2021-03-17 12:17:33,349 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): Double {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, String>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:33,349 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:33,350 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-17 12:17:33,350 [main:66] - Compilation checking started
2021-03-17 12:17:33,852 [main:49] - Result = false
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, String>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<Collection<Map<MutableMap<MutableMap<Long, Char>, MutableMap<ULong, Map<Short, Array<Short>>>>, MutableMap<Array<Float>, Boolean>>>>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}


2021-03-17 12:17:33,860 [main:66] - Compilation checking started
2021-03-17 12:17:33,869 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:17:33,870 [main:66] - Compilation checking started
2021-03-17 12:17:33,878 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:17:33,879 [main:66] - Compilation checking started
2021-03-17 12:17:33,888 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:17:33,888 [main:66] - Compilation checking started
2021-03-17 12:17:33,898 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:17:33,898 [main:66] - Compilation checking started
2021-03-17 12:17:33,907 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:17:33,908 [main:66] - Compilation checking started
2021-03-17 12:17:33,917 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:17:33,917 [main:66] - Compilation checking started
2021-03-17 12:17:33,926 [main:71] - Wrong syntax or breaks conditions
2021-03-17 12:17:34,136 [main:66] - Compilation checking started
2021-03-17 12:17:35,061 [main:67] - Trying to add BLOCK to CLASS
2021-03-17 12:17:35,061 [main:66] - Compilation checking started
2021-03-17 12:17:35,440 [main:74] - Result = true
Text:
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, String>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String){
override fun toString(): String{
var res = ""
return res
}
}

class Kla1 {
    

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}

val Kla1.prope0 get() = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

