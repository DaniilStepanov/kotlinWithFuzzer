2021-03-17 12:09:10,983 [main:23] - Name = /home/stepanov/Kotlin/kotlinWithFuzzer/./bbfgradle/tmp/arrays/forInIterableTypeParameterWithIndex0.kt
2021-03-17 12:09:16,792 [main:46] - Start to mutate
2021-03-17 12:09:16,793 [main:47] - BEFORE = val xs = listOf("a", "b", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "fail: '$ss'"
}
2021-03-17 12:09:18,213 [main:39] - Mutation of ./bbfgradle/tmp/tmp0.kt started
2021-03-17 12:09:18,214 [main:18] - Cur transformation ChangeRandomASTNodes
2021-03-17 12:09:38,922 [main:18] - Cur transformation ChangeTypes
2021-03-17 12:09:58,655 [main:18] - Cur transformation AddBracketsToExpression
2021-03-17 12:10:01,307 [main:18] - Cur transformation ReinitProperties
2021-03-17 12:10:01,404 [main:18] - Cur transformation ChangeRandomASTNodesFromAnotherTrees
2021-03-17 12:10:58,714 [main:18] - Cur transformation AddFunInvocations
2021-03-17 12:11:27,991 [main:18] - Cur transformation AddDefaultValueToArg
2021-03-17 12:11:28,072 [main:18] - Cur transformation AddPossibleModifiers
2021-03-17 12:11:28,153 [main:18] - Cur transformation ChangeRandomLines
2021-03-17 12:11:51,339 [main:18] - Cur transformation ChangeArgToAnotherValue
2021-03-17 12:11:51,422 [main:18] - Cur transformation AddNodesFromAnotherFiles
2021-03-17 12:12:55,381 [main:18] - Cur transformation AddNullabilityTransformer
2021-03-17 12:12:59,191 [main:18] - Cur transformation AddSameFunctions
2021-03-17 12:13:03,961 [main:18] - Cur transformation ChangeRandomASTNodesFromAnotherTrees
2021-03-17 12:15:33,863 [main:18] - Cur transformation ChangeRandomLines
2021-03-17 12:15:38,605 [main:18] - Cur transformation ChangeReturnValueToConstant
2021-03-17 12:15:39,224 [main:18] - Cur transformation AddNotNullAssertions
2021-03-17 12:15:44,661 [main:18] - Cur transformation AddNodesFromAnotherFiles
2021-03-17 12:16:32,898 [main:18] - Cur transformation ChangeConstants
2021-03-17 12:16:46,739 [main:18] - Cur transformation ChangeOperators
2021-03-17 12:16:59,893 [main:18] - Cur transformation ChangeTypes
2021-03-17 12:17:34,028 [main:18] - Cur transformation ChangeSmthToExtension
2021-03-17 12:17:35,034 [main:45] - End
2021-03-17 12:17:35,034 [main:62] - Mutated = ./bbfgradle/tmp/tmp0.kt
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") "OK" else "hjgud$ss'"
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, String>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String)

class Kla1 {
    

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) throw AssertionError()
    return (ss)!!.replace((69578300).toChar(), '?', true)
}

val Kla1.prope0 get() = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

2021-03-17 12:17:35,682 [main:65] - Traced = ./bbfgradle/tmp/tmp0.kt
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") {
println("""THEN""");
"OK"
} else {
println("""ELSE""");
"hjgud$ss'"
}
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, String>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String){
override fun toString(): String{
var res = ""
return res
}
}

class Kla1 {
    

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) {
println("""THEN""");
throw AssertionError()
}
    return (ss)!!.replace((69578300).toChar(), '?', true)
}

val Kla1.prope0 get() = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

2021-03-17 12:17:35,683 [main:55] - Trying to compile with main function:
2021-03-17 12:17:36,822 [main:62] - Executing traced code:
./bbfgradle/tmp/tmp0.kt
val xs = listOf("a", "dpdom", "c", "d")

fun <T : Iterable<*>> test(iterable: T): String {
    val s = StringBuilder()

    for ((index, x) in iterable!!.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

fun box(): String {
    val xs = listOf("a", "ddknf", "wdhwh", "d")
val ss = test(xs)
    return if (ss == "0:a;1:b;2:c;3:d;") {
println("""THEN""");
"OK"
} else {
println("""ELSE""");
"hjgud$ss'"
}
}

fun fu0() = (test<UShortArray>(UShortArray(-270936647, {a: Int -> (hashMapOf<Float, String>())!!.size!!.toUShort()}))).replaceIndent("krmnl")

fun fu1() = (test<UShortArray>(UShortArray(1171410101, {a: Int -> 1892988961.toUShort()}))).toByte().toString()

fun fu2() = "fblhl"

fun fu3() = 115725494!!.toString()

fun fu4() = 1L!!.toString()

fun fu5() = (test<UShortArray>(UShortArray(1687174037, {a: Int -> 1!!.toUShort()})))!!.replaceIndentByMargin("msiel", "ttkxo")

fun fu6() = (hashMapOf<Int, Int>())!!.size.toString(-993761412)

fun fu7() = (69578300).toChar()!!.toUpperCase()!!.toString()

open class Kla0(val callback: () -> String){
override fun toString(): String{
var res = ""
return res
}
}

class Kla1 {
    

    inner class Kla2 : Kla0(
            run {
                val prope1 = prope0
                { "hwwxs"}
            }
    )
}

fun box866(): String =
        Kla1().Kla2()!!.callback()

fun box197(): String {
    val ss = test(xs)
val prope0 = (((hashMapOf<Double, Double>()).size)!!.toChar())!!.compareTo((69578300).toChar()).toString((hashMapOf<Double, Triple<HashSet<UInt>, Float, Double>>())!!.size)
val prope1 = prope0
val xs = listOf("qdhvi", "wgame", "c", "d")
val prope2 = buildList<UInt>((((hashMapOf<UShort, Int>()).size)!!.toChar()).compareTo((69578300).toChar()), { repeat(340490528, {a: Int -> check(true)})})
    var prope3 = (0.14176028236424543)!!.toInt().or(((hashMapOf<Int, Set<Pair<UInt, MutableMap<Byte, ArrayDeque<HashMap<LinkedHashSet<Triple<HashSet<Boolean>, Triple<HashMap<ArrayList<Boolean>, UByte>, ArrayList<Map<Double, HashMap<Int, LinkedHashMap<Long, UShort>>>>, LinkedHashMap<LinkedHashMap<Boolean, LinkedHashMap<Float, Float>>, Collection<Map<LinkedHashMap<Long, HashMap<ULong, Set<Sequence<Set<Collection<HashSet<MutableMap<Byte, Map<Map<List<Int>, Sequence<Array<Double>>>, Set<String>>>>>>>>>>, Int>>>>, MutableMap<Triple<Int, Char, Array<Set<UInt>>>, ULong>>>, MutableMap<Map<Char, Long>, Boolean>>>>>>>()).size))
    List<UInt>(-993761412, {a: Int -> 1454293411!!.toUInt()})!!.forEachIndexed {a: Int, b: UInt -> check(ss != "wtgqc")}
    if (false) {
println("""THEN""");
throw AssertionError()
}
    return (ss)!!.replace((69578300).toChar(), '?', true)
}

val Kla1.prope0 get() = (((hashMapOf<HashSet<Array<List<Int>>>, Int>()).size)!!.toChar()).compareTo((1058507676).toChar())!!.toString((hashMapOf<ArrayDeque<Array<Boolean>>, UShortArray>()).size)

2021-03-17 12:17:37,984 [main:71] - Result of JVM : 

2021-03-17 12:17:37,984 [main:72] - Errors: Exception in thread "main" java.lang.IllegalArgumentException: radix 0 was not in valid range 2..36
	at kotlin.text.CharsKt__CharJVMKt.checkRadix(CharJVM.kt:299)
	at Tmp0Kt.getPrope0(tmp0.kt:77)
	at Kla1$Kla2.<init>(tmp0.kt:53)
	at Tmp0Kt.box866(tmp0.kt:60)
	at Tmp0Kt.main(tmp0.kt:81)

2021-03-17 12:17:39,107 [main:71] - Result of JVM -Xuse-ir: 

2021-03-17 12:17:39,107 [main:72] - Errors: Exception in thread "main" java.lang.IllegalArgumentException: radix 0 was not in valid range 2..36
	at kotlin.text.CharsKt__CharJVMKt.checkRadix(CharJVM.kt:299)
	at Tmp0Kt.getPrope0(tmp0.kt:77)
	at Kla1$Kla2.<init>(tmp0.kt:53)
	at Tmp0Kt.box866(tmp0.kt:60)
	at Tmp0Kt.main(tmp0.kt:81)

2021-03-17 12:17:40,209 [main:71] - Result of JVM -Xno-optimize: 

2021-03-17 12:17:40,209 [main:72] - Errors: Exception in thread "main" java.lang.IllegalArgumentException: radix 0 was not in valid range 2..36
	at kotlin.text.CharsKt__CharJVMKt.checkRadix(CharJVM.kt:299)
	at Tmp0Kt.getPrope0(tmp0.kt:77)
	at Kla1$Kla2.<init>(tmp0.kt:53)
	at Tmp0Kt.box866(tmp0.kt:60)
	at Tmp0Kt.main(tmp0.kt:81)

